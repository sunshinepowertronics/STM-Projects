
RTC_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c14  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  08004ccc  08004ccc  00005ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ea8  08004ea8  00006078  2**0
                  CONTENTS
  4 .ARM          00000000  08004ea8  08004ea8  00006078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ea8  08004ea8  00006078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ea8  08004ea8  00005ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004eac  08004eac  00005eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08004eb0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  20000078  08004f28  00006078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  08004f28  000062d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec27  00000000  00000000  000060a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002306  00000000  00000000  00014cc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  00016fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000091f  00000000  00000000  00017b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015c25  00000000  00000000  00018497  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff8b  00000000  00000000  0002e0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000871d7  00000000  00000000  0003e047  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c521e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e5c  00000000  00000000  000c5264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000c80c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000078 	.word	0x20000078
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004cb4 	.word	0x08004cb4

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	2000007c 	.word	0x2000007c
 80000fc:	08004cb4 	.word	0x08004cb4

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_shi>:
 8000110:	b403      	push	{r0, r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0040      	lsls	r0, r0, #1
 8000118:	0049      	lsls	r1, r1, #1
 800011a:	5e09      	ldrsh	r1, [r1, r0]
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	448e      	add	lr, r1
 8000120:	bc03      	pop	{r0, r1}
 8000122:	4770      	bx	lr

08000124 <__udivsi3>:
 8000124:	2200      	movs	r2, #0
 8000126:	0843      	lsrs	r3, r0, #1
 8000128:	428b      	cmp	r3, r1
 800012a:	d374      	bcc.n	8000216 <__udivsi3+0xf2>
 800012c:	0903      	lsrs	r3, r0, #4
 800012e:	428b      	cmp	r3, r1
 8000130:	d35f      	bcc.n	80001f2 <__udivsi3+0xce>
 8000132:	0a03      	lsrs	r3, r0, #8
 8000134:	428b      	cmp	r3, r1
 8000136:	d344      	bcc.n	80001c2 <__udivsi3+0x9e>
 8000138:	0b03      	lsrs	r3, r0, #12
 800013a:	428b      	cmp	r3, r1
 800013c:	d328      	bcc.n	8000190 <__udivsi3+0x6c>
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d30d      	bcc.n	8000160 <__udivsi3+0x3c>
 8000144:	22ff      	movs	r2, #255	@ 0xff
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	ba12      	rev	r2, r2
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d302      	bcc.n	8000156 <__udivsi3+0x32>
 8000150:	1212      	asrs	r2, r2, #8
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	d065      	beq.n	8000222 <__udivsi3+0xfe>
 8000156:	0b03      	lsrs	r3, r0, #12
 8000158:	428b      	cmp	r3, r1
 800015a:	d319      	bcc.n	8000190 <__udivsi3+0x6c>
 800015c:	e000      	b.n	8000160 <__udivsi3+0x3c>
 800015e:	0a09      	lsrs	r1, r1, #8
 8000160:	0bc3      	lsrs	r3, r0, #15
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x46>
 8000166:	03cb      	lsls	r3, r1, #15
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b83      	lsrs	r3, r0, #14
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x52>
 8000172:	038b      	lsls	r3, r1, #14
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b43      	lsrs	r3, r0, #13
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x5e>
 800017e:	034b      	lsls	r3, r1, #13
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b03      	lsrs	r3, r0, #12
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x6a>
 800018a:	030b      	lsls	r3, r1, #12
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0ac3      	lsrs	r3, r0, #11
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x76>
 8000196:	02cb      	lsls	r3, r1, #11
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a83      	lsrs	r3, r0, #10
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x82>
 80001a2:	028b      	lsls	r3, r1, #10
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a43      	lsrs	r3, r0, #9
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x8e>
 80001ae:	024b      	lsls	r3, r1, #9
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a03      	lsrs	r3, r0, #8
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x9a>
 80001ba:	020b      	lsls	r3, r1, #8
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	d2cd      	bcs.n	800015e <__udivsi3+0x3a>
 80001c2:	09c3      	lsrs	r3, r0, #7
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xa8>
 80001c8:	01cb      	lsls	r3, r1, #7
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0983      	lsrs	r3, r0, #6
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xb4>
 80001d4:	018b      	lsls	r3, r1, #6
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0943      	lsrs	r3, r0, #5
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xc0>
 80001e0:	014b      	lsls	r3, r1, #5
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0903      	lsrs	r3, r0, #4
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xcc>
 80001ec:	010b      	lsls	r3, r1, #4
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	08c3      	lsrs	r3, r0, #3
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xd8>
 80001f8:	00cb      	lsls	r3, r1, #3
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0883      	lsrs	r3, r0, #2
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xe4>
 8000204:	008b      	lsls	r3, r1, #2
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0843      	lsrs	r3, r0, #1
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xf0>
 8000210:	004b      	lsls	r3, r1, #1
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	1a41      	subs	r1, r0, r1
 8000218:	d200      	bcs.n	800021c <__udivsi3+0xf8>
 800021a:	4601      	mov	r1, r0
 800021c:	4152      	adcs	r2, r2
 800021e:	4610      	mov	r0, r2
 8000220:	4770      	bx	lr
 8000222:	e7ff      	b.n	8000224 <__udivsi3+0x100>
 8000224:	b501      	push	{r0, lr}
 8000226:	2000      	movs	r0, #0
 8000228:	f000 f8f0 	bl	800040c <__aeabi_idiv0>
 800022c:	bd02      	pop	{r1, pc}
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_uidivmod>:
 8000230:	2900      	cmp	r1, #0
 8000232:	d0f7      	beq.n	8000224 <__udivsi3+0x100>
 8000234:	e776      	b.n	8000124 <__udivsi3>
 8000236:	4770      	bx	lr

08000238 <__divsi3>:
 8000238:	4603      	mov	r3, r0
 800023a:	430b      	orrs	r3, r1
 800023c:	d47f      	bmi.n	800033e <__divsi3+0x106>
 800023e:	2200      	movs	r2, #0
 8000240:	0843      	lsrs	r3, r0, #1
 8000242:	428b      	cmp	r3, r1
 8000244:	d374      	bcc.n	8000330 <__divsi3+0xf8>
 8000246:	0903      	lsrs	r3, r0, #4
 8000248:	428b      	cmp	r3, r1
 800024a:	d35f      	bcc.n	800030c <__divsi3+0xd4>
 800024c:	0a03      	lsrs	r3, r0, #8
 800024e:	428b      	cmp	r3, r1
 8000250:	d344      	bcc.n	80002dc <__divsi3+0xa4>
 8000252:	0b03      	lsrs	r3, r0, #12
 8000254:	428b      	cmp	r3, r1
 8000256:	d328      	bcc.n	80002aa <__divsi3+0x72>
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d30d      	bcc.n	800027a <__divsi3+0x42>
 800025e:	22ff      	movs	r2, #255	@ 0xff
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	ba12      	rev	r2, r2
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d302      	bcc.n	8000270 <__divsi3+0x38>
 800026a:	1212      	asrs	r2, r2, #8
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	d065      	beq.n	800033c <__divsi3+0x104>
 8000270:	0b03      	lsrs	r3, r0, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d319      	bcc.n	80002aa <__divsi3+0x72>
 8000276:	e000      	b.n	800027a <__divsi3+0x42>
 8000278:	0a09      	lsrs	r1, r1, #8
 800027a:	0bc3      	lsrs	r3, r0, #15
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x4c>
 8000280:	03cb      	lsls	r3, r1, #15
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b83      	lsrs	r3, r0, #14
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x58>
 800028c:	038b      	lsls	r3, r1, #14
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b43      	lsrs	r3, r0, #13
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x64>
 8000298:	034b      	lsls	r3, r1, #13
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b03      	lsrs	r3, r0, #12
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x70>
 80002a4:	030b      	lsls	r3, r1, #12
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0ac3      	lsrs	r3, r0, #11
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x7c>
 80002b0:	02cb      	lsls	r3, r1, #11
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a83      	lsrs	r3, r0, #10
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x88>
 80002bc:	028b      	lsls	r3, r1, #10
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a43      	lsrs	r3, r0, #9
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x94>
 80002c8:	024b      	lsls	r3, r1, #9
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a03      	lsrs	r3, r0, #8
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0xa0>
 80002d4:	020b      	lsls	r3, r1, #8
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	d2cd      	bcs.n	8000278 <__divsi3+0x40>
 80002dc:	09c3      	lsrs	r3, r0, #7
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xae>
 80002e2:	01cb      	lsls	r3, r1, #7
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0983      	lsrs	r3, r0, #6
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xba>
 80002ee:	018b      	lsls	r3, r1, #6
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0943      	lsrs	r3, r0, #5
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xc6>
 80002fa:	014b      	lsls	r3, r1, #5
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0903      	lsrs	r3, r0, #4
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xd2>
 8000306:	010b      	lsls	r3, r1, #4
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	08c3      	lsrs	r3, r0, #3
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xde>
 8000312:	00cb      	lsls	r3, r1, #3
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0883      	lsrs	r3, r0, #2
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xea>
 800031e:	008b      	lsls	r3, r1, #2
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0843      	lsrs	r3, r0, #1
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xf6>
 800032a:	004b      	lsls	r3, r1, #1
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	1a41      	subs	r1, r0, r1
 8000332:	d200      	bcs.n	8000336 <__divsi3+0xfe>
 8000334:	4601      	mov	r1, r0
 8000336:	4152      	adcs	r2, r2
 8000338:	4610      	mov	r0, r2
 800033a:	4770      	bx	lr
 800033c:	e05d      	b.n	80003fa <__divsi3+0x1c2>
 800033e:	0fca      	lsrs	r2, r1, #31
 8000340:	d000      	beq.n	8000344 <__divsi3+0x10c>
 8000342:	4249      	negs	r1, r1
 8000344:	1003      	asrs	r3, r0, #32
 8000346:	d300      	bcc.n	800034a <__divsi3+0x112>
 8000348:	4240      	negs	r0, r0
 800034a:	4053      	eors	r3, r2
 800034c:	2200      	movs	r2, #0
 800034e:	469c      	mov	ip, r3
 8000350:	0903      	lsrs	r3, r0, #4
 8000352:	428b      	cmp	r3, r1
 8000354:	d32d      	bcc.n	80003b2 <__divsi3+0x17a>
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d312      	bcc.n	8000382 <__divsi3+0x14a>
 800035c:	22fc      	movs	r2, #252	@ 0xfc
 800035e:	0189      	lsls	r1, r1, #6
 8000360:	ba12      	rev	r2, r2
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d30c      	bcc.n	8000382 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d308      	bcc.n	8000382 <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d304      	bcc.n	8000382 <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	d03a      	beq.n	80003f2 <__divsi3+0x1ba>
 800037c:	1192      	asrs	r2, r2, #6
 800037e:	e000      	b.n	8000382 <__divsi3+0x14a>
 8000380:	0989      	lsrs	r1, r1, #6
 8000382:	09c3      	lsrs	r3, r0, #7
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x154>
 8000388:	01cb      	lsls	r3, r1, #7
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0983      	lsrs	r3, r0, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x160>
 8000394:	018b      	lsls	r3, r1, #6
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0943      	lsrs	r3, r0, #5
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x16c>
 80003a0:	014b      	lsls	r3, r1, #5
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0903      	lsrs	r3, r0, #4
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x178>
 80003ac:	010b      	lsls	r3, r1, #4
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	08c3      	lsrs	r3, r0, #3
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x184>
 80003b8:	00cb      	lsls	r3, r1, #3
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0883      	lsrs	r3, r0, #2
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x190>
 80003c4:	008b      	lsls	r3, r1, #2
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	d2d9      	bcs.n	8000380 <__divsi3+0x148>
 80003cc:	0843      	lsrs	r3, r0, #1
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d301      	bcc.n	80003d6 <__divsi3+0x19e>
 80003d2:	004b      	lsls	r3, r1, #1
 80003d4:	1ac0      	subs	r0, r0, r3
 80003d6:	4152      	adcs	r2, r2
 80003d8:	1a41      	subs	r1, r0, r1
 80003da:	d200      	bcs.n	80003de <__divsi3+0x1a6>
 80003dc:	4601      	mov	r1, r0
 80003de:	4663      	mov	r3, ip
 80003e0:	4152      	adcs	r2, r2
 80003e2:	105b      	asrs	r3, r3, #1
 80003e4:	4610      	mov	r0, r2
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x1b4>
 80003e8:	4240      	negs	r0, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d500      	bpl.n	80003f0 <__divsi3+0x1b8>
 80003ee:	4249      	negs	r1, r1
 80003f0:	4770      	bx	lr
 80003f2:	4663      	mov	r3, ip
 80003f4:	105b      	asrs	r3, r3, #1
 80003f6:	d300      	bcc.n	80003fa <__divsi3+0x1c2>
 80003f8:	4240      	negs	r0, r0
 80003fa:	b501      	push	{r0, lr}
 80003fc:	2000      	movs	r0, #0
 80003fe:	f000 f805 	bl	800040c <__aeabi_idiv0>
 8000402:	bd02      	pop	{r1, pc}

08000404 <__aeabi_idivmod>:
 8000404:	2900      	cmp	r1, #0
 8000406:	d0f8      	beq.n	80003fa <__divsi3+0x1c2>
 8000408:	e716      	b.n	8000238 <__divsi3>
 800040a:	4770      	bx	lr

0800040c <__aeabi_idiv0>:
 800040c:	4770      	bx	lr
 800040e:	46c0      	nop			@ (mov r8, r8)

08000410 <dec2bcd>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Convert Decimal → BCD
uint8_t dec2bcd(uint8_t val) {
 8000410:	b590      	push	{r4, r7, lr}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	0002      	movs	r2, r0
 8000418:	1dfb      	adds	r3, r7, #7
 800041a:	701a      	strb	r2, [r3, #0]
    return ((val / 10) << 4) | (val % 10);
 800041c:	1dfb      	adds	r3, r7, #7
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	210a      	movs	r1, #10
 8000422:	0018      	movs	r0, r3
 8000424:	f7ff fe7e 	bl	8000124 <__udivsi3>
 8000428:	0003      	movs	r3, r0
 800042a:	b2db      	uxtb	r3, r3
 800042c:	011b      	lsls	r3, r3, #4
 800042e:	b25c      	sxtb	r4, r3
 8000430:	1dfb      	adds	r3, r7, #7
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	210a      	movs	r1, #10
 8000436:	0018      	movs	r0, r3
 8000438:	f7ff fefa 	bl	8000230 <__aeabi_uidivmod>
 800043c:	000b      	movs	r3, r1
 800043e:	b2db      	uxtb	r3, r3
 8000440:	b25b      	sxtb	r3, r3
 8000442:	4323      	orrs	r3, r4
 8000444:	b25b      	sxtb	r3, r3
 8000446:	b2db      	uxtb	r3, r3
}
 8000448:	0018      	movs	r0, r3
 800044a:	46bd      	mov	sp, r7
 800044c:	b003      	add	sp, #12
 800044e:	bd90      	pop	{r4, r7, pc}

08000450 <bcd2dec>:

// Convert BCD → Decimal
uint8_t bcd2dec(uint8_t val) {
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	0002      	movs	r2, r0
 8000458:	1dfb      	adds	r3, r7, #7
 800045a:	701a      	strb	r2, [r3, #0]
    return ((val >> 4) * 10) + (val & 0x0F);
 800045c:	1dfb      	adds	r3, r7, #7
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	091b      	lsrs	r3, r3, #4
 8000462:	b2db      	uxtb	r3, r3
 8000464:	1c1a      	adds	r2, r3, #0
 8000466:	0092      	lsls	r2, r2, #2
 8000468:	18d3      	adds	r3, r2, r3
 800046a:	18db      	adds	r3, r3, r3
 800046c:	b2da      	uxtb	r2, r3
 800046e:	1dfb      	adds	r3, r7, #7
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	210f      	movs	r1, #15
 8000474:	400b      	ands	r3, r1
 8000476:	b2db      	uxtb	r3, r3
 8000478:	18d3      	adds	r3, r2, r3
 800047a:	b2db      	uxtb	r3, r3
}
 800047c:	0018      	movs	r0, r3
 800047e:	46bd      	mov	sp, r7
 8000480:	b002      	add	sp, #8
 8000482:	bd80      	pop	{r7, pc}

08000484 <RTC_SetDateTime>:

void RTC_SetDateTime(uint16_t year, uint8_t month, uint8_t date,
                     uint8_t hour, uint8_t minute, uint8_t second)
{
 8000484:	b5b0      	push	{r4, r5, r7, lr}
 8000486:	b088      	sub	sp, #32
 8000488:	af04      	add	r7, sp, #16
 800048a:	0005      	movs	r5, r0
 800048c:	000c      	movs	r4, r1
 800048e:	0010      	movs	r0, r2
 8000490:	0019      	movs	r1, r3
 8000492:	1dbb      	adds	r3, r7, #6
 8000494:	1c2a      	adds	r2, r5, #0
 8000496:	801a      	strh	r2, [r3, #0]
 8000498:	1d7b      	adds	r3, r7, #5
 800049a:	1c22      	adds	r2, r4, #0
 800049c:	701a      	strb	r2, [r3, #0]
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	1c02      	adds	r2, r0, #0
 80004a2:	701a      	strb	r2, [r3, #0]
 80004a4:	1cfb      	adds	r3, r7, #3
 80004a6:	1c0a      	adds	r2, r1, #0
 80004a8:	701a      	strb	r2, [r3, #0]
    uint8_t set_time[7];

    set_time[0] = dec2bcd(second & 0x7F);   // 0x03 Seconds (bit7 = OS flag, must keep 0)
 80004aa:	2324      	movs	r3, #36	@ 0x24
 80004ac:	18fb      	adds	r3, r7, r3
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	227f      	movs	r2, #127	@ 0x7f
 80004b2:	4013      	ands	r3, r2
 80004b4:	b2db      	uxtb	r3, r3
 80004b6:	0018      	movs	r0, r3
 80004b8:	f7ff ffaa 	bl	8000410 <dec2bcd>
 80004bc:	0003      	movs	r3, r0
 80004be:	001a      	movs	r2, r3
 80004c0:	2408      	movs	r4, #8
 80004c2:	193b      	adds	r3, r7, r4
 80004c4:	701a      	strb	r2, [r3, #0]
    set_time[1] = dec2bcd(minute);          // 0x04 Minutes
 80004c6:	2320      	movs	r3, #32
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	0018      	movs	r0, r3
 80004ce:	f7ff ff9f 	bl	8000410 <dec2bcd>
 80004d2:	0003      	movs	r3, r0
 80004d4:	001a      	movs	r2, r3
 80004d6:	193b      	adds	r3, r7, r4
 80004d8:	705a      	strb	r2, [r3, #1]
    set_time[2] = dec2bcd(hour);            // 0x05 Hours
 80004da:	1cfb      	adds	r3, r7, #3
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	0018      	movs	r0, r3
 80004e0:	f7ff ff96 	bl	8000410 <dec2bcd>
 80004e4:	0003      	movs	r3, r0
 80004e6:	001a      	movs	r2, r3
 80004e8:	193b      	adds	r3, r7, r4
 80004ea:	709a      	strb	r2, [r3, #2]
    set_time[3] = dec2bcd(date);            // 0x06 Day
 80004ec:	1d3b      	adds	r3, r7, #4
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	0018      	movs	r0, r3
 80004f2:	f7ff ff8d 	bl	8000410 <dec2bcd>
 80004f6:	0003      	movs	r3, r0
 80004f8:	001a      	movs	r2, r3
 80004fa:	193b      	adds	r3, r7, r4
 80004fc:	70da      	strb	r2, [r3, #3]
    set_time[4] = dec2bcd(1);               // 0x07 Weekday (dummy or real)
 80004fe:	2001      	movs	r0, #1
 8000500:	f7ff ff86 	bl	8000410 <dec2bcd>
 8000504:	0003      	movs	r3, r0
 8000506:	001a      	movs	r2, r3
 8000508:	193b      	adds	r3, r7, r4
 800050a:	711a      	strb	r2, [r3, #4]
    set_time[5] = dec2bcd(month);           // 0x08 Month
 800050c:	1d7b      	adds	r3, r7, #5
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	0018      	movs	r0, r3
 8000512:	f7ff ff7d 	bl	8000410 <dec2bcd>
 8000516:	0003      	movs	r3, r0
 8000518:	001a      	movs	r2, r3
 800051a:	193b      	adds	r3, r7, r4
 800051c:	715a      	strb	r2, [r3, #5]
    set_time[6] = dec2bcd(year % 100);      // 0x09 Year (00–99)
 800051e:	1dbb      	adds	r3, r7, #6
 8000520:	881b      	ldrh	r3, [r3, #0]
 8000522:	2164      	movs	r1, #100	@ 0x64
 8000524:	0018      	movs	r0, r3
 8000526:	f7ff fe83 	bl	8000230 <__aeabi_uidivmod>
 800052a:	000b      	movs	r3, r1
 800052c:	b29b      	uxth	r3, r3
 800052e:	b2db      	uxtb	r3, r3
 8000530:	0018      	movs	r0, r3
 8000532:	f7ff ff6d 	bl	8000410 <dec2bcd>
 8000536:	0003      	movs	r3, r0
 8000538:	001a      	movs	r2, r3
 800053a:	193b      	adds	r3, r7, r4
 800053c:	719a      	strb	r2, [r3, #6]

    HAL_I2C_Mem_Write(&hi2c1, RTC_ADDR << 1, 0x03, 1, set_time, 7, HAL_MAX_DELAY);
 800053e:	4808      	ldr	r0, [pc, #32]	@ (8000560 <RTC_SetDateTime+0xdc>)
 8000540:	2301      	movs	r3, #1
 8000542:	425b      	negs	r3, r3
 8000544:	9302      	str	r3, [sp, #8]
 8000546:	2307      	movs	r3, #7
 8000548:	9301      	str	r3, [sp, #4]
 800054a:	193b      	adds	r3, r7, r4
 800054c:	9300      	str	r3, [sp, #0]
 800054e:	2301      	movs	r3, #1
 8000550:	2203      	movs	r2, #3
 8000552:	21d0      	movs	r1, #208	@ 0xd0
 8000554:	f001 f924 	bl	80017a0 <HAL_I2C_Mem_Write>
}
 8000558:	46c0      	nop			@ (mov r8, r8)
 800055a:	46bd      	mov	sp, r7
 800055c:	b004      	add	sp, #16
 800055e:	bdb0      	pop	{r4, r5, r7, pc}
 8000560:	2000009c 	.word	0x2000009c

08000564 <RTC_ReadDateTime>:


void RTC_ReadDateTime(void)
{
 8000564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000566:	b097      	sub	sp, #92	@ 0x5c
 8000568:	af04      	add	r7, sp, #16
    char uart_buf[50];
    int uart_buf_len;

    HAL_I2C_Mem_Read(&hi2c1, RTC_ADDR << 1, 0x03, 1, time_buffer, 7, HAL_MAX_DELAY);
 800056a:	484d      	ldr	r0, [pc, #308]	@ (80006a0 <RTC_ReadDateTime+0x13c>)
 800056c:	2301      	movs	r3, #1
 800056e:	425b      	negs	r3, r3
 8000570:	9302      	str	r3, [sp, #8]
 8000572:	2307      	movs	r3, #7
 8000574:	9301      	str	r3, [sp, #4]
 8000576:	4b4b      	ldr	r3, [pc, #300]	@ (80006a4 <RTC_ReadDateTime+0x140>)
 8000578:	9300      	str	r3, [sp, #0]
 800057a:	2301      	movs	r3, #1
 800057c:	2203      	movs	r2, #3
 800057e:	21d0      	movs	r1, #208	@ 0xd0
 8000580:	f001 fa3c 	bl	80019fc <HAL_I2C_Mem_Read>

    uint8_t second = bcd2dec(time_buffer[0] & 0x7F);  // mask OS bit
 8000584:	4b47      	ldr	r3, [pc, #284]	@ (80006a4 <RTC_ReadDateTime+0x140>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	227f      	movs	r2, #127	@ 0x7f
 800058a:	4013      	ands	r3, r2
 800058c:	b2db      	uxtb	r3, r3
 800058e:	2245      	movs	r2, #69	@ 0x45
 8000590:	18bc      	adds	r4, r7, r2
 8000592:	0018      	movs	r0, r3
 8000594:	f7ff ff5c 	bl	8000450 <bcd2dec>
 8000598:	0003      	movs	r3, r0
 800059a:	7023      	strb	r3, [r4, #0]
    uint8_t minute = bcd2dec(time_buffer[1]);
 800059c:	4b41      	ldr	r3, [pc, #260]	@ (80006a4 <RTC_ReadDateTime+0x140>)
 800059e:	785b      	ldrb	r3, [r3, #1]
 80005a0:	2244      	movs	r2, #68	@ 0x44
 80005a2:	18bc      	adds	r4, r7, r2
 80005a4:	0018      	movs	r0, r3
 80005a6:	f7ff ff53 	bl	8000450 <bcd2dec>
 80005aa:	0003      	movs	r3, r0
 80005ac:	7023      	strb	r3, [r4, #0]
    uint8_t hour   = bcd2dec(time_buffer[2] & 0x3F);
 80005ae:	4b3d      	ldr	r3, [pc, #244]	@ (80006a4 <RTC_ReadDateTime+0x140>)
 80005b0:	789b      	ldrb	r3, [r3, #2]
 80005b2:	223f      	movs	r2, #63	@ 0x3f
 80005b4:	4013      	ands	r3, r2
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	2243      	movs	r2, #67	@ 0x43
 80005ba:	18bc      	adds	r4, r7, r2
 80005bc:	0018      	movs	r0, r3
 80005be:	f7ff ff47 	bl	8000450 <bcd2dec>
 80005c2:	0003      	movs	r3, r0
 80005c4:	7023      	strb	r3, [r4, #0]
    uint8_t date   = bcd2dec(time_buffer[3]);
 80005c6:	4b37      	ldr	r3, [pc, #220]	@ (80006a4 <RTC_ReadDateTime+0x140>)
 80005c8:	78db      	ldrb	r3, [r3, #3]
 80005ca:	2242      	movs	r2, #66	@ 0x42
 80005cc:	18bc      	adds	r4, r7, r2
 80005ce:	0018      	movs	r0, r3
 80005d0:	f7ff ff3e 	bl	8000450 <bcd2dec>
 80005d4:	0003      	movs	r3, r0
 80005d6:	7023      	strb	r3, [r4, #0]
    uint8_t wday   = bcd2dec(time_buffer[4]);
 80005d8:	4b32      	ldr	r3, [pc, #200]	@ (80006a4 <RTC_ReadDateTime+0x140>)
 80005da:	791b      	ldrb	r3, [r3, #4]
 80005dc:	2241      	movs	r2, #65	@ 0x41
 80005de:	18bc      	adds	r4, r7, r2
 80005e0:	0018      	movs	r0, r3
 80005e2:	f7ff ff35 	bl	8000450 <bcd2dec>
 80005e6:	0003      	movs	r3, r0
 80005e8:	7023      	strb	r3, [r4, #0]
    uint8_t month  = bcd2dec(time_buffer[5] & 0x1F);
 80005ea:	4b2e      	ldr	r3, [pc, #184]	@ (80006a4 <RTC_ReadDateTime+0x140>)
 80005ec:	795b      	ldrb	r3, [r3, #5]
 80005ee:	221f      	movs	r2, #31
 80005f0:	4013      	ands	r3, r2
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	2240      	movs	r2, #64	@ 0x40
 80005f6:	18bc      	adds	r4, r7, r2
 80005f8:	0018      	movs	r0, r3
 80005fa:	f7ff ff29 	bl	8000450 <bcd2dec>
 80005fe:	0003      	movs	r3, r0
 8000600:	7023      	strb	r3, [r4, #0]
    uint8_t yr = bcd2dec(time_buffer[6]);
 8000602:	4b28      	ldr	r3, [pc, #160]	@ (80006a4 <RTC_ReadDateTime+0x140>)
 8000604:	799b      	ldrb	r3, [r3, #6]
 8000606:	253f      	movs	r5, #63	@ 0x3f
 8000608:	197c      	adds	r4, r7, r5
 800060a:	0018      	movs	r0, r3
 800060c:	f7ff ff20 	bl	8000450 <bcd2dec>
 8000610:	0003      	movs	r3, r0
 8000612:	7023      	strb	r3, [r4, #0]
    uint16_t year;

    // Decide century (simple rule: 70–99 → 1900s, else → 2000s)
    if (yr >= 70) {
 8000614:	197b      	adds	r3, r7, r5
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	2b45      	cmp	r3, #69	@ 0x45
 800061a:	d909      	bls.n	8000630 <RTC_ReadDateTime+0xcc>
        year = 1900 + yr;
 800061c:	197b      	adds	r3, r7, r5
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	b29a      	uxth	r2, r3
 8000622:	2346      	movs	r3, #70	@ 0x46
 8000624:	18fb      	adds	r3, r7, r3
 8000626:	4920      	ldr	r1, [pc, #128]	@ (80006a8 <RTC_ReadDateTime+0x144>)
 8000628:	468c      	mov	ip, r1
 800062a:	4462      	add	r2, ip
 800062c:	801a      	strh	r2, [r3, #0]
 800062e:	e00a      	b.n	8000646 <RTC_ReadDateTime+0xe2>
    } else {
        year = 2000 + yr;
 8000630:	233f      	movs	r3, #63	@ 0x3f
 8000632:	18fb      	adds	r3, r7, r3
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	b29a      	uxth	r2, r3
 8000638:	2346      	movs	r3, #70	@ 0x46
 800063a:	18fb      	adds	r3, r7, r3
 800063c:	21fa      	movs	r1, #250	@ 0xfa
 800063e:	00c9      	lsls	r1, r1, #3
 8000640:	468c      	mov	ip, r1
 8000642:	4462      	add	r2, ip
 8000644:	801a      	strh	r2, [r3, #0]
    }


		uart_buf_len = sprintf(uart_buf,
 8000646:	2342      	movs	r3, #66	@ 0x42
 8000648:	18fb      	adds	r3, r7, r3
 800064a:	781e      	ldrb	r6, [r3, #0]
 800064c:	2340      	movs	r3, #64	@ 0x40
 800064e:	18fb      	adds	r3, r7, r3
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	469c      	mov	ip, r3
 8000654:	2346      	movs	r3, #70	@ 0x46
 8000656:	18fb      	adds	r3, r7, r3
 8000658:	881b      	ldrh	r3, [r3, #0]
 800065a:	2243      	movs	r2, #67	@ 0x43
 800065c:	18ba      	adds	r2, r7, r2
 800065e:	7812      	ldrb	r2, [r2, #0]
 8000660:	2144      	movs	r1, #68	@ 0x44
 8000662:	1879      	adds	r1, r7, r1
 8000664:	7809      	ldrb	r1, [r1, #0]
 8000666:	2045      	movs	r0, #69	@ 0x45
 8000668:	1838      	adds	r0, r7, r0
 800066a:	7800      	ldrb	r0, [r0, #0]
 800066c:	4d0f      	ldr	r5, [pc, #60]	@ (80006ac <RTC_ReadDateTime+0x148>)
 800066e:	1d3c      	adds	r4, r7, #4
 8000670:	9003      	str	r0, [sp, #12]
 8000672:	9102      	str	r1, [sp, #8]
 8000674:	9201      	str	r2, [sp, #4]
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	4663      	mov	r3, ip
 800067a:	0032      	movs	r2, r6
 800067c:	0029      	movs	r1, r5
 800067e:	0020      	movs	r0, r4
 8000680:	f003 fe7c 	bl	800437c <siprintf>
 8000684:	0003      	movs	r3, r0
 8000686:	63bb      	str	r3, [r7, #56]	@ 0x38
							   "%02d:%02d:%04d %02d:%02d:%02d\r\n",
							   date, month, year, hour, minute, second);

    HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, HAL_MAX_DELAY);
 8000688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800068a:	b29a      	uxth	r2, r3
 800068c:	2301      	movs	r3, #1
 800068e:	425b      	negs	r3, r3
 8000690:	1d39      	adds	r1, r7, #4
 8000692:	4807      	ldr	r0, [pc, #28]	@ (80006b0 <RTC_ReadDateTime+0x14c>)
 8000694:	f002 fd0a 	bl	80030ac <HAL_UART_Transmit>
}
 8000698:	46c0      	nop			@ (mov r8, r8)
 800069a:	46bd      	mov	sp, r7
 800069c:	b013      	add	sp, #76	@ 0x4c
 800069e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006a0:	2000009c 	.word	0x2000009c
 80006a4:	20000094 	.word	0x20000094
 80006a8:	0000076c 	.word	0x0000076c
 80006ac:	08004ccc 	.word	0x08004ccc
 80006b0:	200000f0 	.word	0x200000f0

080006b4 <rtc_check_os_flag>:


uint8_t rtc_check_os_flag(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b088      	sub	sp, #32
 80006b8:	af04      	add	r7, sp, #16
    uint8_t sec;

    // Read Seconds register (0x03)
    if (HAL_I2C_Mem_Read(&hi2c1, RTC_ADDR << 1, 0x03, I2C_MEMADD_SIZE_8BIT,
 80006ba:	4823      	ldr	r0, [pc, #140]	@ (8000748 <rtc_check_os_flag+0x94>)
 80006bc:	2301      	movs	r3, #1
 80006be:	425b      	negs	r3, r3
 80006c0:	9302      	str	r3, [sp, #8]
 80006c2:	2301      	movs	r3, #1
 80006c4:	9301      	str	r3, [sp, #4]
 80006c6:	1cfb      	adds	r3, r7, #3
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	2301      	movs	r3, #1
 80006cc:	2203      	movs	r2, #3
 80006ce:	21d0      	movs	r1, #208	@ 0xd0
 80006d0:	f001 f994 	bl	80019fc <HAL_I2C_Mem_Read>
 80006d4:	1e03      	subs	r3, r0, #0
 80006d6:	d00f      	beq.n	80006f8 <rtc_check_os_flag+0x44>
                         &sec, 1, HAL_MAX_DELAY) != HAL_OK)
    {
        const char *msg = "I2C Read Error\r\n";
 80006d8:	4b1c      	ldr	r3, [pc, #112]	@ (800074c <rtc_check_os_flag+0x98>)
 80006da:	607b      	str	r3, [r7, #4]
        HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	0018      	movs	r0, r3
 80006e0:	f7ff fd0e 	bl	8000100 <strlen>
 80006e4:	0003      	movs	r3, r0
 80006e6:	b29a      	uxth	r2, r3
 80006e8:	2301      	movs	r3, #1
 80006ea:	425b      	negs	r3, r3
 80006ec:	6879      	ldr	r1, [r7, #4]
 80006ee:	4818      	ldr	r0, [pc, #96]	@ (8000750 <rtc_check_os_flag+0x9c>)
 80006f0:	f002 fcdc 	bl	80030ac <HAL_UART_Transmit>
        return 0xFF; // indicate comm error
 80006f4:	23ff      	movs	r3, #255	@ 0xff
 80006f6:	e023      	b.n	8000740 <rtc_check_os_flag+0x8c>
    }

    if (sec & 0x80) {
 80006f8:	1cfb      	adds	r3, r7, #3
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	b25b      	sxtb	r3, r3
 80006fe:	2b00      	cmp	r3, #0
 8000700:	da0f      	bge.n	8000722 <rtc_check_os_flag+0x6e>
        const char *msg = "Oscillator STOP detected (time invalid)\r\n";
 8000702:	4b14      	ldr	r3, [pc, #80]	@ (8000754 <rtc_check_os_flag+0xa0>)
 8000704:	60bb      	str	r3, [r7, #8]
        HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	0018      	movs	r0, r3
 800070a:	f7ff fcf9 	bl	8000100 <strlen>
 800070e:	0003      	movs	r3, r0
 8000710:	b29a      	uxth	r2, r3
 8000712:	2301      	movs	r3, #1
 8000714:	425b      	negs	r3, r3
 8000716:	68b9      	ldr	r1, [r7, #8]
 8000718:	480d      	ldr	r0, [pc, #52]	@ (8000750 <rtc_check_os_flag+0x9c>)
 800071a:	f002 fcc7 	bl	80030ac <HAL_UART_Transmit>
        return 1;  // OS flag set
 800071e:	2301      	movs	r3, #1
 8000720:	e00e      	b.n	8000740 <rtc_check_os_flag+0x8c>
    } else {
        const char *msg = "RTC running normally\r\n";
 8000722:	4b0d      	ldr	r3, [pc, #52]	@ (8000758 <rtc_check_os_flag+0xa4>)
 8000724:	60fb      	str	r3, [r7, #12]
        HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	0018      	movs	r0, r3
 800072a:	f7ff fce9 	bl	8000100 <strlen>
 800072e:	0003      	movs	r3, r0
 8000730:	b29a      	uxth	r2, r3
 8000732:	2301      	movs	r3, #1
 8000734:	425b      	negs	r3, r3
 8000736:	68f9      	ldr	r1, [r7, #12]
 8000738:	4805      	ldr	r0, [pc, #20]	@ (8000750 <rtc_check_os_flag+0x9c>)
 800073a:	f002 fcb7 	bl	80030ac <HAL_UART_Transmit>
        return 0;  // OS flag clear
 800073e:	2300      	movs	r3, #0
    }
}
 8000740:	0018      	movs	r0, r3
 8000742:	46bd      	mov	sp, r7
 8000744:	b004      	add	sp, #16
 8000746:	bd80      	pop	{r7, pc}
 8000748:	2000009c 	.word	0x2000009c
 800074c:	08004cec 	.word	0x08004cec
 8000750:	200000f0 	.word	0x200000f0
 8000754:	08004d00 	.word	0x08004d00
 8000758:	08004d2c 	.word	0x08004d2c

0800075c <i2c_read_u8>:
// --- I2C helpers ---
static HAL_StatusTypeDef i2c_write_u8(uint8_t reg, uint8_t val) {
    return HAL_I2C_Mem_Write(&hi2c1, RTC_ADDR << 1, reg, I2C_MEMADD_SIZE_8BIT, &val, 1, HAL_MAX_DELAY);
}
static HAL_StatusTypeDef i2c_read_u8(uint8_t reg, uint8_t *val) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b086      	sub	sp, #24
 8000760:	af04      	add	r7, sp, #16
 8000762:	0002      	movs	r2, r0
 8000764:	6039      	str	r1, [r7, #0]
 8000766:	1dfb      	adds	r3, r7, #7
 8000768:	701a      	strb	r2, [r3, #0]
    return HAL_I2C_Mem_Read(&hi2c1, RTC_ADDR << 1, reg, I2C_MEMADD_SIZE_8BIT, val, 1, HAL_MAX_DELAY);
 800076a:	1dfb      	adds	r3, r7, #7
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	b29a      	uxth	r2, r3
 8000770:	4808      	ldr	r0, [pc, #32]	@ (8000794 <i2c_read_u8+0x38>)
 8000772:	2301      	movs	r3, #1
 8000774:	425b      	negs	r3, r3
 8000776:	9302      	str	r3, [sp, #8]
 8000778:	2301      	movs	r3, #1
 800077a:	9301      	str	r3, [sp, #4]
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	9300      	str	r3, [sp, #0]
 8000780:	2301      	movs	r3, #1
 8000782:	21d0      	movs	r1, #208	@ 0xd0
 8000784:	f001 f93a 	bl	80019fc <HAL_I2C_Mem_Read>
 8000788:	0003      	movs	r3, r0
}
 800078a:	0018      	movs	r0, r3
 800078c:	46bd      	mov	sp, r7
 800078e:	b002      	add	sp, #8
 8000790:	bd80      	pop	{r7, pc}
 8000792:	46c0      	nop			@ (mov r8, r8)
 8000794:	2000009c 	.word	0x2000009c

08000798 <RTC_EnableBatterySwitchover>:

void RTC_EnableBatterySwitchover(void)
{
 8000798:	b590      	push	{r4, r7, lr}
 800079a:	b08f      	sub	sp, #60	@ 0x3c
 800079c:	af04      	add	r7, sp, #16
    uint8_t c3 = 0x20;  // PM=010, enable battery switch-over
 800079e:	2127      	movs	r1, #39	@ 0x27
 80007a0:	187b      	adds	r3, r7, r1
 80007a2:	2220      	movs	r2, #32
 80007a4:	701a      	strb	r2, [r3, #0]

    if (HAL_I2C_Mem_Write(&hi2c1, RTC_ADDR << 1,
 80007a6:	4821      	ldr	r0, [pc, #132]	@ (800082c <RTC_EnableBatterySwitchover+0x94>)
 80007a8:	2301      	movs	r3, #1
 80007aa:	425b      	negs	r3, r3
 80007ac:	9302      	str	r3, [sp, #8]
 80007ae:	2301      	movs	r3, #1
 80007b0:	9301      	str	r3, [sp, #4]
 80007b2:	187b      	adds	r3, r7, r1
 80007b4:	9300      	str	r3, [sp, #0]
 80007b6:	2301      	movs	r3, #1
 80007b8:	2202      	movs	r2, #2
 80007ba:	21d0      	movs	r1, #208	@ 0xd0
 80007bc:	f000 fff0 	bl	80017a0 <HAL_I2C_Mem_Write>
 80007c0:	1e03      	subs	r3, r0, #0
 80007c2:	d00d      	beq.n	80007e0 <RTC_EnableBatterySwitchover+0x48>
                          0x02, I2C_MEMADD_SIZE_8BIT,
                          &c3, 1, HAL_MAX_DELAY) != HAL_OK) {

        char buf[32];
        sprintf(buf, "Write to C3 failed!\r\n");
 80007c4:	4a1a      	ldr	r2, [pc, #104]	@ (8000830 <RTC_EnableBatterySwitchover+0x98>)
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	0011      	movs	r1, r2
 80007ca:	0018      	movs	r0, r3
 80007cc:	f003 fdd6 	bl	800437c <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)buf, sizeof(buf), HAL_MAX_DELAY);
 80007d0:	2301      	movs	r3, #1
 80007d2:	425b      	negs	r3, r3
 80007d4:	1d39      	adds	r1, r7, #4
 80007d6:	4817      	ldr	r0, [pc, #92]	@ (8000834 <RTC_EnableBatterySwitchover+0x9c>)
 80007d8:	2220      	movs	r2, #32
 80007da:	f002 fc67 	bl	80030ac <HAL_UART_Transmit>
 80007de:	e021      	b.n	8000824 <RTC_EnableBatterySwitchover+0x8c>
        return;
    }

    HAL_Delay(10);
 80007e0:	200a      	movs	r0, #10
 80007e2:	f000 fbe7 	bl	8000fb4 <HAL_Delay>

    // Read back
    if (HAL_I2C_Mem_Read(&hi2c1, RTC_ADDR << 1,
 80007e6:	4811      	ldr	r0, [pc, #68]	@ (800082c <RTC_EnableBatterySwitchover+0x94>)
 80007e8:	2301      	movs	r3, #1
 80007ea:	425b      	negs	r3, r3
 80007ec:	9302      	str	r3, [sp, #8]
 80007ee:	2301      	movs	r3, #1
 80007f0:	9301      	str	r3, [sp, #4]
 80007f2:	2427      	movs	r4, #39	@ 0x27
 80007f4:	193b      	adds	r3, r7, r4
 80007f6:	9300      	str	r3, [sp, #0]
 80007f8:	2301      	movs	r3, #1
 80007fa:	2202      	movs	r2, #2
 80007fc:	21d0      	movs	r1, #208	@ 0xd0
 80007fe:	f001 f8fd 	bl	80019fc <HAL_I2C_Mem_Read>
 8000802:	1e03      	subs	r3, r0, #0
 8000804:	d10e      	bne.n	8000824 <RTC_EnableBatterySwitchover+0x8c>
                         0x02, I2C_MEMADD_SIZE_8BIT,
                         &c3, 1, HAL_MAX_DELAY) == HAL_OK) {
        char buf[32];
        sprintf(buf, "After write C3=0x%02X\r\n", c3);
 8000806:	193b      	adds	r3, r7, r4
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	001a      	movs	r2, r3
 800080c:	490a      	ldr	r1, [pc, #40]	@ (8000838 <RTC_EnableBatterySwitchover+0xa0>)
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	0018      	movs	r0, r3
 8000812:	f003 fdb3 	bl	800437c <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)buf, sizeof(buf), HAL_MAX_DELAY);
 8000816:	2301      	movs	r3, #1
 8000818:	425b      	negs	r3, r3
 800081a:	1d39      	adds	r1, r7, #4
 800081c:	4805      	ldr	r0, [pc, #20]	@ (8000834 <RTC_EnableBatterySwitchover+0x9c>)
 800081e:	2220      	movs	r2, #32
 8000820:	f002 fc44 	bl	80030ac <HAL_UART_Transmit>
    }
}
 8000824:	46bd      	mov	sp, r7
 8000826:	b00b      	add	sp, #44	@ 0x2c
 8000828:	bd90      	pop	{r4, r7, pc}
 800082a:	46c0      	nop			@ (mov r8, r8)
 800082c:	2000009c 	.word	0x2000009c
 8000830:	08004d44 	.word	0x08004d44
 8000834:	200000f0 	.word	0x200000f0
 8000838:	08004d5c 	.word	0x08004d5c

0800083c <RTC_DumpDebug>:



// Dump key regs to UART: Seconds(0x03), Control1(0x00), Control2(0x01), Control3(0x02)
void RTC_DumpDebug(void)
{
 800083c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800083e:	b09f      	sub	sp, #124	@ 0x7c
 8000840:	af04      	add	r7, sp, #16
    char buf[96];
    uint8_t r0=0,r1=0,r2=0,sec=0;
 8000842:	1cfb      	adds	r3, r7, #3
 8000844:	2200      	movs	r2, #0
 8000846:	701a      	strb	r2, [r3, #0]
 8000848:	1cbb      	adds	r3, r7, #2
 800084a:	2200      	movs	r2, #0
 800084c:	701a      	strb	r2, [r3, #0]
 800084e:	1c7b      	adds	r3, r7, #1
 8000850:	2200      	movs	r2, #0
 8000852:	701a      	strb	r2, [r3, #0]
 8000854:	003b      	movs	r3, r7
 8000856:	2200      	movs	r2, #0
 8000858:	701a      	strb	r2, [r3, #0]
    i2c_read_u8(0x00, &r0);
 800085a:	1cfb      	adds	r3, r7, #3
 800085c:	0019      	movs	r1, r3
 800085e:	2000      	movs	r0, #0
 8000860:	f7ff ff7c 	bl	800075c <i2c_read_u8>
    i2c_read_u8(0x01, &r1);
 8000864:	1cbb      	adds	r3, r7, #2
 8000866:	0019      	movs	r1, r3
 8000868:	2001      	movs	r0, #1
 800086a:	f7ff ff77 	bl	800075c <i2c_read_u8>
    i2c_read_u8(0x02, &r2);
 800086e:	1c7b      	adds	r3, r7, #1
 8000870:	0019      	movs	r1, r3
 8000872:	2002      	movs	r0, #2
 8000874:	f7ff ff72 	bl	800075c <i2c_read_u8>
    i2c_read_u8(0x03, &sec);
 8000878:	003b      	movs	r3, r7
 800087a:	0019      	movs	r1, r3
 800087c:	2003      	movs	r0, #3
 800087e:	f7ff ff6d 	bl	800075c <i2c_read_u8>

    int n = snprintf(buf, sizeof(buf),
 8000882:	1cfb      	adds	r3, r7, #3
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	001e      	movs	r6, r3
 8000888:	1cbb      	adds	r3, r7, #2
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	0019      	movs	r1, r3
 800088e:	1c7b      	adds	r3, r7, #1
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	001c      	movs	r4, r3
 8000894:	003b      	movs	r3, r7
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	001d      	movs	r5, r3
        "DBG C1=0x%02X C2=0x%02X C3=0x%02X SEC=0x%02X (OS=%d)\r\n",
        r0, r1, r2, sec, (sec & 0x80) ? 1 : 0);
 800089a:	003b      	movs	r3, r7
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	b25b      	sxtb	r3, r3
 80008a0:	11db      	asrs	r3, r3, #7
 80008a2:	b25b      	sxtb	r3, r3
 80008a4:	001a      	movs	r2, r3
    int n = snprintf(buf, sizeof(buf),
 80008a6:	2301      	movs	r3, #1
 80008a8:	4013      	ands	r3, r2
 80008aa:	4a0c      	ldr	r2, [pc, #48]	@ (80008dc <RTC_DumpDebug+0xa0>)
 80008ac:	1d38      	adds	r0, r7, #4
 80008ae:	9303      	str	r3, [sp, #12]
 80008b0:	9502      	str	r5, [sp, #8]
 80008b2:	9401      	str	r4, [sp, #4]
 80008b4:	9100      	str	r1, [sp, #0]
 80008b6:	0033      	movs	r3, r6
 80008b8:	2160      	movs	r1, #96	@ 0x60
 80008ba:	f003 fd2b 	bl	8004314 <sniprintf>
 80008be:	0003      	movs	r3, r0
 80008c0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_UART_Transmit(&huart2, (uint8_t*)buf, n, HAL_MAX_DELAY);
 80008c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80008c4:	b29a      	uxth	r2, r3
 80008c6:	2301      	movs	r3, #1
 80008c8:	425b      	negs	r3, r3
 80008ca:	1d39      	adds	r1, r7, #4
 80008cc:	4804      	ldr	r0, [pc, #16]	@ (80008e0 <RTC_DumpDebug+0xa4>)
 80008ce:	f002 fbed 	bl	80030ac <HAL_UART_Transmit>
}
 80008d2:	46c0      	nop			@ (mov r8, r8)
 80008d4:	46bd      	mov	sp, r7
 80008d6:	b01b      	add	sp, #108	@ 0x6c
 80008d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008da:	46c0      	nop			@ (mov r8, r8)
 80008dc:	08004d74 	.word	0x08004d74
 80008e0:	200000f0 	.word	0x200000f0

080008e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ea:	f000 fadd 	bl	8000ea8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ee:	f000 f841 	bl	8000974 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f2:	f000 f915 	bl	8000b20 <MX_GPIO_Init>
  MX_I2C1_Init();
 80008f6:	f000 f885 	bl	8000a04 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80008fa:	f000 f8c3 	bl	8000a84 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Transmit(&huart2, tx_buff, sizeof(tx_buff), 10);
 80008fe:	4918      	ldr	r1, [pc, #96]	@ (8000960 <main+0x7c>)
 8000900:	4818      	ldr	r0, [pc, #96]	@ (8000964 <main+0x80>)
 8000902:	230a      	movs	r3, #10
 8000904:	221b      	movs	r2, #27
 8000906:	f002 fbd1 	bl	80030ac <HAL_UART_Transmit>
  RTC_EnableBatterySwitchover();
 800090a:	f7ff ff45 	bl	8000798 <RTC_EnableBatterySwitchover>
  RTC_DumpDebug();
 800090e:	f7ff ff95 	bl	800083c <RTC_DumpDebug>
  if (rtc_check_os_flag()) {
 8000912:	f7ff fecf 	bl	80006b4 <rtc_check_os_flag>
 8000916:	1e03      	subs	r3, r0, #0
 8000918:	d011      	beq.n	800093e <main+0x5a>
      HAL_UART_Transmit(&huart2, (uint8_t *)"RTC lost power, setting default\r\n", 32, HAL_MAX_DELAY);
 800091a:	2301      	movs	r3, #1
 800091c:	425b      	negs	r3, r3
 800091e:	4912      	ldr	r1, [pc, #72]	@ (8000968 <main+0x84>)
 8000920:	4810      	ldr	r0, [pc, #64]	@ (8000964 <main+0x80>)
 8000922:	2220      	movs	r2, #32
 8000924:	f002 fbc2 	bl	80030ac <HAL_UART_Transmit>
      RTC_SetDateTime(1999, 1, 1, 12, 0, 0);  // initialize once
 8000928:	4810      	ldr	r0, [pc, #64]	@ (800096c <main+0x88>)
 800092a:	2300      	movs	r3, #0
 800092c:	9301      	str	r3, [sp, #4]
 800092e:	2300      	movs	r3, #0
 8000930:	9300      	str	r3, [sp, #0]
 8000932:	230c      	movs	r3, #12
 8000934:	2201      	movs	r2, #1
 8000936:	2101      	movs	r1, #1
 8000938:	f7ff fda4 	bl	8000484 <RTC_SetDateTime>
 800093c:	e006      	b.n	800094c <main+0x68>
  } else {
      HAL_UART_Transmit(&huart2, (uint8_t *)"RTC running, keeping time\r\n", 28, HAL_MAX_DELAY);
 800093e:	2301      	movs	r3, #1
 8000940:	425b      	negs	r3, r3
 8000942:	490b      	ldr	r1, [pc, #44]	@ (8000970 <main+0x8c>)
 8000944:	4807      	ldr	r0, [pc, #28]	@ (8000964 <main+0x80>)
 8000946:	221c      	movs	r2, #28
 8000948:	f002 fbb0 	bl	80030ac <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 RTC_ReadDateTime();
 800094c:	f7ff fe0a 	bl	8000564 <RTC_ReadDateTime>

	 HAL_Delay(1000);
 8000950:	23fa      	movs	r3, #250	@ 0xfa
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	0018      	movs	r0, r3
 8000956:	f000 fb2d 	bl	8000fb4 <HAL_Delay>
	 RTC_ReadDateTime();
 800095a:	46c0      	nop			@ (mov r8, r8)
 800095c:	e7f6      	b.n	800094c <main+0x68>
 800095e:	46c0      	nop			@ (mov r8, r8)
 8000960:	20000000 	.word	0x20000000
 8000964:	200000f0 	.word	0x200000f0
 8000968:	08004dac 	.word	0x08004dac
 800096c:	000007cf 	.word	0x000007cf
 8000970:	08004dd0 	.word	0x08004dd0

08000974 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000974:	b590      	push	{r4, r7, lr}
 8000976:	b093      	sub	sp, #76	@ 0x4c
 8000978:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097a:	2414      	movs	r4, #20
 800097c:	193b      	adds	r3, r7, r4
 800097e:	0018      	movs	r0, r3
 8000980:	2334      	movs	r3, #52	@ 0x34
 8000982:	001a      	movs	r2, r3
 8000984:	2100      	movs	r1, #0
 8000986:	f003 fd19 	bl	80043bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	0018      	movs	r0, r3
 800098e:	2310      	movs	r3, #16
 8000990:	001a      	movs	r2, r3
 8000992:	2100      	movs	r1, #0
 8000994:	f003 fd12 	bl	80043bc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000998:	2380      	movs	r3, #128	@ 0x80
 800099a:	009b      	lsls	r3, r3, #2
 800099c:	0018      	movs	r0, r3
 800099e:	f001 fcf5 	bl	800238c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009a2:	193b      	adds	r3, r7, r4
 80009a4:	2202      	movs	r2, #2
 80009a6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009a8:	193b      	adds	r3, r7, r4
 80009aa:	2280      	movs	r2, #128	@ 0x80
 80009ac:	0052      	lsls	r2, r2, #1
 80009ae:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80009b0:	193b      	adds	r3, r7, r4
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009b6:	193b      	adds	r3, r7, r4
 80009b8:	2240      	movs	r2, #64	@ 0x40
 80009ba:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009bc:	193b      	adds	r3, r7, r4
 80009be:	2200      	movs	r2, #0
 80009c0:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c2:	193b      	adds	r3, r7, r4
 80009c4:	0018      	movs	r0, r3
 80009c6:	f001 fd2d 	bl	8002424 <HAL_RCC_OscConfig>
 80009ca:	1e03      	subs	r3, r0, #0
 80009cc:	d001      	beq.n	80009d2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80009ce:	f000 f8eb 	bl	8000ba8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	2207      	movs	r2, #7
 80009d6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	2200      	movs	r2, #0
 80009dc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009e4:	1d3b      	adds	r3, r7, #4
 80009e6:	2200      	movs	r2, #0
 80009e8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	2100      	movs	r1, #0
 80009ee:	0018      	movs	r0, r3
 80009f0:	f002 f828 	bl	8002a44 <HAL_RCC_ClockConfig>
 80009f4:	1e03      	subs	r3, r0, #0
 80009f6:	d001      	beq.n	80009fc <SystemClock_Config+0x88>
  {
    Error_Handler();
 80009f8:	f000 f8d6 	bl	8000ba8 <Error_Handler>
  }
}
 80009fc:	46c0      	nop			@ (mov r8, r8)
 80009fe:	46bd      	mov	sp, r7
 8000a00:	b013      	add	sp, #76	@ 0x4c
 8000a02:	bd90      	pop	{r4, r7, pc}

08000a04 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a08:	4b1b      	ldr	r3, [pc, #108]	@ (8000a78 <MX_I2C1_Init+0x74>)
 8000a0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000a7c <MX_I2C1_Init+0x78>)
 8000a0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8000a0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000a78 <MX_I2C1_Init+0x74>)
 8000a10:	4a1b      	ldr	r2, [pc, #108]	@ (8000a80 <MX_I2C1_Init+0x7c>)
 8000a12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a14:	4b18      	ldr	r3, [pc, #96]	@ (8000a78 <MX_I2C1_Init+0x74>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a1a:	4b17      	ldr	r3, [pc, #92]	@ (8000a78 <MX_I2C1_Init+0x74>)
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a20:	4b15      	ldr	r3, [pc, #84]	@ (8000a78 <MX_I2C1_Init+0x74>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a26:	4b14      	ldr	r3, [pc, #80]	@ (8000a78 <MX_I2C1_Init+0x74>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a2c:	4b12      	ldr	r3, [pc, #72]	@ (8000a78 <MX_I2C1_Init+0x74>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a32:	4b11      	ldr	r3, [pc, #68]	@ (8000a78 <MX_I2C1_Init+0x74>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a38:	4b0f      	ldr	r3, [pc, #60]	@ (8000a78 <MX_I2C1_Init+0x74>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a78 <MX_I2C1_Init+0x74>)
 8000a40:	0018      	movs	r0, r3
 8000a42:	f000 fe07 	bl	8001654 <HAL_I2C_Init>
 8000a46:	1e03      	subs	r3, r0, #0
 8000a48:	d001      	beq.n	8000a4e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a4a:	f000 f8ad 	bl	8000ba8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a78 <MX_I2C1_Init+0x74>)
 8000a50:	2100      	movs	r1, #0
 8000a52:	0018      	movs	r0, r3
 8000a54:	f001 fc02 	bl	800225c <HAL_I2CEx_ConfigAnalogFilter>
 8000a58:	1e03      	subs	r3, r0, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a5c:	f000 f8a4 	bl	8000ba8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a60:	4b05      	ldr	r3, [pc, #20]	@ (8000a78 <MX_I2C1_Init+0x74>)
 8000a62:	2100      	movs	r1, #0
 8000a64:	0018      	movs	r0, r3
 8000a66:	f001 fc45 	bl	80022f4 <HAL_I2CEx_ConfigDigitalFilter>
 8000a6a:	1e03      	subs	r3, r0, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a6e:	f000 f89b 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a72:	46c0      	nop			@ (mov r8, r8)
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	2000009c 	.word	0x2000009c
 8000a7c:	40005400 	.word	0x40005400
 8000a80:	00503d58 	.word	0x00503d58

08000a84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a88:	4b23      	ldr	r3, [pc, #140]	@ (8000b18 <MX_USART2_UART_Init+0x94>)
 8000a8a:	4a24      	ldr	r2, [pc, #144]	@ (8000b1c <MX_USART2_UART_Init+0x98>)
 8000a8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a8e:	4b22      	ldr	r3, [pc, #136]	@ (8000b18 <MX_USART2_UART_Init+0x94>)
 8000a90:	22e1      	movs	r2, #225	@ 0xe1
 8000a92:	0252      	lsls	r2, r2, #9
 8000a94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a96:	4b20      	ldr	r3, [pc, #128]	@ (8000b18 <MX_USART2_UART_Init+0x94>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a9c:	4b1e      	ldr	r3, [pc, #120]	@ (8000b18 <MX_USART2_UART_Init+0x94>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aa2:	4b1d      	ldr	r3, [pc, #116]	@ (8000b18 <MX_USART2_UART_Init+0x94>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b18 <MX_USART2_UART_Init+0x94>)
 8000aaa:	220c      	movs	r2, #12
 8000aac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aae:	4b1a      	ldr	r3, [pc, #104]	@ (8000b18 <MX_USART2_UART_Init+0x94>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab4:	4b18      	ldr	r3, [pc, #96]	@ (8000b18 <MX_USART2_UART_Init+0x94>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aba:	4b17      	ldr	r3, [pc, #92]	@ (8000b18 <MX_USART2_UART_Init+0x94>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ac0:	4b15      	ldr	r3, [pc, #84]	@ (8000b18 <MX_USART2_UART_Init+0x94>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ac6:	4b14      	ldr	r3, [pc, #80]	@ (8000b18 <MX_USART2_UART_Init+0x94>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000acc:	4b12      	ldr	r3, [pc, #72]	@ (8000b18 <MX_USART2_UART_Init+0x94>)
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f002 fa96 	bl	8003000 <HAL_UART_Init>
 8000ad4:	1e03      	subs	r3, r0, #0
 8000ad6:	d001      	beq.n	8000adc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000ad8:	f000 f866 	bl	8000ba8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000adc:	4b0e      	ldr	r3, [pc, #56]	@ (8000b18 <MX_USART2_UART_Init+0x94>)
 8000ade:	2100      	movs	r1, #0
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f003 fb37 	bl	8004154 <HAL_UARTEx_SetTxFifoThreshold>
 8000ae6:	1e03      	subs	r3, r0, #0
 8000ae8:	d001      	beq.n	8000aee <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000aea:	f000 f85d 	bl	8000ba8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aee:	4b0a      	ldr	r3, [pc, #40]	@ (8000b18 <MX_USART2_UART_Init+0x94>)
 8000af0:	2100      	movs	r1, #0
 8000af2:	0018      	movs	r0, r3
 8000af4:	f003 fb6e 	bl	80041d4 <HAL_UARTEx_SetRxFifoThreshold>
 8000af8:	1e03      	subs	r3, r0, #0
 8000afa:	d001      	beq.n	8000b00 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000afc:	f000 f854 	bl	8000ba8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b00:	4b05      	ldr	r3, [pc, #20]	@ (8000b18 <MX_USART2_UART_Init+0x94>)
 8000b02:	0018      	movs	r0, r3
 8000b04:	f003 faec 	bl	80040e0 <HAL_UARTEx_DisableFifoMode>
 8000b08:	1e03      	subs	r3, r0, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000b0c:	f000 f84c 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b10:	46c0      	nop			@ (mov r8, r8)
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	46c0      	nop			@ (mov r8, r8)
 8000b18:	200000f0 	.word	0x200000f0
 8000b1c:	40004400 	.word	0x40004400

08000b20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b20:	b590      	push	{r4, r7, lr}
 8000b22:	b089      	sub	sp, #36	@ 0x24
 8000b24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b26:	240c      	movs	r4, #12
 8000b28:	193b      	adds	r3, r7, r4
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	2314      	movs	r3, #20
 8000b2e:	001a      	movs	r2, r3
 8000b30:	2100      	movs	r1, #0
 8000b32:	f003 fc43 	bl	80043bc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba4 <MX_GPIO_Init+0x84>)
 8000b38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba4 <MX_GPIO_Init+0x84>)
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	430a      	orrs	r2, r1
 8000b40:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b42:	4b18      	ldr	r3, [pc, #96]	@ (8000ba4 <MX_GPIO_Init+0x84>)
 8000b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b46:	2201      	movs	r2, #1
 8000b48:	4013      	ands	r3, r2
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4e:	4b15      	ldr	r3, [pc, #84]	@ (8000ba4 <MX_GPIO_Init+0x84>)
 8000b50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b52:	4b14      	ldr	r3, [pc, #80]	@ (8000ba4 <MX_GPIO_Init+0x84>)
 8000b54:	2102      	movs	r1, #2
 8000b56:	430a      	orrs	r2, r1
 8000b58:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b5a:	4b12      	ldr	r3, [pc, #72]	@ (8000ba4 <MX_GPIO_Init+0x84>)
 8000b5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b5e:	2202      	movs	r2, #2
 8000b60:	4013      	ands	r3, r2
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b66:	23a0      	movs	r3, #160	@ 0xa0
 8000b68:	05db      	lsls	r3, r3, #23
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2120      	movs	r1, #32
 8000b6e:	0018      	movs	r0, r3
 8000b70:	f000 fd52 	bl	8001618 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b74:	0021      	movs	r1, r4
 8000b76:	187b      	adds	r3, r7, r1
 8000b78:	2220      	movs	r2, #32
 8000b7a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7c:	187b      	adds	r3, r7, r1
 8000b7e:	2201      	movs	r2, #1
 8000b80:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	187b      	adds	r3, r7, r1
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	187b      	adds	r3, r7, r1
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8e:	187a      	adds	r2, r7, r1
 8000b90:	23a0      	movs	r3, #160	@ 0xa0
 8000b92:	05db      	lsls	r3, r3, #23
 8000b94:	0011      	movs	r1, r2
 8000b96:	0018      	movs	r0, r3
 8000b98:	f000 fbda 	bl	8001350 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b9c:	46c0      	nop			@ (mov r8, r8)
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	b009      	add	sp, #36	@ 0x24
 8000ba2:	bd90      	pop	{r4, r7, pc}
 8000ba4:	40021000 	.word	0x40021000

08000ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bac:	b672      	cpsid	i
}
 8000bae:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb0:	46c0      	nop			@ (mov r8, r8)
 8000bb2:	e7fd      	b.n	8000bb0 <Error_Handler+0x8>

08000bb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bba:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf8 <HAL_MspInit+0x44>)
 8000bbc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf8 <HAL_MspInit+0x44>)
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	641a      	str	r2, [r3, #64]	@ 0x40
 8000bc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf8 <HAL_MspInit+0x44>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bca:	2201      	movs	r2, #1
 8000bcc:	4013      	ands	r3, r2
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd2:	4b09      	ldr	r3, [pc, #36]	@ (8000bf8 <HAL_MspInit+0x44>)
 8000bd4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000bd6:	4b08      	ldr	r3, [pc, #32]	@ (8000bf8 <HAL_MspInit+0x44>)
 8000bd8:	2180      	movs	r1, #128	@ 0x80
 8000bda:	0549      	lsls	r1, r1, #21
 8000bdc:	430a      	orrs	r2, r1
 8000bde:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000be0:	4b05      	ldr	r3, [pc, #20]	@ (8000bf8 <HAL_MspInit+0x44>)
 8000be2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000be4:	2380      	movs	r3, #128	@ 0x80
 8000be6:	055b      	lsls	r3, r3, #21
 8000be8:	4013      	ands	r3, r2
 8000bea:	603b      	str	r3, [r7, #0]
 8000bec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bee:	46c0      	nop			@ (mov r8, r8)
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	b002      	add	sp, #8
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	46c0      	nop			@ (mov r8, r8)
 8000bf8:	40021000 	.word	0x40021000

08000bfc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bfc:	b590      	push	{r4, r7, lr}
 8000bfe:	b091      	sub	sp, #68	@ 0x44
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	232c      	movs	r3, #44	@ 0x2c
 8000c06:	18fb      	adds	r3, r7, r3
 8000c08:	0018      	movs	r0, r3
 8000c0a:	2314      	movs	r3, #20
 8000c0c:	001a      	movs	r2, r3
 8000c0e:	2100      	movs	r1, #0
 8000c10:	f003 fbd4 	bl	80043bc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c14:	2410      	movs	r4, #16
 8000c16:	193b      	adds	r3, r7, r4
 8000c18:	0018      	movs	r0, r3
 8000c1a:	231c      	movs	r3, #28
 8000c1c:	001a      	movs	r2, r3
 8000c1e:	2100      	movs	r1, #0
 8000c20:	f003 fbcc 	bl	80043bc <memset>
  if(hi2c->Instance==I2C1)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a22      	ldr	r2, [pc, #136]	@ (8000cb4 <HAL_I2C_MspInit+0xb8>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d13e      	bne.n	8000cac <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c2e:	193b      	adds	r3, r7, r4
 8000c30:	2220      	movs	r2, #32
 8000c32:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c34:	193b      	adds	r3, r7, r4
 8000c36:	2200      	movs	r2, #0
 8000c38:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c3a:	193b      	adds	r3, r7, r4
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f002 f8ab 	bl	8002d98 <HAL_RCCEx_PeriphCLKConfig>
 8000c42:	1e03      	subs	r3, r0, #0
 8000c44:	d001      	beq.n	8000c4a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000c46:	f7ff ffaf 	bl	8000ba8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4a:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb8 <HAL_I2C_MspInit+0xbc>)
 8000c4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb8 <HAL_I2C_MspInit+0xbc>)
 8000c50:	2102      	movs	r1, #2
 8000c52:	430a      	orrs	r2, r1
 8000c54:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c56:	4b18      	ldr	r3, [pc, #96]	@ (8000cb8 <HAL_I2C_MspInit+0xbc>)
 8000c58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c5a:	2202      	movs	r2, #2
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c62:	212c      	movs	r1, #44	@ 0x2c
 8000c64:	187b      	adds	r3, r7, r1
 8000c66:	22c0      	movs	r2, #192	@ 0xc0
 8000c68:	0092      	lsls	r2, r2, #2
 8000c6a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c6c:	187b      	adds	r3, r7, r1
 8000c6e:	2212      	movs	r2, #18
 8000c70:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	187b      	adds	r3, r7, r1
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c78:	187b      	adds	r3, r7, r1
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000c7e:	187b      	adds	r3, r7, r1
 8000c80:	2206      	movs	r2, #6
 8000c82:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c84:	187b      	adds	r3, r7, r1
 8000c86:	4a0d      	ldr	r2, [pc, #52]	@ (8000cbc <HAL_I2C_MspInit+0xc0>)
 8000c88:	0019      	movs	r1, r3
 8000c8a:	0010      	movs	r0, r2
 8000c8c:	f000 fb60 	bl	8001350 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c90:	4b09      	ldr	r3, [pc, #36]	@ (8000cb8 <HAL_I2C_MspInit+0xbc>)
 8000c92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c94:	4b08      	ldr	r3, [pc, #32]	@ (8000cb8 <HAL_I2C_MspInit+0xbc>)
 8000c96:	2180      	movs	r1, #128	@ 0x80
 8000c98:	0389      	lsls	r1, r1, #14
 8000c9a:	430a      	orrs	r2, r1
 8000c9c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000c9e:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <HAL_I2C_MspInit+0xbc>)
 8000ca0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ca2:	2380      	movs	r3, #128	@ 0x80
 8000ca4:	039b      	lsls	r3, r3, #14
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000cac:	46c0      	nop			@ (mov r8, r8)
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	b011      	add	sp, #68	@ 0x44
 8000cb2:	bd90      	pop	{r4, r7, pc}
 8000cb4:	40005400 	.word	0x40005400
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	50000400 	.word	0x50000400

08000cc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cc0:	b590      	push	{r4, r7, lr}
 8000cc2:	b091      	sub	sp, #68	@ 0x44
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	232c      	movs	r3, #44	@ 0x2c
 8000cca:	18fb      	adds	r3, r7, r3
 8000ccc:	0018      	movs	r0, r3
 8000cce:	2314      	movs	r3, #20
 8000cd0:	001a      	movs	r2, r3
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	f003 fb72 	bl	80043bc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cd8:	2410      	movs	r4, #16
 8000cda:	193b      	adds	r3, r7, r4
 8000cdc:	0018      	movs	r0, r3
 8000cde:	231c      	movs	r3, #28
 8000ce0:	001a      	movs	r2, r3
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	f003 fb6a 	bl	80043bc <memset>
  if(huart->Instance==USART2)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a26      	ldr	r2, [pc, #152]	@ (8000d88 <HAL_UART_MspInit+0xc8>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d146      	bne.n	8000d80 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cf2:	193b      	adds	r3, r7, r4
 8000cf4:	2202      	movs	r2, #2
 8000cf6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cf8:	193b      	adds	r3, r7, r4
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cfe:	193b      	adds	r3, r7, r4
 8000d00:	0018      	movs	r0, r3
 8000d02:	f002 f849 	bl	8002d98 <HAL_RCCEx_PeriphCLKConfig>
 8000d06:	1e03      	subs	r3, r0, #0
 8000d08:	d001      	beq.n	8000d0e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d0a:	f7ff ff4d 	bl	8000ba8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d0e:	4b1f      	ldr	r3, [pc, #124]	@ (8000d8c <HAL_UART_MspInit+0xcc>)
 8000d10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d12:	4b1e      	ldr	r3, [pc, #120]	@ (8000d8c <HAL_UART_MspInit+0xcc>)
 8000d14:	2180      	movs	r1, #128	@ 0x80
 8000d16:	0289      	lsls	r1, r1, #10
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000d8c <HAL_UART_MspInit+0xcc>)
 8000d1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d20:	2380      	movs	r3, #128	@ 0x80
 8000d22:	029b      	lsls	r3, r3, #10
 8000d24:	4013      	ands	r3, r2
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2a:	4b18      	ldr	r3, [pc, #96]	@ (8000d8c <HAL_UART_MspInit+0xcc>)
 8000d2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d2e:	4b17      	ldr	r3, [pc, #92]	@ (8000d8c <HAL_UART_MspInit+0xcc>)
 8000d30:	2101      	movs	r1, #1
 8000d32:	430a      	orrs	r2, r1
 8000d34:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d36:	4b15      	ldr	r3, [pc, #84]	@ (8000d8c <HAL_UART_MspInit+0xcc>)
 8000d38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	60bb      	str	r3, [r7, #8]
 8000d40:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d42:	212c      	movs	r1, #44	@ 0x2c
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	220c      	movs	r2, #12
 8000d48:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4a:	187b      	adds	r3, r7, r1
 8000d4c:	2202      	movs	r2, #2
 8000d4e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	187b      	adds	r3, r7, r1
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d56:	187b      	adds	r3, r7, r1
 8000d58:	2200      	movs	r2, #0
 8000d5a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000d5c:	187b      	adds	r3, r7, r1
 8000d5e:	2201      	movs	r2, #1
 8000d60:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d62:	187a      	adds	r2, r7, r1
 8000d64:	23a0      	movs	r3, #160	@ 0xa0
 8000d66:	05db      	lsls	r3, r3, #23
 8000d68:	0011      	movs	r1, r2
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f000 faf0 	bl	8001350 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d70:	2200      	movs	r2, #0
 8000d72:	2100      	movs	r1, #0
 8000d74:	201c      	movs	r0, #28
 8000d76:	f000 f9ed 	bl	8001154 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d7a:	201c      	movs	r0, #28
 8000d7c:	f000 f9ff 	bl	800117e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d80:	46c0      	nop			@ (mov r8, r8)
 8000d82:	46bd      	mov	sp, r7
 8000d84:	b011      	add	sp, #68	@ 0x44
 8000d86:	bd90      	pop	{r4, r7, pc}
 8000d88:	40004400 	.word	0x40004400
 8000d8c:	40021000 	.word	0x40021000

08000d90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d94:	46c0      	nop			@ (mov r8, r8)
 8000d96:	e7fd      	b.n	8000d94 <NMI_Handler+0x4>

08000d98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d9c:	46c0      	nop			@ (mov r8, r8)
 8000d9e:	e7fd      	b.n	8000d9c <HardFault_Handler+0x4>

08000da0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000da4:	46c0      	nop			@ (mov r8, r8)
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dae:	46c0      	nop			@ (mov r8, r8)
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db8:	f000 f8e0 	bl	8000f7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dbc:	46c0      	nop			@ (mov r8, r8)
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
	...

08000dc4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000dc8:	4b03      	ldr	r3, [pc, #12]	@ (8000dd8 <USART2_IRQHandler+0x14>)
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f002 fa12 	bl	80031f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000dd0:	46c0      	nop			@ (mov r8, r8)
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	46c0      	nop			@ (mov r8, r8)
 8000dd8:	200000f0 	.word	0x200000f0

08000ddc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de4:	4a14      	ldr	r2, [pc, #80]	@ (8000e38 <_sbrk+0x5c>)
 8000de6:	4b15      	ldr	r3, [pc, #84]	@ (8000e3c <_sbrk+0x60>)
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df0:	4b13      	ldr	r3, [pc, #76]	@ (8000e40 <_sbrk+0x64>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d102      	bne.n	8000dfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000df8:	4b11      	ldr	r3, [pc, #68]	@ (8000e40 <_sbrk+0x64>)
 8000dfa:	4a12      	ldr	r2, [pc, #72]	@ (8000e44 <_sbrk+0x68>)
 8000dfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dfe:	4b10      	ldr	r3, [pc, #64]	@ (8000e40 <_sbrk+0x64>)
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	18d3      	adds	r3, r2, r3
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d207      	bcs.n	8000e1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e0c:	f003 fade 	bl	80043cc <__errno>
 8000e10:	0003      	movs	r3, r0
 8000e12:	220c      	movs	r2, #12
 8000e14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e16:	2301      	movs	r3, #1
 8000e18:	425b      	negs	r3, r3
 8000e1a:	e009      	b.n	8000e30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e1c:	4b08      	ldr	r3, [pc, #32]	@ (8000e40 <_sbrk+0x64>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e22:	4b07      	ldr	r3, [pc, #28]	@ (8000e40 <_sbrk+0x64>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	18d2      	adds	r2, r2, r3
 8000e2a:	4b05      	ldr	r3, [pc, #20]	@ (8000e40 <_sbrk+0x64>)
 8000e2c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
}
 8000e30:	0018      	movs	r0, r3
 8000e32:	46bd      	mov	sp, r7
 8000e34:	b006      	add	sp, #24
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20009000 	.word	0x20009000
 8000e3c:	00000400 	.word	0x00000400
 8000e40:	20000184 	.word	0x20000184
 8000e44:	200002d8 	.word	0x200002d8

08000e48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e4c:	46c0      	nop			@ (mov r8, r8)
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e54:	480d      	ldr	r0, [pc, #52]	@ (8000e8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e56:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e58:	f7ff fff6 	bl	8000e48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e5c:	480c      	ldr	r0, [pc, #48]	@ (8000e90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e5e:	490d      	ldr	r1, [pc, #52]	@ (8000e94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e60:	4a0d      	ldr	r2, [pc, #52]	@ (8000e98 <LoopForever+0xe>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e64:	e002      	b.n	8000e6c <LoopCopyDataInit>

08000e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6a:	3304      	adds	r3, #4

08000e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e70:	d3f9      	bcc.n	8000e66 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e72:	4a0a      	ldr	r2, [pc, #40]	@ (8000e9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e74:	4c0a      	ldr	r4, [pc, #40]	@ (8000ea0 <LoopForever+0x16>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e78:	e001      	b.n	8000e7e <LoopFillZerobss>

08000e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e7c:	3204      	adds	r2, #4

08000e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e80:	d3fb      	bcc.n	8000e7a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e82:	f003 faa9 	bl	80043d8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000e86:	f7ff fd2d 	bl	80008e4 <main>

08000e8a <LoopForever>:

LoopForever:
  b LoopForever
 8000e8a:	e7fe      	b.n	8000e8a <LoopForever>
  ldr   r0, =_estack
 8000e8c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000e90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e94:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000e98:	08004eb0 	.word	0x08004eb0
  ldr r2, =_sbss
 8000e9c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000ea0:	200002d4 	.word	0x200002d4

08000ea4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ea4:	e7fe      	b.n	8000ea4 <ADC1_IRQHandler>
	...

08000ea8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000eae:	1dfb      	adds	r3, r7, #7
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee4 <HAL_Init+0x3c>)
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee4 <HAL_Init+0x3c>)
 8000eba:	2180      	movs	r1, #128	@ 0x80
 8000ebc:	0049      	lsls	r1, r1, #1
 8000ebe:	430a      	orrs	r2, r1
 8000ec0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	f000 f810 	bl	8000ee8 <HAL_InitTick>
 8000ec8:	1e03      	subs	r3, r0, #0
 8000eca:	d003      	beq.n	8000ed4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000ecc:	1dfb      	adds	r3, r7, #7
 8000ece:	2201      	movs	r2, #1
 8000ed0:	701a      	strb	r2, [r3, #0]
 8000ed2:	e001      	b.n	8000ed8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000ed4:	f7ff fe6e 	bl	8000bb4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ed8:	1dfb      	adds	r3, r7, #7
 8000eda:	781b      	ldrb	r3, [r3, #0]
}
 8000edc:	0018      	movs	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	b002      	add	sp, #8
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40022000 	.word	0x40022000

08000ee8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee8:	b590      	push	{r4, r7, lr}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ef0:	230f      	movs	r3, #15
 8000ef2:	18fb      	adds	r3, r7, r3
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000ef8:	4b1d      	ldr	r3, [pc, #116]	@ (8000f70 <HAL_InitTick+0x88>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d02b      	beq.n	8000f58 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000f00:	4b1c      	ldr	r3, [pc, #112]	@ (8000f74 <HAL_InitTick+0x8c>)
 8000f02:	681c      	ldr	r4, [r3, #0]
 8000f04:	4b1a      	ldr	r3, [pc, #104]	@ (8000f70 <HAL_InitTick+0x88>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	0019      	movs	r1, r3
 8000f0a:	23fa      	movs	r3, #250	@ 0xfa
 8000f0c:	0098      	lsls	r0, r3, #2
 8000f0e:	f7ff f909 	bl	8000124 <__udivsi3>
 8000f12:	0003      	movs	r3, r0
 8000f14:	0019      	movs	r1, r3
 8000f16:	0020      	movs	r0, r4
 8000f18:	f7ff f904 	bl	8000124 <__udivsi3>
 8000f1c:	0003      	movs	r3, r0
 8000f1e:	0018      	movs	r0, r3
 8000f20:	f000 f93d 	bl	800119e <HAL_SYSTICK_Config>
 8000f24:	1e03      	subs	r3, r0, #0
 8000f26:	d112      	bne.n	8000f4e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2b03      	cmp	r3, #3
 8000f2c:	d80a      	bhi.n	8000f44 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f2e:	6879      	ldr	r1, [r7, #4]
 8000f30:	2301      	movs	r3, #1
 8000f32:	425b      	negs	r3, r3
 8000f34:	2200      	movs	r2, #0
 8000f36:	0018      	movs	r0, r3
 8000f38:	f000 f90c 	bl	8001154 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f78 <HAL_InitTick+0x90>)
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	e00d      	b.n	8000f60 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000f44:	230f      	movs	r3, #15
 8000f46:	18fb      	adds	r3, r7, r3
 8000f48:	2201      	movs	r2, #1
 8000f4a:	701a      	strb	r2, [r3, #0]
 8000f4c:	e008      	b.n	8000f60 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f4e:	230f      	movs	r3, #15
 8000f50:	18fb      	adds	r3, r7, r3
 8000f52:	2201      	movs	r2, #1
 8000f54:	701a      	strb	r2, [r3, #0]
 8000f56:	e003      	b.n	8000f60 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f58:	230f      	movs	r3, #15
 8000f5a:	18fb      	adds	r3, r7, r3
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000f60:	230f      	movs	r3, #15
 8000f62:	18fb      	adds	r3, r7, r3
 8000f64:	781b      	ldrb	r3, [r3, #0]
}
 8000f66:	0018      	movs	r0, r3
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	b005      	add	sp, #20
 8000f6c:	bd90      	pop	{r4, r7, pc}
 8000f6e:	46c0      	nop			@ (mov r8, r8)
 8000f70:	20000024 	.word	0x20000024
 8000f74:	2000001c 	.word	0x2000001c
 8000f78:	20000020 	.word	0x20000020

08000f7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f80:	4b05      	ldr	r3, [pc, #20]	@ (8000f98 <HAL_IncTick+0x1c>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	001a      	movs	r2, r3
 8000f86:	4b05      	ldr	r3, [pc, #20]	@ (8000f9c <HAL_IncTick+0x20>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	18d2      	adds	r2, r2, r3
 8000f8c:	4b03      	ldr	r3, [pc, #12]	@ (8000f9c <HAL_IncTick+0x20>)
 8000f8e:	601a      	str	r2, [r3, #0]
}
 8000f90:	46c0      	nop			@ (mov r8, r8)
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	46c0      	nop			@ (mov r8, r8)
 8000f98:	20000024 	.word	0x20000024
 8000f9c:	20000188 	.word	0x20000188

08000fa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa4:	4b02      	ldr	r3, [pc, #8]	@ (8000fb0 <HAL_GetTick+0x10>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
}
 8000fa8:	0018      	movs	r0, r3
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	46c0      	nop			@ (mov r8, r8)
 8000fb0:	20000188 	.word	0x20000188

08000fb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fbc:	f7ff fff0 	bl	8000fa0 <HAL_GetTick>
 8000fc0:	0003      	movs	r3, r0
 8000fc2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	d005      	beq.n	8000fda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fce:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff8 <HAL_Delay+0x44>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	001a      	movs	r2, r3
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	189b      	adds	r3, r3, r2
 8000fd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fda:	46c0      	nop			@ (mov r8, r8)
 8000fdc:	f7ff ffe0 	bl	8000fa0 <HAL_GetTick>
 8000fe0:	0002      	movs	r2, r0
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	68fa      	ldr	r2, [r7, #12]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d8f7      	bhi.n	8000fdc <HAL_Delay+0x28>
  {
  }
}
 8000fec:	46c0      	nop			@ (mov r8, r8)
 8000fee:	46c0      	nop			@ (mov r8, r8)
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	b004      	add	sp, #16
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	46c0      	nop			@ (mov r8, r8)
 8000ff8:	20000024 	.word	0x20000024

08000ffc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	0002      	movs	r2, r0
 8001004:	1dfb      	adds	r3, r7, #7
 8001006:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001008:	1dfb      	adds	r3, r7, #7
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b7f      	cmp	r3, #127	@ 0x7f
 800100e:	d809      	bhi.n	8001024 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001010:	1dfb      	adds	r3, r7, #7
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	001a      	movs	r2, r3
 8001016:	231f      	movs	r3, #31
 8001018:	401a      	ands	r2, r3
 800101a:	4b04      	ldr	r3, [pc, #16]	@ (800102c <__NVIC_EnableIRQ+0x30>)
 800101c:	2101      	movs	r1, #1
 800101e:	4091      	lsls	r1, r2
 8001020:	000a      	movs	r2, r1
 8001022:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001024:	46c0      	nop			@ (mov r8, r8)
 8001026:	46bd      	mov	sp, r7
 8001028:	b002      	add	sp, #8
 800102a:	bd80      	pop	{r7, pc}
 800102c:	e000e100 	.word	0xe000e100

08001030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001030:	b590      	push	{r4, r7, lr}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	0002      	movs	r2, r0
 8001038:	6039      	str	r1, [r7, #0]
 800103a:	1dfb      	adds	r3, r7, #7
 800103c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800103e:	1dfb      	adds	r3, r7, #7
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b7f      	cmp	r3, #127	@ 0x7f
 8001044:	d828      	bhi.n	8001098 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001046:	4a2f      	ldr	r2, [pc, #188]	@ (8001104 <__NVIC_SetPriority+0xd4>)
 8001048:	1dfb      	adds	r3, r7, #7
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	b25b      	sxtb	r3, r3
 800104e:	089b      	lsrs	r3, r3, #2
 8001050:	33c0      	adds	r3, #192	@ 0xc0
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	589b      	ldr	r3, [r3, r2]
 8001056:	1dfa      	adds	r2, r7, #7
 8001058:	7812      	ldrb	r2, [r2, #0]
 800105a:	0011      	movs	r1, r2
 800105c:	2203      	movs	r2, #3
 800105e:	400a      	ands	r2, r1
 8001060:	00d2      	lsls	r2, r2, #3
 8001062:	21ff      	movs	r1, #255	@ 0xff
 8001064:	4091      	lsls	r1, r2
 8001066:	000a      	movs	r2, r1
 8001068:	43d2      	mvns	r2, r2
 800106a:	401a      	ands	r2, r3
 800106c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	019b      	lsls	r3, r3, #6
 8001072:	22ff      	movs	r2, #255	@ 0xff
 8001074:	401a      	ands	r2, r3
 8001076:	1dfb      	adds	r3, r7, #7
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	0018      	movs	r0, r3
 800107c:	2303      	movs	r3, #3
 800107e:	4003      	ands	r3, r0
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001084:	481f      	ldr	r0, [pc, #124]	@ (8001104 <__NVIC_SetPriority+0xd4>)
 8001086:	1dfb      	adds	r3, r7, #7
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	b25b      	sxtb	r3, r3
 800108c:	089b      	lsrs	r3, r3, #2
 800108e:	430a      	orrs	r2, r1
 8001090:	33c0      	adds	r3, #192	@ 0xc0
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001096:	e031      	b.n	80010fc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001098:	4a1b      	ldr	r2, [pc, #108]	@ (8001108 <__NVIC_SetPriority+0xd8>)
 800109a:	1dfb      	adds	r3, r7, #7
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	0019      	movs	r1, r3
 80010a0:	230f      	movs	r3, #15
 80010a2:	400b      	ands	r3, r1
 80010a4:	3b08      	subs	r3, #8
 80010a6:	089b      	lsrs	r3, r3, #2
 80010a8:	3306      	adds	r3, #6
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	18d3      	adds	r3, r2, r3
 80010ae:	3304      	adds	r3, #4
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	1dfa      	adds	r2, r7, #7
 80010b4:	7812      	ldrb	r2, [r2, #0]
 80010b6:	0011      	movs	r1, r2
 80010b8:	2203      	movs	r2, #3
 80010ba:	400a      	ands	r2, r1
 80010bc:	00d2      	lsls	r2, r2, #3
 80010be:	21ff      	movs	r1, #255	@ 0xff
 80010c0:	4091      	lsls	r1, r2
 80010c2:	000a      	movs	r2, r1
 80010c4:	43d2      	mvns	r2, r2
 80010c6:	401a      	ands	r2, r3
 80010c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	019b      	lsls	r3, r3, #6
 80010ce:	22ff      	movs	r2, #255	@ 0xff
 80010d0:	401a      	ands	r2, r3
 80010d2:	1dfb      	adds	r3, r7, #7
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	0018      	movs	r0, r3
 80010d8:	2303      	movs	r3, #3
 80010da:	4003      	ands	r3, r0
 80010dc:	00db      	lsls	r3, r3, #3
 80010de:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010e0:	4809      	ldr	r0, [pc, #36]	@ (8001108 <__NVIC_SetPriority+0xd8>)
 80010e2:	1dfb      	adds	r3, r7, #7
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	001c      	movs	r4, r3
 80010e8:	230f      	movs	r3, #15
 80010ea:	4023      	ands	r3, r4
 80010ec:	3b08      	subs	r3, #8
 80010ee:	089b      	lsrs	r3, r3, #2
 80010f0:	430a      	orrs	r2, r1
 80010f2:	3306      	adds	r3, #6
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	18c3      	adds	r3, r0, r3
 80010f8:	3304      	adds	r3, #4
 80010fa:	601a      	str	r2, [r3, #0]
}
 80010fc:	46c0      	nop			@ (mov r8, r8)
 80010fe:	46bd      	mov	sp, r7
 8001100:	b003      	add	sp, #12
 8001102:	bd90      	pop	{r4, r7, pc}
 8001104:	e000e100 	.word	0xe000e100
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	1e5a      	subs	r2, r3, #1
 8001118:	2380      	movs	r3, #128	@ 0x80
 800111a:	045b      	lsls	r3, r3, #17
 800111c:	429a      	cmp	r2, r3
 800111e:	d301      	bcc.n	8001124 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001120:	2301      	movs	r3, #1
 8001122:	e010      	b.n	8001146 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001124:	4b0a      	ldr	r3, [pc, #40]	@ (8001150 <SysTick_Config+0x44>)
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	3a01      	subs	r2, #1
 800112a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800112c:	2301      	movs	r3, #1
 800112e:	425b      	negs	r3, r3
 8001130:	2103      	movs	r1, #3
 8001132:	0018      	movs	r0, r3
 8001134:	f7ff ff7c 	bl	8001030 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001138:	4b05      	ldr	r3, [pc, #20]	@ (8001150 <SysTick_Config+0x44>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113e:	4b04      	ldr	r3, [pc, #16]	@ (8001150 <SysTick_Config+0x44>)
 8001140:	2207      	movs	r2, #7
 8001142:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001144:	2300      	movs	r3, #0
}
 8001146:	0018      	movs	r0, r3
 8001148:	46bd      	mov	sp, r7
 800114a:	b002      	add	sp, #8
 800114c:	bd80      	pop	{r7, pc}
 800114e:	46c0      	nop			@ (mov r8, r8)
 8001150:	e000e010 	.word	0xe000e010

08001154 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	60b9      	str	r1, [r7, #8]
 800115c:	607a      	str	r2, [r7, #4]
 800115e:	210f      	movs	r1, #15
 8001160:	187b      	adds	r3, r7, r1
 8001162:	1c02      	adds	r2, r0, #0
 8001164:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001166:	68ba      	ldr	r2, [r7, #8]
 8001168:	187b      	adds	r3, r7, r1
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	b25b      	sxtb	r3, r3
 800116e:	0011      	movs	r1, r2
 8001170:	0018      	movs	r0, r3
 8001172:	f7ff ff5d 	bl	8001030 <__NVIC_SetPriority>
}
 8001176:	46c0      	nop			@ (mov r8, r8)
 8001178:	46bd      	mov	sp, r7
 800117a:	b004      	add	sp, #16
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	0002      	movs	r2, r0
 8001186:	1dfb      	adds	r3, r7, #7
 8001188:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800118a:	1dfb      	adds	r3, r7, #7
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	b25b      	sxtb	r3, r3
 8001190:	0018      	movs	r0, r3
 8001192:	f7ff ff33 	bl	8000ffc <__NVIC_EnableIRQ>
}
 8001196:	46c0      	nop			@ (mov r8, r8)
 8001198:	46bd      	mov	sp, r7
 800119a:	b002      	add	sp, #8
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b082      	sub	sp, #8
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	0018      	movs	r0, r3
 80011aa:	f7ff ffaf 	bl	800110c <SysTick_Config>
 80011ae:	0003      	movs	r3, r0
}
 80011b0:	0018      	movs	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	b002      	add	sp, #8
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d101      	bne.n	80011ca <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e050      	b.n	800126c <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2225      	movs	r2, #37	@ 0x25
 80011ce:	5c9b      	ldrb	r3, [r3, r2]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d008      	beq.n	80011e8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2204      	movs	r2, #4
 80011da:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2224      	movs	r2, #36	@ 0x24
 80011e0:	2100      	movs	r1, #0
 80011e2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e041      	b.n	800126c <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	210e      	movs	r1, #14
 80011f4:	438a      	bics	r2, r1
 80011f6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001202:	491c      	ldr	r1, [pc, #112]	@ (8001274 <HAL_DMA_Abort+0xbc>)
 8001204:	400a      	ands	r2, r1
 8001206:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2101      	movs	r1, #1
 8001214:	438a      	bics	r2, r1
 8001216:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8001218:	4b17      	ldr	r3, [pc, #92]	@ (8001278 <HAL_DMA_Abort+0xc0>)
 800121a:	6859      	ldr	r1, [r3, #4]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001220:	221c      	movs	r2, #28
 8001222:	4013      	ands	r3, r2
 8001224:	2201      	movs	r2, #1
 8001226:	409a      	lsls	r2, r3
 8001228:	4b13      	ldr	r3, [pc, #76]	@ (8001278 <HAL_DMA_Abort+0xc0>)
 800122a:	430a      	orrs	r2, r1
 800122c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001236:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800123c:	2b00      	cmp	r3, #0
 800123e:	d00c      	beq.n	800125a <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800124a:	490a      	ldr	r1, [pc, #40]	@ (8001274 <HAL_DMA_Abort+0xbc>)
 800124c:	400a      	ands	r2, r1
 800124e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001258:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2225      	movs	r2, #37	@ 0x25
 800125e:	2101      	movs	r1, #1
 8001260:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2224      	movs	r2, #36	@ 0x24
 8001266:	2100      	movs	r1, #0
 8001268:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800126a:	2300      	movs	r3, #0
}
 800126c:	0018      	movs	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	b002      	add	sp, #8
 8001272:	bd80      	pop	{r7, pc}
 8001274:	fffffeff 	.word	0xfffffeff
 8001278:	40020000 	.word	0x40020000

0800127c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001284:	210f      	movs	r1, #15
 8001286:	187b      	adds	r3, r7, r1
 8001288:	2200      	movs	r2, #0
 800128a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2225      	movs	r2, #37	@ 0x25
 8001290:	5c9b      	ldrb	r3, [r3, r2]
 8001292:	b2db      	uxtb	r3, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d006      	beq.n	80012a6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2204      	movs	r2, #4
 800129c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800129e:	187b      	adds	r3, r7, r1
 80012a0:	2201      	movs	r2, #1
 80012a2:	701a      	strb	r2, [r3, #0]
 80012a4:	e049      	b.n	800133a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	210e      	movs	r1, #14
 80012b2:	438a      	bics	r2, r1
 80012b4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2101      	movs	r1, #1
 80012c2:	438a      	bics	r2, r1
 80012c4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d0:	491d      	ldr	r1, [pc, #116]	@ (8001348 <HAL_DMA_Abort_IT+0xcc>)
 80012d2:	400a      	ands	r2, r1
 80012d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80012d6:	4b1d      	ldr	r3, [pc, #116]	@ (800134c <HAL_DMA_Abort_IT+0xd0>)
 80012d8:	6859      	ldr	r1, [r3, #4]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012de:	221c      	movs	r2, #28
 80012e0:	4013      	ands	r3, r2
 80012e2:	2201      	movs	r2, #1
 80012e4:	409a      	lsls	r2, r3
 80012e6:	4b19      	ldr	r3, [pc, #100]	@ (800134c <HAL_DMA_Abort_IT+0xd0>)
 80012e8:	430a      	orrs	r2, r1
 80012ea:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80012f4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d00c      	beq.n	8001318 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001308:	490f      	ldr	r1, [pc, #60]	@ (8001348 <HAL_DMA_Abort_IT+0xcc>)
 800130a:	400a      	ands	r2, r1
 800130c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001316:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2225      	movs	r2, #37	@ 0x25
 800131c:	2101      	movs	r1, #1
 800131e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2224      	movs	r2, #36	@ 0x24
 8001324:	2100      	movs	r1, #0
 8001326:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800132c:	2b00      	cmp	r3, #0
 800132e:	d004      	beq.n	800133a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	0010      	movs	r0, r2
 8001338:	4798      	blx	r3
    }
  }
  return status;
 800133a:	230f      	movs	r3, #15
 800133c:	18fb      	adds	r3, r7, r3
 800133e:	781b      	ldrb	r3, [r3, #0]
}
 8001340:	0018      	movs	r0, r3
 8001342:	46bd      	mov	sp, r7
 8001344:	b004      	add	sp, #16
 8001346:	bd80      	pop	{r7, pc}
 8001348:	fffffeff 	.word	0xfffffeff
 800134c:	40020000 	.word	0x40020000

08001350 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800135e:	e147      	b.n	80015f0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2101      	movs	r1, #1
 8001366:	697a      	ldr	r2, [r7, #20]
 8001368:	4091      	lsls	r1, r2
 800136a:	000a      	movs	r2, r1
 800136c:	4013      	ands	r3, r2
 800136e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d100      	bne.n	8001378 <HAL_GPIO_Init+0x28>
 8001376:	e138      	b.n	80015ea <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	2203      	movs	r2, #3
 800137e:	4013      	ands	r3, r2
 8001380:	2b01      	cmp	r3, #1
 8001382:	d005      	beq.n	8001390 <HAL_GPIO_Init+0x40>
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2203      	movs	r2, #3
 800138a:	4013      	ands	r3, r2
 800138c:	2b02      	cmp	r3, #2
 800138e:	d130      	bne.n	80013f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	2203      	movs	r2, #3
 800139c:	409a      	lsls	r2, r3
 800139e:	0013      	movs	r3, r2
 80013a0:	43da      	mvns	r2, r3
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	4013      	ands	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	68da      	ldr	r2, [r3, #12]
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	409a      	lsls	r2, r3
 80013b2:	0013      	movs	r3, r2
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013c6:	2201      	movs	r2, #1
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	409a      	lsls	r2, r3
 80013cc:	0013      	movs	r3, r2
 80013ce:	43da      	mvns	r2, r3
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	4013      	ands	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	091b      	lsrs	r3, r3, #4
 80013dc:	2201      	movs	r2, #1
 80013de:	401a      	ands	r2, r3
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	409a      	lsls	r2, r3
 80013e4:	0013      	movs	r3, r2
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	2203      	movs	r2, #3
 80013f8:	4013      	ands	r3, r2
 80013fa:	2b03      	cmp	r3, #3
 80013fc:	d017      	beq.n	800142e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	2203      	movs	r2, #3
 800140a:	409a      	lsls	r2, r3
 800140c:	0013      	movs	r3, r2
 800140e:	43da      	mvns	r2, r3
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	4013      	ands	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	689a      	ldr	r2, [r3, #8]
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	409a      	lsls	r2, r3
 8001420:	0013      	movs	r3, r2
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	4313      	orrs	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2203      	movs	r2, #3
 8001434:	4013      	ands	r3, r2
 8001436:	2b02      	cmp	r3, #2
 8001438:	d123      	bne.n	8001482 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	08da      	lsrs	r2, r3, #3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	3208      	adds	r2, #8
 8001442:	0092      	lsls	r2, r2, #2
 8001444:	58d3      	ldr	r3, [r2, r3]
 8001446:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	2207      	movs	r2, #7
 800144c:	4013      	ands	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	220f      	movs	r2, #15
 8001452:	409a      	lsls	r2, r3
 8001454:	0013      	movs	r3, r2
 8001456:	43da      	mvns	r2, r3
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	4013      	ands	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	691a      	ldr	r2, [r3, #16]
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	2107      	movs	r1, #7
 8001466:	400b      	ands	r3, r1
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	409a      	lsls	r2, r3
 800146c:	0013      	movs	r3, r2
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	4313      	orrs	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	08da      	lsrs	r2, r3, #3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3208      	adds	r2, #8
 800147c:	0092      	lsls	r2, r2, #2
 800147e:	6939      	ldr	r1, [r7, #16]
 8001480:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	2203      	movs	r2, #3
 800148e:	409a      	lsls	r2, r3
 8001490:	0013      	movs	r3, r2
 8001492:	43da      	mvns	r2, r3
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	4013      	ands	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	2203      	movs	r2, #3
 80014a0:	401a      	ands	r2, r3
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	409a      	lsls	r2, r3
 80014a8:	0013      	movs	r3, r2
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	23c0      	movs	r3, #192	@ 0xc0
 80014bc:	029b      	lsls	r3, r3, #10
 80014be:	4013      	ands	r3, r2
 80014c0:	d100      	bne.n	80014c4 <HAL_GPIO_Init+0x174>
 80014c2:	e092      	b.n	80015ea <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80014c4:	4a50      	ldr	r2, [pc, #320]	@ (8001608 <HAL_GPIO_Init+0x2b8>)
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	089b      	lsrs	r3, r3, #2
 80014ca:	3318      	adds	r3, #24
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	589b      	ldr	r3, [r3, r2]
 80014d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	2203      	movs	r2, #3
 80014d6:	4013      	ands	r3, r2
 80014d8:	00db      	lsls	r3, r3, #3
 80014da:	220f      	movs	r2, #15
 80014dc:	409a      	lsls	r2, r3
 80014de:	0013      	movs	r3, r2
 80014e0:	43da      	mvns	r2, r3
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	4013      	ands	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	23a0      	movs	r3, #160	@ 0xa0
 80014ec:	05db      	lsls	r3, r3, #23
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d013      	beq.n	800151a <HAL_GPIO_Init+0x1ca>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a45      	ldr	r2, [pc, #276]	@ (800160c <HAL_GPIO_Init+0x2bc>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d00d      	beq.n	8001516 <HAL_GPIO_Init+0x1c6>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a44      	ldr	r2, [pc, #272]	@ (8001610 <HAL_GPIO_Init+0x2c0>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d007      	beq.n	8001512 <HAL_GPIO_Init+0x1c2>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a43      	ldr	r2, [pc, #268]	@ (8001614 <HAL_GPIO_Init+0x2c4>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d101      	bne.n	800150e <HAL_GPIO_Init+0x1be>
 800150a:	2303      	movs	r3, #3
 800150c:	e006      	b.n	800151c <HAL_GPIO_Init+0x1cc>
 800150e:	2305      	movs	r3, #5
 8001510:	e004      	b.n	800151c <HAL_GPIO_Init+0x1cc>
 8001512:	2302      	movs	r3, #2
 8001514:	e002      	b.n	800151c <HAL_GPIO_Init+0x1cc>
 8001516:	2301      	movs	r3, #1
 8001518:	e000      	b.n	800151c <HAL_GPIO_Init+0x1cc>
 800151a:	2300      	movs	r3, #0
 800151c:	697a      	ldr	r2, [r7, #20]
 800151e:	2103      	movs	r1, #3
 8001520:	400a      	ands	r2, r1
 8001522:	00d2      	lsls	r2, r2, #3
 8001524:	4093      	lsls	r3, r2
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	4313      	orrs	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800152c:	4936      	ldr	r1, [pc, #216]	@ (8001608 <HAL_GPIO_Init+0x2b8>)
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	089b      	lsrs	r3, r3, #2
 8001532:	3318      	adds	r3, #24
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800153a:	4b33      	ldr	r3, [pc, #204]	@ (8001608 <HAL_GPIO_Init+0x2b8>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	43da      	mvns	r2, r3
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	4013      	ands	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685a      	ldr	r2, [r3, #4]
 800154e:	2380      	movs	r3, #128	@ 0x80
 8001550:	035b      	lsls	r3, r3, #13
 8001552:	4013      	ands	r3, r2
 8001554:	d003      	beq.n	800155e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	4313      	orrs	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800155e:	4b2a      	ldr	r3, [pc, #168]	@ (8001608 <HAL_GPIO_Init+0x2b8>)
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001564:	4b28      	ldr	r3, [pc, #160]	@ (8001608 <HAL_GPIO_Init+0x2b8>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	43da      	mvns	r2, r3
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	4013      	ands	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	2380      	movs	r3, #128	@ 0x80
 800157a:	039b      	lsls	r3, r3, #14
 800157c:	4013      	ands	r3, r2
 800157e:	d003      	beq.n	8001588 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	4313      	orrs	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001588:	4b1f      	ldr	r3, [pc, #124]	@ (8001608 <HAL_GPIO_Init+0x2b8>)
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800158e:	4a1e      	ldr	r2, [pc, #120]	@ (8001608 <HAL_GPIO_Init+0x2b8>)
 8001590:	2384      	movs	r3, #132	@ 0x84
 8001592:	58d3      	ldr	r3, [r2, r3]
 8001594:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	43da      	mvns	r2, r3
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	4013      	ands	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685a      	ldr	r2, [r3, #4]
 80015a4:	2380      	movs	r3, #128	@ 0x80
 80015a6:	029b      	lsls	r3, r3, #10
 80015a8:	4013      	ands	r3, r2
 80015aa:	d003      	beq.n	80015b4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015b4:	4914      	ldr	r1, [pc, #80]	@ (8001608 <HAL_GPIO_Init+0x2b8>)
 80015b6:	2284      	movs	r2, #132	@ 0x84
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80015bc:	4a12      	ldr	r2, [pc, #72]	@ (8001608 <HAL_GPIO_Init+0x2b8>)
 80015be:	2380      	movs	r3, #128	@ 0x80
 80015c0:	58d3      	ldr	r3, [r2, r3]
 80015c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	43da      	mvns	r2, r3
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	4013      	ands	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685a      	ldr	r2, [r3, #4]
 80015d2:	2380      	movs	r3, #128	@ 0x80
 80015d4:	025b      	lsls	r3, r3, #9
 80015d6:	4013      	ands	r3, r2
 80015d8:	d003      	beq.n	80015e2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	4313      	orrs	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015e2:	4909      	ldr	r1, [pc, #36]	@ (8001608 <HAL_GPIO_Init+0x2b8>)
 80015e4:	2280      	movs	r2, #128	@ 0x80
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	3301      	adds	r3, #1
 80015ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	40da      	lsrs	r2, r3
 80015f8:	1e13      	subs	r3, r2, #0
 80015fa:	d000      	beq.n	80015fe <HAL_GPIO_Init+0x2ae>
 80015fc:	e6b0      	b.n	8001360 <HAL_GPIO_Init+0x10>
  }
}
 80015fe:	46c0      	nop			@ (mov r8, r8)
 8001600:	46c0      	nop			@ (mov r8, r8)
 8001602:	46bd      	mov	sp, r7
 8001604:	b006      	add	sp, #24
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40021800 	.word	0x40021800
 800160c:	50000400 	.word	0x50000400
 8001610:	50000800 	.word	0x50000800
 8001614:	50000c00 	.word	0x50000c00

08001618 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	0008      	movs	r0, r1
 8001622:	0011      	movs	r1, r2
 8001624:	1cbb      	adds	r3, r7, #2
 8001626:	1c02      	adds	r2, r0, #0
 8001628:	801a      	strh	r2, [r3, #0]
 800162a:	1c7b      	adds	r3, r7, #1
 800162c:	1c0a      	adds	r2, r1, #0
 800162e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001630:	1c7b      	adds	r3, r7, #1
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d004      	beq.n	8001642 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001638:	1cbb      	adds	r3, r7, #2
 800163a:	881a      	ldrh	r2, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001640:	e003      	b.n	800164a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001642:	1cbb      	adds	r3, r7, #2
 8001644:	881a      	ldrh	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800164a:	46c0      	nop			@ (mov r8, r8)
 800164c:	46bd      	mov	sp, r7
 800164e:	b002      	add	sp, #8
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d101      	bne.n	8001666 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e08f      	b.n	8001786 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2241      	movs	r2, #65	@ 0x41
 800166a:	5c9b      	ldrb	r3, [r3, r2]
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	d107      	bne.n	8001682 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2240      	movs	r2, #64	@ 0x40
 8001676:	2100      	movs	r1, #0
 8001678:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	0018      	movs	r0, r3
 800167e:	f7ff fabd 	bl	8000bfc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2241      	movs	r2, #65	@ 0x41
 8001686:	2124      	movs	r1, #36	@ 0x24
 8001688:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2101      	movs	r1, #1
 8001696:	438a      	bics	r2, r1
 8001698:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	493b      	ldr	r1, [pc, #236]	@ (8001790 <HAL_I2C_Init+0x13c>)
 80016a4:	400a      	ands	r2, r1
 80016a6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	689a      	ldr	r2, [r3, #8]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4938      	ldr	r1, [pc, #224]	@ (8001794 <HAL_I2C_Init+0x140>)
 80016b4:	400a      	ands	r2, r1
 80016b6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d108      	bne.n	80016d2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689a      	ldr	r2, [r3, #8]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2180      	movs	r1, #128	@ 0x80
 80016ca:	0209      	lsls	r1, r1, #8
 80016cc:	430a      	orrs	r2, r1
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	e007      	b.n	80016e2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	689a      	ldr	r2, [r3, #8]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2184      	movs	r1, #132	@ 0x84
 80016dc:	0209      	lsls	r1, r1, #8
 80016de:	430a      	orrs	r2, r1
 80016e0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d109      	bne.n	80016fe <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2180      	movs	r1, #128	@ 0x80
 80016f6:	0109      	lsls	r1, r1, #4
 80016f8:	430a      	orrs	r2, r1
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	e007      	b.n	800170e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4923      	ldr	r1, [pc, #140]	@ (8001798 <HAL_I2C_Init+0x144>)
 800170a:	400a      	ands	r2, r1
 800170c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	685a      	ldr	r2, [r3, #4]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4920      	ldr	r1, [pc, #128]	@ (800179c <HAL_I2C_Init+0x148>)
 800171a:	430a      	orrs	r2, r1
 800171c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	68da      	ldr	r2, [r3, #12]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	491a      	ldr	r1, [pc, #104]	@ (8001794 <HAL_I2C_Init+0x140>)
 800172a:	400a      	ands	r2, r1
 800172c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	691a      	ldr	r2, [r3, #16]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	431a      	orrs	r2, r3
 8001738:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	699b      	ldr	r3, [r3, #24]
 800173e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	430a      	orrs	r2, r1
 8001746:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	69d9      	ldr	r1, [r3, #28]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a1a      	ldr	r2, [r3, #32]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	430a      	orrs	r2, r1
 8001756:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2101      	movs	r1, #1
 8001764:	430a      	orrs	r2, r1
 8001766:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2241      	movs	r2, #65	@ 0x41
 8001772:	2120      	movs	r1, #32
 8001774:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2242      	movs	r2, #66	@ 0x42
 8001780:	2100      	movs	r1, #0
 8001782:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	0018      	movs	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	b002      	add	sp, #8
 800178c:	bd80      	pop	{r7, pc}
 800178e:	46c0      	nop			@ (mov r8, r8)
 8001790:	f0ffffff 	.word	0xf0ffffff
 8001794:	ffff7fff 	.word	0xffff7fff
 8001798:	fffff7ff 	.word	0xfffff7ff
 800179c:	02008000 	.word	0x02008000

080017a0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017a0:	b590      	push	{r4, r7, lr}
 80017a2:	b089      	sub	sp, #36	@ 0x24
 80017a4:	af02      	add	r7, sp, #8
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	000c      	movs	r4, r1
 80017aa:	0010      	movs	r0, r2
 80017ac:	0019      	movs	r1, r3
 80017ae:	230a      	movs	r3, #10
 80017b0:	18fb      	adds	r3, r7, r3
 80017b2:	1c22      	adds	r2, r4, #0
 80017b4:	801a      	strh	r2, [r3, #0]
 80017b6:	2308      	movs	r3, #8
 80017b8:	18fb      	adds	r3, r7, r3
 80017ba:	1c02      	adds	r2, r0, #0
 80017bc:	801a      	strh	r2, [r3, #0]
 80017be:	1dbb      	adds	r3, r7, #6
 80017c0:	1c0a      	adds	r2, r1, #0
 80017c2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2241      	movs	r2, #65	@ 0x41
 80017c8:	5c9b      	ldrb	r3, [r3, r2]
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	2b20      	cmp	r3, #32
 80017ce:	d000      	beq.n	80017d2 <HAL_I2C_Mem_Write+0x32>
 80017d0:	e10c      	b.n	80019ec <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80017d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d004      	beq.n	80017e2 <HAL_I2C_Mem_Write+0x42>
 80017d8:	232c      	movs	r3, #44	@ 0x2c
 80017da:	18fb      	adds	r3, r7, r3
 80017dc:	881b      	ldrh	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d105      	bne.n	80017ee <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2280      	movs	r2, #128	@ 0x80
 80017e6:	0092      	lsls	r2, r2, #2
 80017e8:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e0ff      	b.n	80019ee <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2240      	movs	r2, #64	@ 0x40
 80017f2:	5c9b      	ldrb	r3, [r3, r2]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d101      	bne.n	80017fc <HAL_I2C_Mem_Write+0x5c>
 80017f8:	2302      	movs	r3, #2
 80017fa:	e0f8      	b.n	80019ee <HAL_I2C_Mem_Write+0x24e>
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2240      	movs	r2, #64	@ 0x40
 8001800:	2101      	movs	r1, #1
 8001802:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001804:	f7ff fbcc 	bl	8000fa0 <HAL_GetTick>
 8001808:	0003      	movs	r3, r0
 800180a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800180c:	2380      	movs	r3, #128	@ 0x80
 800180e:	0219      	lsls	r1, r3, #8
 8001810:	68f8      	ldr	r0, [r7, #12]
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	2319      	movs	r3, #25
 8001818:	2201      	movs	r2, #1
 800181a:	f000 fb0b 	bl	8001e34 <I2C_WaitOnFlagUntilTimeout>
 800181e:	1e03      	subs	r3, r0, #0
 8001820:	d001      	beq.n	8001826 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e0e3      	b.n	80019ee <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2241      	movs	r2, #65	@ 0x41
 800182a:	2121      	movs	r1, #33	@ 0x21
 800182c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2242      	movs	r2, #66	@ 0x42
 8001832:	2140      	movs	r1, #64	@ 0x40
 8001834:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2200      	movs	r2, #0
 800183a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001840:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	222c      	movs	r2, #44	@ 0x2c
 8001846:	18ba      	adds	r2, r7, r2
 8001848:	8812      	ldrh	r2, [r2, #0]
 800184a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2200      	movs	r2, #0
 8001850:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001852:	1dbb      	adds	r3, r7, #6
 8001854:	881c      	ldrh	r4, [r3, #0]
 8001856:	2308      	movs	r3, #8
 8001858:	18fb      	adds	r3, r7, r3
 800185a:	881a      	ldrh	r2, [r3, #0]
 800185c:	230a      	movs	r3, #10
 800185e:	18fb      	adds	r3, r7, r3
 8001860:	8819      	ldrh	r1, [r3, #0]
 8001862:	68f8      	ldr	r0, [r7, #12]
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	9301      	str	r3, [sp, #4]
 8001868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	0023      	movs	r3, r4
 800186e:	f000 f9f9 	bl	8001c64 <I2C_RequestMemoryWrite>
 8001872:	1e03      	subs	r3, r0, #0
 8001874:	d005      	beq.n	8001882 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2240      	movs	r2, #64	@ 0x40
 800187a:	2100      	movs	r1, #0
 800187c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e0b5      	b.n	80019ee <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001886:	b29b      	uxth	r3, r3
 8001888:	2bff      	cmp	r3, #255	@ 0xff
 800188a:	d911      	bls.n	80018b0 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	22ff      	movs	r2, #255	@ 0xff
 8001890:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001896:	b2da      	uxtb	r2, r3
 8001898:	2380      	movs	r3, #128	@ 0x80
 800189a:	045c      	lsls	r4, r3, #17
 800189c:	230a      	movs	r3, #10
 800189e:	18fb      	adds	r3, r7, r3
 80018a0:	8819      	ldrh	r1, [r3, #0]
 80018a2:	68f8      	ldr	r0, [r7, #12]
 80018a4:	2300      	movs	r3, #0
 80018a6:	9300      	str	r3, [sp, #0]
 80018a8:	0023      	movs	r3, r4
 80018aa:	f000 fc9d 	bl	80021e8 <I2C_TransferConfig>
 80018ae:	e012      	b.n	80018d6 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	2380      	movs	r3, #128	@ 0x80
 80018c2:	049c      	lsls	r4, r3, #18
 80018c4:	230a      	movs	r3, #10
 80018c6:	18fb      	adds	r3, r7, r3
 80018c8:	8819      	ldrh	r1, [r3, #0]
 80018ca:	68f8      	ldr	r0, [r7, #12]
 80018cc:	2300      	movs	r3, #0
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	0023      	movs	r3, r4
 80018d2:	f000 fc89 	bl	80021e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	0018      	movs	r0, r3
 80018de:	f000 fb01 	bl	8001ee4 <I2C_WaitOnTXISFlagUntilTimeout>
 80018e2:	1e03      	subs	r3, r0, #0
 80018e4:	d001      	beq.n	80018ea <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e081      	b.n	80019ee <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ee:	781a      	ldrb	r2, [r3, #0]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018fa:	1c5a      	adds	r2, r3, #1
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001904:	b29b      	uxth	r3, r3
 8001906:	3b01      	subs	r3, #1
 8001908:	b29a      	uxth	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001912:	3b01      	subs	r3, #1
 8001914:	b29a      	uxth	r2, r3
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800191e:	b29b      	uxth	r3, r3
 8001920:	2b00      	cmp	r3, #0
 8001922:	d03a      	beq.n	800199a <HAL_I2C_Mem_Write+0x1fa>
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001928:	2b00      	cmp	r3, #0
 800192a:	d136      	bne.n	800199a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800192c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800192e:	68f8      	ldr	r0, [r7, #12]
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	0013      	movs	r3, r2
 8001936:	2200      	movs	r2, #0
 8001938:	2180      	movs	r1, #128	@ 0x80
 800193a:	f000 fa7b 	bl	8001e34 <I2C_WaitOnFlagUntilTimeout>
 800193e:	1e03      	subs	r3, r0, #0
 8001940:	d001      	beq.n	8001946 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e053      	b.n	80019ee <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800194a:	b29b      	uxth	r3, r3
 800194c:	2bff      	cmp	r3, #255	@ 0xff
 800194e:	d911      	bls.n	8001974 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	22ff      	movs	r2, #255	@ 0xff
 8001954:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800195a:	b2da      	uxtb	r2, r3
 800195c:	2380      	movs	r3, #128	@ 0x80
 800195e:	045c      	lsls	r4, r3, #17
 8001960:	230a      	movs	r3, #10
 8001962:	18fb      	adds	r3, r7, r3
 8001964:	8819      	ldrh	r1, [r3, #0]
 8001966:	68f8      	ldr	r0, [r7, #12]
 8001968:	2300      	movs	r3, #0
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	0023      	movs	r3, r4
 800196e:	f000 fc3b 	bl	80021e8 <I2C_TransferConfig>
 8001972:	e012      	b.n	800199a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001978:	b29a      	uxth	r2, r3
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001982:	b2da      	uxtb	r2, r3
 8001984:	2380      	movs	r3, #128	@ 0x80
 8001986:	049c      	lsls	r4, r3, #18
 8001988:	230a      	movs	r3, #10
 800198a:	18fb      	adds	r3, r7, r3
 800198c:	8819      	ldrh	r1, [r3, #0]
 800198e:	68f8      	ldr	r0, [r7, #12]
 8001990:	2300      	movs	r3, #0
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	0023      	movs	r3, r4
 8001996:	f000 fc27 	bl	80021e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800199e:	b29b      	uxth	r3, r3
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d198      	bne.n	80018d6 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019a4:	697a      	ldr	r2, [r7, #20]
 80019a6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	0018      	movs	r0, r3
 80019ac:	f000 fae0 	bl	8001f70 <I2C_WaitOnSTOPFlagUntilTimeout>
 80019b0:	1e03      	subs	r3, r0, #0
 80019b2:	d001      	beq.n	80019b8 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e01a      	b.n	80019ee <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2220      	movs	r2, #32
 80019be:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	685a      	ldr	r2, [r3, #4]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	490b      	ldr	r1, [pc, #44]	@ (80019f8 <HAL_I2C_Mem_Write+0x258>)
 80019cc:	400a      	ands	r2, r1
 80019ce:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2241      	movs	r2, #65	@ 0x41
 80019d4:	2120      	movs	r1, #32
 80019d6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2242      	movs	r2, #66	@ 0x42
 80019dc:	2100      	movs	r1, #0
 80019de:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2240      	movs	r2, #64	@ 0x40
 80019e4:	2100      	movs	r1, #0
 80019e6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80019e8:	2300      	movs	r3, #0
 80019ea:	e000      	b.n	80019ee <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80019ec:	2302      	movs	r3, #2
  }
}
 80019ee:	0018      	movs	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	b007      	add	sp, #28
 80019f4:	bd90      	pop	{r4, r7, pc}
 80019f6:	46c0      	nop			@ (mov r8, r8)
 80019f8:	fe00e800 	.word	0xfe00e800

080019fc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019fc:	b590      	push	{r4, r7, lr}
 80019fe:	b089      	sub	sp, #36	@ 0x24
 8001a00:	af02      	add	r7, sp, #8
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	000c      	movs	r4, r1
 8001a06:	0010      	movs	r0, r2
 8001a08:	0019      	movs	r1, r3
 8001a0a:	230a      	movs	r3, #10
 8001a0c:	18fb      	adds	r3, r7, r3
 8001a0e:	1c22      	adds	r2, r4, #0
 8001a10:	801a      	strh	r2, [r3, #0]
 8001a12:	2308      	movs	r3, #8
 8001a14:	18fb      	adds	r3, r7, r3
 8001a16:	1c02      	adds	r2, r0, #0
 8001a18:	801a      	strh	r2, [r3, #0]
 8001a1a:	1dbb      	adds	r3, r7, #6
 8001a1c:	1c0a      	adds	r2, r1, #0
 8001a1e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2241      	movs	r2, #65	@ 0x41
 8001a24:	5c9b      	ldrb	r3, [r3, r2]
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	2b20      	cmp	r3, #32
 8001a2a:	d000      	beq.n	8001a2e <HAL_I2C_Mem_Read+0x32>
 8001a2c:	e110      	b.n	8001c50 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d004      	beq.n	8001a3e <HAL_I2C_Mem_Read+0x42>
 8001a34:	232c      	movs	r3, #44	@ 0x2c
 8001a36:	18fb      	adds	r3, r7, r3
 8001a38:	881b      	ldrh	r3, [r3, #0]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d105      	bne.n	8001a4a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2280      	movs	r2, #128	@ 0x80
 8001a42:	0092      	lsls	r2, r2, #2
 8001a44:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e103      	b.n	8001c52 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2240      	movs	r2, #64	@ 0x40
 8001a4e:	5c9b      	ldrb	r3, [r3, r2]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d101      	bne.n	8001a58 <HAL_I2C_Mem_Read+0x5c>
 8001a54:	2302      	movs	r3, #2
 8001a56:	e0fc      	b.n	8001c52 <HAL_I2C_Mem_Read+0x256>
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2240      	movs	r2, #64	@ 0x40
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a60:	f7ff fa9e 	bl	8000fa0 <HAL_GetTick>
 8001a64:	0003      	movs	r3, r0
 8001a66:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a68:	2380      	movs	r3, #128	@ 0x80
 8001a6a:	0219      	lsls	r1, r3, #8
 8001a6c:	68f8      	ldr	r0, [r7, #12]
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	9300      	str	r3, [sp, #0]
 8001a72:	2319      	movs	r3, #25
 8001a74:	2201      	movs	r2, #1
 8001a76:	f000 f9dd 	bl	8001e34 <I2C_WaitOnFlagUntilTimeout>
 8001a7a:	1e03      	subs	r3, r0, #0
 8001a7c:	d001      	beq.n	8001a82 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e0e7      	b.n	8001c52 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2241      	movs	r2, #65	@ 0x41
 8001a86:	2122      	movs	r1, #34	@ 0x22
 8001a88:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2242      	movs	r2, #66	@ 0x42
 8001a8e:	2140      	movs	r1, #64	@ 0x40
 8001a90:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2200      	movs	r2, #0
 8001a96:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a9c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	222c      	movs	r2, #44	@ 0x2c
 8001aa2:	18ba      	adds	r2, r7, r2
 8001aa4:	8812      	ldrh	r2, [r2, #0]
 8001aa6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001aae:	1dbb      	adds	r3, r7, #6
 8001ab0:	881c      	ldrh	r4, [r3, #0]
 8001ab2:	2308      	movs	r3, #8
 8001ab4:	18fb      	adds	r3, r7, r3
 8001ab6:	881a      	ldrh	r2, [r3, #0]
 8001ab8:	230a      	movs	r3, #10
 8001aba:	18fb      	adds	r3, r7, r3
 8001abc:	8819      	ldrh	r1, [r3, #0]
 8001abe:	68f8      	ldr	r0, [r7, #12]
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	9301      	str	r3, [sp, #4]
 8001ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ac6:	9300      	str	r3, [sp, #0]
 8001ac8:	0023      	movs	r3, r4
 8001aca:	f000 f92f 	bl	8001d2c <I2C_RequestMemoryRead>
 8001ace:	1e03      	subs	r3, r0, #0
 8001ad0:	d005      	beq.n	8001ade <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2240      	movs	r2, #64	@ 0x40
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e0b9      	b.n	8001c52 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	2bff      	cmp	r3, #255	@ 0xff
 8001ae6:	d911      	bls.n	8001b0c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	22ff      	movs	r2, #255	@ 0xff
 8001aec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	2380      	movs	r3, #128	@ 0x80
 8001af6:	045c      	lsls	r4, r3, #17
 8001af8:	230a      	movs	r3, #10
 8001afa:	18fb      	adds	r3, r7, r3
 8001afc:	8819      	ldrh	r1, [r3, #0]
 8001afe:	68f8      	ldr	r0, [r7, #12]
 8001b00:	4b56      	ldr	r3, [pc, #344]	@ (8001c5c <HAL_I2C_Mem_Read+0x260>)
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	0023      	movs	r3, r4
 8001b06:	f000 fb6f 	bl	80021e8 <I2C_TransferConfig>
 8001b0a:	e012      	b.n	8001b32 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	2380      	movs	r3, #128	@ 0x80
 8001b1e:	049c      	lsls	r4, r3, #18
 8001b20:	230a      	movs	r3, #10
 8001b22:	18fb      	adds	r3, r7, r3
 8001b24:	8819      	ldrh	r1, [r3, #0]
 8001b26:	68f8      	ldr	r0, [r7, #12]
 8001b28:	4b4c      	ldr	r3, [pc, #304]	@ (8001c5c <HAL_I2C_Mem_Read+0x260>)
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	0023      	movs	r3, r4
 8001b2e:	f000 fb5b 	bl	80021e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001b32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	9300      	str	r3, [sp, #0]
 8001b3a:	0013      	movs	r3, r2
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	2104      	movs	r1, #4
 8001b40:	f000 f978 	bl	8001e34 <I2C_WaitOnFlagUntilTimeout>
 8001b44:	1e03      	subs	r3, r0, #0
 8001b46:	d001      	beq.n	8001b4c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e082      	b.n	8001c52 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b56:	b2d2      	uxtb	r2, r2
 8001b58:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b5e:	1c5a      	adds	r2, r3, #1
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	3b01      	subs	r3, #1
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d03a      	beq.n	8001bfe <HAL_I2C_Mem_Read+0x202>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d136      	bne.n	8001bfe <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b92:	68f8      	ldr	r0, [r7, #12]
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	9300      	str	r3, [sp, #0]
 8001b98:	0013      	movs	r3, r2
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	2180      	movs	r1, #128	@ 0x80
 8001b9e:	f000 f949 	bl	8001e34 <I2C_WaitOnFlagUntilTimeout>
 8001ba2:	1e03      	subs	r3, r0, #0
 8001ba4:	d001      	beq.n	8001baa <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e053      	b.n	8001c52 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	2bff      	cmp	r3, #255	@ 0xff
 8001bb2:	d911      	bls.n	8001bd8 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	22ff      	movs	r2, #255	@ 0xff
 8001bb8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	2380      	movs	r3, #128	@ 0x80
 8001bc2:	045c      	lsls	r4, r3, #17
 8001bc4:	230a      	movs	r3, #10
 8001bc6:	18fb      	adds	r3, r7, r3
 8001bc8:	8819      	ldrh	r1, [r3, #0]
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	2300      	movs	r3, #0
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	0023      	movs	r3, r4
 8001bd2:	f000 fb09 	bl	80021e8 <I2C_TransferConfig>
 8001bd6:	e012      	b.n	8001bfe <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	2380      	movs	r3, #128	@ 0x80
 8001bea:	049c      	lsls	r4, r3, #18
 8001bec:	230a      	movs	r3, #10
 8001bee:	18fb      	adds	r3, r7, r3
 8001bf0:	8819      	ldrh	r1, [r3, #0]
 8001bf2:	68f8      	ldr	r0, [r7, #12]
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	0023      	movs	r3, r4
 8001bfa:	f000 faf5 	bl	80021e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d194      	bne.n	8001b32 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c08:	697a      	ldr	r2, [r7, #20]
 8001c0a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	0018      	movs	r0, r3
 8001c10:	f000 f9ae 	bl	8001f70 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c14:	1e03      	subs	r3, r0, #0
 8001c16:	d001      	beq.n	8001c1c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e01a      	b.n	8001c52 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2220      	movs	r2, #32
 8001c22:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	685a      	ldr	r2, [r3, #4]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	490c      	ldr	r1, [pc, #48]	@ (8001c60 <HAL_I2C_Mem_Read+0x264>)
 8001c30:	400a      	ands	r2, r1
 8001c32:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2241      	movs	r2, #65	@ 0x41
 8001c38:	2120      	movs	r1, #32
 8001c3a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2242      	movs	r2, #66	@ 0x42
 8001c40:	2100      	movs	r1, #0
 8001c42:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2240      	movs	r2, #64	@ 0x40
 8001c48:	2100      	movs	r1, #0
 8001c4a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	e000      	b.n	8001c52 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001c50:	2302      	movs	r3, #2
  }
}
 8001c52:	0018      	movs	r0, r3
 8001c54:	46bd      	mov	sp, r7
 8001c56:	b007      	add	sp, #28
 8001c58:	bd90      	pop	{r4, r7, pc}
 8001c5a:	46c0      	nop			@ (mov r8, r8)
 8001c5c:	80002400 	.word	0x80002400
 8001c60:	fe00e800 	.word	0xfe00e800

08001c64 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001c64:	b5b0      	push	{r4, r5, r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af02      	add	r7, sp, #8
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	000c      	movs	r4, r1
 8001c6e:	0010      	movs	r0, r2
 8001c70:	0019      	movs	r1, r3
 8001c72:	250a      	movs	r5, #10
 8001c74:	197b      	adds	r3, r7, r5
 8001c76:	1c22      	adds	r2, r4, #0
 8001c78:	801a      	strh	r2, [r3, #0]
 8001c7a:	2308      	movs	r3, #8
 8001c7c:	18fb      	adds	r3, r7, r3
 8001c7e:	1c02      	adds	r2, r0, #0
 8001c80:	801a      	strh	r2, [r3, #0]
 8001c82:	1dbb      	adds	r3, r7, #6
 8001c84:	1c0a      	adds	r2, r1, #0
 8001c86:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001c88:	1dbb      	adds	r3, r7, #6
 8001c8a:	881b      	ldrh	r3, [r3, #0]
 8001c8c:	b2da      	uxtb	r2, r3
 8001c8e:	2380      	movs	r3, #128	@ 0x80
 8001c90:	045c      	lsls	r4, r3, #17
 8001c92:	197b      	adds	r3, r7, r5
 8001c94:	8819      	ldrh	r1, [r3, #0]
 8001c96:	68f8      	ldr	r0, [r7, #12]
 8001c98:	4b23      	ldr	r3, [pc, #140]	@ (8001d28 <I2C_RequestMemoryWrite+0xc4>)
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	0023      	movs	r3, r4
 8001c9e:	f000 faa3 	bl	80021e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ca4:	6a39      	ldr	r1, [r7, #32]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	0018      	movs	r0, r3
 8001caa:	f000 f91b 	bl	8001ee4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001cae:	1e03      	subs	r3, r0, #0
 8001cb0:	d001      	beq.n	8001cb6 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e033      	b.n	8001d1e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001cb6:	1dbb      	adds	r3, r7, #6
 8001cb8:	881b      	ldrh	r3, [r3, #0]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d107      	bne.n	8001cce <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001cbe:	2308      	movs	r3, #8
 8001cc0:	18fb      	adds	r3, r7, r3
 8001cc2:	881b      	ldrh	r3, [r3, #0]
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	629a      	str	r2, [r3, #40]	@ 0x28
 8001ccc:	e019      	b.n	8001d02 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001cce:	2308      	movs	r3, #8
 8001cd0:	18fb      	adds	r3, r7, r3
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	0a1b      	lsrs	r3, r3, #8
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ce0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ce2:	6a39      	ldr	r1, [r7, #32]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	f000 f8fc 	bl	8001ee4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001cec:	1e03      	subs	r3, r0, #0
 8001cee:	d001      	beq.n	8001cf4 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e014      	b.n	8001d1e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001cf4:	2308      	movs	r3, #8
 8001cf6:	18fb      	adds	r3, r7, r3
 8001cf8:	881b      	ldrh	r3, [r3, #0]
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001d02:	6a3a      	ldr	r2, [r7, #32]
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	0013      	movs	r3, r2
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	2180      	movs	r1, #128	@ 0x80
 8001d10:	f000 f890 	bl	8001e34 <I2C_WaitOnFlagUntilTimeout>
 8001d14:	1e03      	subs	r3, r0, #0
 8001d16:	d001      	beq.n	8001d1c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e000      	b.n	8001d1e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	0018      	movs	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	b004      	add	sp, #16
 8001d24:	bdb0      	pop	{r4, r5, r7, pc}
 8001d26:	46c0      	nop			@ (mov r8, r8)
 8001d28:	80002000 	.word	0x80002000

08001d2c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001d2c:	b5b0      	push	{r4, r5, r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af02      	add	r7, sp, #8
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	000c      	movs	r4, r1
 8001d36:	0010      	movs	r0, r2
 8001d38:	0019      	movs	r1, r3
 8001d3a:	250a      	movs	r5, #10
 8001d3c:	197b      	adds	r3, r7, r5
 8001d3e:	1c22      	adds	r2, r4, #0
 8001d40:	801a      	strh	r2, [r3, #0]
 8001d42:	2308      	movs	r3, #8
 8001d44:	18fb      	adds	r3, r7, r3
 8001d46:	1c02      	adds	r2, r0, #0
 8001d48:	801a      	strh	r2, [r3, #0]
 8001d4a:	1dbb      	adds	r3, r7, #6
 8001d4c:	1c0a      	adds	r2, r1, #0
 8001d4e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001d50:	1dbb      	adds	r3, r7, #6
 8001d52:	881b      	ldrh	r3, [r3, #0]
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	197b      	adds	r3, r7, r5
 8001d58:	8819      	ldrh	r1, [r3, #0]
 8001d5a:	68f8      	ldr	r0, [r7, #12]
 8001d5c:	4b23      	ldr	r3, [pc, #140]	@ (8001dec <I2C_RequestMemoryRead+0xc0>)
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	2300      	movs	r3, #0
 8001d62:	f000 fa41 	bl	80021e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d68:	6a39      	ldr	r1, [r7, #32]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	f000 f8b9 	bl	8001ee4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d72:	1e03      	subs	r3, r0, #0
 8001d74:	d001      	beq.n	8001d7a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e033      	b.n	8001de2 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d7a:	1dbb      	adds	r3, r7, #6
 8001d7c:	881b      	ldrh	r3, [r3, #0]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d107      	bne.n	8001d92 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d82:	2308      	movs	r3, #8
 8001d84:	18fb      	adds	r3, r7, r3
 8001d86:	881b      	ldrh	r3, [r3, #0]
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001d90:	e019      	b.n	8001dc6 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001d92:	2308      	movs	r3, #8
 8001d94:	18fb      	adds	r3, r7, r3
 8001d96:	881b      	ldrh	r3, [r3, #0]
 8001d98:	0a1b      	lsrs	r3, r3, #8
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001da4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001da6:	6a39      	ldr	r1, [r7, #32]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	0018      	movs	r0, r3
 8001dac:	f000 f89a 	bl	8001ee4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001db0:	1e03      	subs	r3, r0, #0
 8001db2:	d001      	beq.n	8001db8 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e014      	b.n	8001de2 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001db8:	2308      	movs	r3, #8
 8001dba:	18fb      	adds	r3, r7, r3
 8001dbc:	881b      	ldrh	r3, [r3, #0]
 8001dbe:	b2da      	uxtb	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001dc6:	6a3a      	ldr	r2, [r7, #32]
 8001dc8:	68f8      	ldr	r0, [r7, #12]
 8001dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	0013      	movs	r3, r2
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	2140      	movs	r1, #64	@ 0x40
 8001dd4:	f000 f82e 	bl	8001e34 <I2C_WaitOnFlagUntilTimeout>
 8001dd8:	1e03      	subs	r3, r0, #0
 8001dda:	d001      	beq.n	8001de0 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e000      	b.n	8001de2 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	0018      	movs	r0, r3
 8001de4:	46bd      	mov	sp, r7
 8001de6:	b004      	add	sp, #16
 8001de8:	bdb0      	pop	{r4, r5, r7, pc}
 8001dea:	46c0      	nop			@ (mov r8, r8)
 8001dec:	80002000 	.word	0x80002000

08001df0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	2202      	movs	r2, #2
 8001e00:	4013      	ands	r3, r2
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d103      	bne.n	8001e0e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	2201      	movs	r2, #1
 8001e16:	4013      	ands	r3, r2
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d007      	beq.n	8001e2c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	699a      	ldr	r2, [r3, #24]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2101      	movs	r1, #1
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	619a      	str	r2, [r3, #24]
  }
}
 8001e2c:	46c0      	nop			@ (mov r8, r8)
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	b002      	add	sp, #8
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	603b      	str	r3, [r7, #0]
 8001e40:	1dfb      	adds	r3, r7, #7
 8001e42:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e44:	e03a      	b.n	8001ebc <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	6839      	ldr	r1, [r7, #0]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	f000 f8d3 	bl	8001ff8 <I2C_IsErrorOccurred>
 8001e52:	1e03      	subs	r3, r0, #0
 8001e54:	d001      	beq.n	8001e5a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e040      	b.n	8001edc <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	d02d      	beq.n	8001ebc <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e60:	f7ff f89e 	bl	8000fa0 <HAL_GetTick>
 8001e64:	0002      	movs	r2, r0
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d302      	bcc.n	8001e76 <I2C_WaitOnFlagUntilTimeout+0x42>
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d122      	bne.n	8001ebc <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	68ba      	ldr	r2, [r7, #8]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	68ba      	ldr	r2, [r7, #8]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	425a      	negs	r2, r3
 8001e86:	4153      	adcs	r3, r2
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	001a      	movs	r2, r3
 8001e8c:	1dfb      	adds	r3, r7, #7
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d113      	bne.n	8001ebc <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e98:	2220      	movs	r2, #32
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2241      	movs	r2, #65	@ 0x41
 8001ea4:	2120      	movs	r1, #32
 8001ea6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2242      	movs	r2, #66	@ 0x42
 8001eac:	2100      	movs	r1, #0
 8001eae:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2240      	movs	r2, #64	@ 0x40
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e00f      	b.n	8001edc <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	68ba      	ldr	r2, [r7, #8]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	68ba      	ldr	r2, [r7, #8]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	425a      	negs	r2, r3
 8001ecc:	4153      	adcs	r3, r2
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	001a      	movs	r2, r3
 8001ed2:	1dfb      	adds	r3, r7, #7
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d0b5      	beq.n	8001e46 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	0018      	movs	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	b004      	add	sp, #16
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ef0:	e032      	b.n	8001f58 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	68b9      	ldr	r1, [r7, #8]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	0018      	movs	r0, r3
 8001efa:	f000 f87d 	bl	8001ff8 <I2C_IsErrorOccurred>
 8001efe:	1e03      	subs	r3, r0, #0
 8001f00:	d001      	beq.n	8001f06 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e030      	b.n	8001f68 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	d025      	beq.n	8001f58 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f0c:	f7ff f848 	bl	8000fa0 <HAL_GetTick>
 8001f10:	0002      	movs	r2, r0
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	68ba      	ldr	r2, [r7, #8]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d302      	bcc.n	8001f22 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d11a      	bne.n	8001f58 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	2202      	movs	r2, #2
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d013      	beq.n	8001f58 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f34:	2220      	movs	r2, #32
 8001f36:	431a      	orrs	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2241      	movs	r2, #65	@ 0x41
 8001f40:	2120      	movs	r1, #32
 8001f42:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2242      	movs	r2, #66	@ 0x42
 8001f48:	2100      	movs	r1, #0
 8001f4a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2240      	movs	r2, #64	@ 0x40
 8001f50:	2100      	movs	r1, #0
 8001f52:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e007      	b.n	8001f68 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	2202      	movs	r2, #2
 8001f60:	4013      	ands	r3, r2
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d1c5      	bne.n	8001ef2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	0018      	movs	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	b004      	add	sp, #16
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f7c:	e02f      	b.n	8001fde <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	68b9      	ldr	r1, [r7, #8]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	0018      	movs	r0, r3
 8001f86:	f000 f837 	bl	8001ff8 <I2C_IsErrorOccurred>
 8001f8a:	1e03      	subs	r3, r0, #0
 8001f8c:	d001      	beq.n	8001f92 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e02d      	b.n	8001fee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f92:	f7ff f805 	bl	8000fa0 <HAL_GetTick>
 8001f96:	0002      	movs	r2, r0
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	68ba      	ldr	r2, [r7, #8]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d302      	bcc.n	8001fa8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d11a      	bne.n	8001fde <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	2220      	movs	r2, #32
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	2b20      	cmp	r3, #32
 8001fb4:	d013      	beq.n	8001fde <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fba:	2220      	movs	r2, #32
 8001fbc:	431a      	orrs	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2241      	movs	r2, #65	@ 0x41
 8001fc6:	2120      	movs	r1, #32
 8001fc8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2242      	movs	r2, #66	@ 0x42
 8001fce:	2100      	movs	r1, #0
 8001fd0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2240      	movs	r2, #64	@ 0x40
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e007      	b.n	8001fee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	2220      	movs	r2, #32
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	2b20      	cmp	r3, #32
 8001fea:	d1c8      	bne.n	8001f7e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	0018      	movs	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	b004      	add	sp, #16
 8001ff4:	bd80      	pop	{r7, pc}
	...

08001ff8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08a      	sub	sp, #40	@ 0x28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002004:	2327      	movs	r3, #39	@ 0x27
 8002006:	18fb      	adds	r3, r7, r3
 8002008:	2200      	movs	r2, #0
 800200a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002014:	2300      	movs	r3, #0
 8002016:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	2210      	movs	r2, #16
 8002020:	4013      	ands	r3, r2
 8002022:	d100      	bne.n	8002026 <I2C_IsErrorOccurred+0x2e>
 8002024:	e079      	b.n	800211a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2210      	movs	r2, #16
 800202c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800202e:	e057      	b.n	80020e0 <I2C_IsErrorOccurred+0xe8>
 8002030:	2227      	movs	r2, #39	@ 0x27
 8002032:	18bb      	adds	r3, r7, r2
 8002034:	18ba      	adds	r2, r7, r2
 8002036:	7812      	ldrb	r2, [r2, #0]
 8002038:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	3301      	adds	r3, #1
 800203e:	d04f      	beq.n	80020e0 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002040:	f7fe ffae 	bl	8000fa0 <HAL_GetTick>
 8002044:	0002      	movs	r2, r0
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	68ba      	ldr	r2, [r7, #8]
 800204c:	429a      	cmp	r2, r3
 800204e:	d302      	bcc.n	8002056 <I2C_IsErrorOccurred+0x5e>
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d144      	bne.n	80020e0 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	2380      	movs	r3, #128	@ 0x80
 800205e:	01db      	lsls	r3, r3, #7
 8002060:	4013      	ands	r3, r2
 8002062:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002064:	2013      	movs	r0, #19
 8002066:	183b      	adds	r3, r7, r0
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	2142      	movs	r1, #66	@ 0x42
 800206c:	5c52      	ldrb	r2, [r2, r1]
 800206e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	699a      	ldr	r2, [r3, #24]
 8002076:	2380      	movs	r3, #128	@ 0x80
 8002078:	021b      	lsls	r3, r3, #8
 800207a:	401a      	ands	r2, r3
 800207c:	2380      	movs	r3, #128	@ 0x80
 800207e:	021b      	lsls	r3, r3, #8
 8002080:	429a      	cmp	r2, r3
 8002082:	d126      	bne.n	80020d2 <I2C_IsErrorOccurred+0xda>
 8002084:	697a      	ldr	r2, [r7, #20]
 8002086:	2380      	movs	r3, #128	@ 0x80
 8002088:	01db      	lsls	r3, r3, #7
 800208a:	429a      	cmp	r2, r3
 800208c:	d021      	beq.n	80020d2 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800208e:	183b      	adds	r3, r7, r0
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	2b20      	cmp	r3, #32
 8002094:	d01d      	beq.n	80020d2 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2180      	movs	r1, #128	@ 0x80
 80020a2:	01c9      	lsls	r1, r1, #7
 80020a4:	430a      	orrs	r2, r1
 80020a6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80020a8:	f7fe ff7a 	bl	8000fa0 <HAL_GetTick>
 80020ac:	0003      	movs	r3, r0
 80020ae:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020b0:	e00f      	b.n	80020d2 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80020b2:	f7fe ff75 	bl	8000fa0 <HAL_GetTick>
 80020b6:	0002      	movs	r2, r0
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b19      	cmp	r3, #25
 80020be:	d908      	bls.n	80020d2 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80020c0:	6a3b      	ldr	r3, [r7, #32]
 80020c2:	2220      	movs	r2, #32
 80020c4:	4313      	orrs	r3, r2
 80020c6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80020c8:	2327      	movs	r3, #39	@ 0x27
 80020ca:	18fb      	adds	r3, r7, r3
 80020cc:	2201      	movs	r2, #1
 80020ce:	701a      	strb	r2, [r3, #0]

              break;
 80020d0:	e006      	b.n	80020e0 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	2220      	movs	r2, #32
 80020da:	4013      	ands	r3, r2
 80020dc:	2b20      	cmp	r3, #32
 80020de:	d1e8      	bne.n	80020b2 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	2220      	movs	r2, #32
 80020e8:	4013      	ands	r3, r2
 80020ea:	2b20      	cmp	r3, #32
 80020ec:	d004      	beq.n	80020f8 <I2C_IsErrorOccurred+0x100>
 80020ee:	2327      	movs	r3, #39	@ 0x27
 80020f0:	18fb      	adds	r3, r7, r3
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d09b      	beq.n	8002030 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80020f8:	2327      	movs	r3, #39	@ 0x27
 80020fa:	18fb      	adds	r3, r7, r3
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d103      	bne.n	800210a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2220      	movs	r2, #32
 8002108:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800210a:	6a3b      	ldr	r3, [r7, #32]
 800210c:	2204      	movs	r2, #4
 800210e:	4313      	orrs	r3, r2
 8002110:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002112:	2327      	movs	r3, #39	@ 0x27
 8002114:	18fb      	adds	r3, r7, r3
 8002116:	2201      	movs	r2, #1
 8002118:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	2380      	movs	r3, #128	@ 0x80
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	4013      	ands	r3, r2
 800212a:	d00c      	beq.n	8002146 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800212c:	6a3b      	ldr	r3, [r7, #32]
 800212e:	2201      	movs	r2, #1
 8002130:	4313      	orrs	r3, r2
 8002132:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2280      	movs	r2, #128	@ 0x80
 800213a:	0052      	lsls	r2, r2, #1
 800213c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800213e:	2327      	movs	r3, #39	@ 0x27
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	2201      	movs	r2, #1
 8002144:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	2380      	movs	r3, #128	@ 0x80
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	4013      	ands	r3, r2
 800214e:	d00c      	beq.n	800216a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002150:	6a3b      	ldr	r3, [r7, #32]
 8002152:	2208      	movs	r2, #8
 8002154:	4313      	orrs	r3, r2
 8002156:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2280      	movs	r2, #128	@ 0x80
 800215e:	00d2      	lsls	r2, r2, #3
 8002160:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002162:	2327      	movs	r3, #39	@ 0x27
 8002164:	18fb      	adds	r3, r7, r3
 8002166:	2201      	movs	r2, #1
 8002168:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	2380      	movs	r3, #128	@ 0x80
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4013      	ands	r3, r2
 8002172:	d00c      	beq.n	800218e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002174:	6a3b      	ldr	r3, [r7, #32]
 8002176:	2202      	movs	r2, #2
 8002178:	4313      	orrs	r3, r2
 800217a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2280      	movs	r2, #128	@ 0x80
 8002182:	0092      	lsls	r2, r2, #2
 8002184:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002186:	2327      	movs	r3, #39	@ 0x27
 8002188:	18fb      	adds	r3, r7, r3
 800218a:	2201      	movs	r2, #1
 800218c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800218e:	2327      	movs	r3, #39	@ 0x27
 8002190:	18fb      	adds	r3, r7, r3
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d01d      	beq.n	80021d4 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	0018      	movs	r0, r3
 800219c:	f7ff fe28 	bl	8001df0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	490e      	ldr	r1, [pc, #56]	@ (80021e4 <I2C_IsErrorOccurred+0x1ec>)
 80021ac:	400a      	ands	r2, r1
 80021ae:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80021b4:	6a3b      	ldr	r3, [r7, #32]
 80021b6:	431a      	orrs	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2241      	movs	r2, #65	@ 0x41
 80021c0:	2120      	movs	r1, #32
 80021c2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2242      	movs	r2, #66	@ 0x42
 80021c8:	2100      	movs	r1, #0
 80021ca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2240      	movs	r2, #64	@ 0x40
 80021d0:	2100      	movs	r1, #0
 80021d2:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80021d4:	2327      	movs	r3, #39	@ 0x27
 80021d6:	18fb      	adds	r3, r7, r3
 80021d8:	781b      	ldrb	r3, [r3, #0]
}
 80021da:	0018      	movs	r0, r3
 80021dc:	46bd      	mov	sp, r7
 80021de:	b00a      	add	sp, #40	@ 0x28
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	46c0      	nop			@ (mov r8, r8)
 80021e4:	fe00e800 	.word	0xfe00e800

080021e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80021e8:	b590      	push	{r4, r7, lr}
 80021ea:	b087      	sub	sp, #28
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	0008      	movs	r0, r1
 80021f2:	0011      	movs	r1, r2
 80021f4:	607b      	str	r3, [r7, #4]
 80021f6:	240a      	movs	r4, #10
 80021f8:	193b      	adds	r3, r7, r4
 80021fa:	1c02      	adds	r2, r0, #0
 80021fc:	801a      	strh	r2, [r3, #0]
 80021fe:	2009      	movs	r0, #9
 8002200:	183b      	adds	r3, r7, r0
 8002202:	1c0a      	adds	r2, r1, #0
 8002204:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002206:	193b      	adds	r3, r7, r4
 8002208:	881b      	ldrh	r3, [r3, #0]
 800220a:	059b      	lsls	r3, r3, #22
 800220c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800220e:	183b      	adds	r3, r7, r0
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	0419      	lsls	r1, r3, #16
 8002214:	23ff      	movs	r3, #255	@ 0xff
 8002216:	041b      	lsls	r3, r3, #16
 8002218:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800221a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002222:	4313      	orrs	r3, r2
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	085b      	lsrs	r3, r3, #1
 8002228:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002232:	0d51      	lsrs	r1, r2, #21
 8002234:	2280      	movs	r2, #128	@ 0x80
 8002236:	00d2      	lsls	r2, r2, #3
 8002238:	400a      	ands	r2, r1
 800223a:	4907      	ldr	r1, [pc, #28]	@ (8002258 <I2C_TransferConfig+0x70>)
 800223c:	430a      	orrs	r2, r1
 800223e:	43d2      	mvns	r2, r2
 8002240:	401a      	ands	r2, r3
 8002242:	0011      	movs	r1, r2
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	430a      	orrs	r2, r1
 800224c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800224e:	46c0      	nop			@ (mov r8, r8)
 8002250:	46bd      	mov	sp, r7
 8002252:	b007      	add	sp, #28
 8002254:	bd90      	pop	{r4, r7, pc}
 8002256:	46c0      	nop			@ (mov r8, r8)
 8002258:	03ff63ff 	.word	0x03ff63ff

0800225c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2241      	movs	r2, #65	@ 0x41
 800226a:	5c9b      	ldrb	r3, [r3, r2]
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b20      	cmp	r3, #32
 8002270:	d138      	bne.n	80022e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2240      	movs	r2, #64	@ 0x40
 8002276:	5c9b      	ldrb	r3, [r3, r2]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d101      	bne.n	8002280 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800227c:	2302      	movs	r3, #2
 800227e:	e032      	b.n	80022e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2240      	movs	r2, #64	@ 0x40
 8002284:	2101      	movs	r1, #1
 8002286:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2241      	movs	r2, #65	@ 0x41
 800228c:	2124      	movs	r1, #36	@ 0x24
 800228e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2101      	movs	r1, #1
 800229c:	438a      	bics	r2, r1
 800229e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4911      	ldr	r1, [pc, #68]	@ (80022f0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80022ac:	400a      	ands	r2, r1
 80022ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6819      	ldr	r1, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	430a      	orrs	r2, r1
 80022be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2101      	movs	r1, #1
 80022cc:	430a      	orrs	r2, r1
 80022ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2241      	movs	r2, #65	@ 0x41
 80022d4:	2120      	movs	r1, #32
 80022d6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2240      	movs	r2, #64	@ 0x40
 80022dc:	2100      	movs	r1, #0
 80022de:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80022e0:	2300      	movs	r3, #0
 80022e2:	e000      	b.n	80022e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80022e4:	2302      	movs	r3, #2
  }
}
 80022e6:	0018      	movs	r0, r3
 80022e8:	46bd      	mov	sp, r7
 80022ea:	b002      	add	sp, #8
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	46c0      	nop			@ (mov r8, r8)
 80022f0:	ffffefff 	.word	0xffffefff

080022f4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2241      	movs	r2, #65	@ 0x41
 8002302:	5c9b      	ldrb	r3, [r3, r2]
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b20      	cmp	r3, #32
 8002308:	d139      	bne.n	800237e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2240      	movs	r2, #64	@ 0x40
 800230e:	5c9b      	ldrb	r3, [r3, r2]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d101      	bne.n	8002318 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002314:	2302      	movs	r3, #2
 8002316:	e033      	b.n	8002380 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2240      	movs	r2, #64	@ 0x40
 800231c:	2101      	movs	r1, #1
 800231e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2241      	movs	r2, #65	@ 0x41
 8002324:	2124      	movs	r1, #36	@ 0x24
 8002326:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2101      	movs	r1, #1
 8002334:	438a      	bics	r2, r1
 8002336:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	4a11      	ldr	r2, [pc, #68]	@ (8002388 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002344:	4013      	ands	r3, r2
 8002346:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	021b      	lsls	r3, r3, #8
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	4313      	orrs	r3, r2
 8002350:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2101      	movs	r1, #1
 8002366:	430a      	orrs	r2, r1
 8002368:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2241      	movs	r2, #65	@ 0x41
 800236e:	2120      	movs	r1, #32
 8002370:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2240      	movs	r2, #64	@ 0x40
 8002376:	2100      	movs	r1, #0
 8002378:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800237a:	2300      	movs	r3, #0
 800237c:	e000      	b.n	8002380 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800237e:	2302      	movs	r3, #2
  }
}
 8002380:	0018      	movs	r0, r3
 8002382:	46bd      	mov	sp, r7
 8002384:	b004      	add	sp, #16
 8002386:	bd80      	pop	{r7, pc}
 8002388:	fffff0ff 	.word	0xfffff0ff

0800238c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002394:	4b19      	ldr	r3, [pc, #100]	@ (80023fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a19      	ldr	r2, [pc, #100]	@ (8002400 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800239a:	4013      	ands	r3, r2
 800239c:	0019      	movs	r1, r3
 800239e:	4b17      	ldr	r3, [pc, #92]	@ (80023fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	430a      	orrs	r2, r1
 80023a4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	2380      	movs	r3, #128	@ 0x80
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d11f      	bne.n	80023f0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80023b0:	4b14      	ldr	r3, [pc, #80]	@ (8002404 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	0013      	movs	r3, r2
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	189b      	adds	r3, r3, r2
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	4912      	ldr	r1, [pc, #72]	@ (8002408 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80023be:	0018      	movs	r0, r3
 80023c0:	f7fd feb0 	bl	8000124 <__udivsi3>
 80023c4:	0003      	movs	r3, r0
 80023c6:	3301      	adds	r3, #1
 80023c8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023ca:	e008      	b.n	80023de <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d003      	beq.n	80023da <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	3b01      	subs	r3, #1
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	e001      	b.n	80023de <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e009      	b.n	80023f2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023de:	4b07      	ldr	r3, [pc, #28]	@ (80023fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80023e0:	695a      	ldr	r2, [r3, #20]
 80023e2:	2380      	movs	r3, #128	@ 0x80
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	401a      	ands	r2, r3
 80023e8:	2380      	movs	r3, #128	@ 0x80
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d0ed      	beq.n	80023cc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	0018      	movs	r0, r3
 80023f4:	46bd      	mov	sp, r7
 80023f6:	b004      	add	sp, #16
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	46c0      	nop			@ (mov r8, r8)
 80023fc:	40007000 	.word	0x40007000
 8002400:	fffff9ff 	.word	0xfffff9ff
 8002404:	2000001c 	.word	0x2000001c
 8002408:	000f4240 	.word	0x000f4240

0800240c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002410:	4b03      	ldr	r3, [pc, #12]	@ (8002420 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	23e0      	movs	r3, #224	@ 0xe0
 8002416:	01db      	lsls	r3, r3, #7
 8002418:	4013      	ands	r3, r2
}
 800241a:	0018      	movs	r0, r3
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40021000 	.word	0x40021000

08002424 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b088      	sub	sp, #32
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e2f3      	b.n	8002a1e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2201      	movs	r2, #1
 800243c:	4013      	ands	r3, r2
 800243e:	d100      	bne.n	8002442 <HAL_RCC_OscConfig+0x1e>
 8002440:	e07c      	b.n	800253c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002442:	4bc3      	ldr	r3, [pc, #780]	@ (8002750 <HAL_RCC_OscConfig+0x32c>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	2238      	movs	r2, #56	@ 0x38
 8002448:	4013      	ands	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800244c:	4bc0      	ldr	r3, [pc, #768]	@ (8002750 <HAL_RCC_OscConfig+0x32c>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	2203      	movs	r2, #3
 8002452:	4013      	ands	r3, r2
 8002454:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	2b10      	cmp	r3, #16
 800245a:	d102      	bne.n	8002462 <HAL_RCC_OscConfig+0x3e>
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	2b03      	cmp	r3, #3
 8002460:	d002      	beq.n	8002468 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	2b08      	cmp	r3, #8
 8002466:	d10b      	bne.n	8002480 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002468:	4bb9      	ldr	r3, [pc, #740]	@ (8002750 <HAL_RCC_OscConfig+0x32c>)
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	2380      	movs	r3, #128	@ 0x80
 800246e:	029b      	lsls	r3, r3, #10
 8002470:	4013      	ands	r3, r2
 8002472:	d062      	beq.n	800253a <HAL_RCC_OscConfig+0x116>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d15e      	bne.n	800253a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e2ce      	b.n	8002a1e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685a      	ldr	r2, [r3, #4]
 8002484:	2380      	movs	r3, #128	@ 0x80
 8002486:	025b      	lsls	r3, r3, #9
 8002488:	429a      	cmp	r2, r3
 800248a:	d107      	bne.n	800249c <HAL_RCC_OscConfig+0x78>
 800248c:	4bb0      	ldr	r3, [pc, #704]	@ (8002750 <HAL_RCC_OscConfig+0x32c>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	4baf      	ldr	r3, [pc, #700]	@ (8002750 <HAL_RCC_OscConfig+0x32c>)
 8002492:	2180      	movs	r1, #128	@ 0x80
 8002494:	0249      	lsls	r1, r1, #9
 8002496:	430a      	orrs	r2, r1
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	e020      	b.n	80024de <HAL_RCC_OscConfig+0xba>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685a      	ldr	r2, [r3, #4]
 80024a0:	23a0      	movs	r3, #160	@ 0xa0
 80024a2:	02db      	lsls	r3, r3, #11
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d10e      	bne.n	80024c6 <HAL_RCC_OscConfig+0xa2>
 80024a8:	4ba9      	ldr	r3, [pc, #676]	@ (8002750 <HAL_RCC_OscConfig+0x32c>)
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	4ba8      	ldr	r3, [pc, #672]	@ (8002750 <HAL_RCC_OscConfig+0x32c>)
 80024ae:	2180      	movs	r1, #128	@ 0x80
 80024b0:	02c9      	lsls	r1, r1, #11
 80024b2:	430a      	orrs	r2, r1
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	4ba6      	ldr	r3, [pc, #664]	@ (8002750 <HAL_RCC_OscConfig+0x32c>)
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	4ba5      	ldr	r3, [pc, #660]	@ (8002750 <HAL_RCC_OscConfig+0x32c>)
 80024bc:	2180      	movs	r1, #128	@ 0x80
 80024be:	0249      	lsls	r1, r1, #9
 80024c0:	430a      	orrs	r2, r1
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	e00b      	b.n	80024de <HAL_RCC_OscConfig+0xba>
 80024c6:	4ba2      	ldr	r3, [pc, #648]	@ (8002750 <HAL_RCC_OscConfig+0x32c>)
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	4ba1      	ldr	r3, [pc, #644]	@ (8002750 <HAL_RCC_OscConfig+0x32c>)
 80024cc:	49a1      	ldr	r1, [pc, #644]	@ (8002754 <HAL_RCC_OscConfig+0x330>)
 80024ce:	400a      	ands	r2, r1
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	4b9f      	ldr	r3, [pc, #636]	@ (8002750 <HAL_RCC_OscConfig+0x32c>)
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	4b9e      	ldr	r3, [pc, #632]	@ (8002750 <HAL_RCC_OscConfig+0x32c>)
 80024d8:	499f      	ldr	r1, [pc, #636]	@ (8002758 <HAL_RCC_OscConfig+0x334>)
 80024da:	400a      	ands	r2, r1
 80024dc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d014      	beq.n	8002510 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e6:	f7fe fd5b 	bl	8000fa0 <HAL_GetTick>
 80024ea:	0003      	movs	r3, r0
 80024ec:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024f0:	f7fe fd56 	bl	8000fa0 <HAL_GetTick>
 80024f4:	0002      	movs	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b64      	cmp	r3, #100	@ 0x64
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e28d      	b.n	8002a1e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002502:	4b93      	ldr	r3, [pc, #588]	@ (8002750 <HAL_RCC_OscConfig+0x32c>)
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	2380      	movs	r3, #128	@ 0x80
 8002508:	029b      	lsls	r3, r3, #10
 800250a:	4013      	ands	r3, r2
 800250c:	d0f0      	beq.n	80024f0 <HAL_RCC_OscConfig+0xcc>
 800250e:	e015      	b.n	800253c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002510:	f7fe fd46 	bl	8000fa0 <HAL_GetTick>
 8002514:	0003      	movs	r3, r0
 8002516:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002518:	e008      	b.n	800252c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800251a:	f7fe fd41 	bl	8000fa0 <HAL_GetTick>
 800251e:	0002      	movs	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b64      	cmp	r3, #100	@ 0x64
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e278      	b.n	8002a1e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800252c:	4b88      	ldr	r3, [pc, #544]	@ (8002750 <HAL_RCC_OscConfig+0x32c>)
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	2380      	movs	r3, #128	@ 0x80
 8002532:	029b      	lsls	r3, r3, #10
 8002534:	4013      	ands	r3, r2
 8002536:	d1f0      	bne.n	800251a <HAL_RCC_OscConfig+0xf6>
 8002538:	e000      	b.n	800253c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800253a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2202      	movs	r2, #2
 8002542:	4013      	ands	r3, r2
 8002544:	d100      	bne.n	8002548 <HAL_RCC_OscConfig+0x124>
 8002546:	e099      	b.n	800267c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002548:	4b81      	ldr	r3, [pc, #516]	@ (8002750 <HAL_RCC_OscConfig+0x32c>)
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	2238      	movs	r2, #56	@ 0x38
 800254e:	4013      	ands	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002552:	4b7f      	ldr	r3, [pc, #508]	@ (8002750 <HAL_RCC_OscConfig+0x32c>)
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	2203      	movs	r2, #3
 8002558:	4013      	ands	r3, r2
 800255a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	2b10      	cmp	r3, #16
 8002560:	d102      	bne.n	8002568 <HAL_RCC_OscConfig+0x144>
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	2b02      	cmp	r3, #2
 8002566:	d002      	beq.n	800256e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d135      	bne.n	80025da <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800256e:	4b78      	ldr	r3, [pc, #480]	@ (8002750 <HAL_RCC_OscConfig+0x32c>)
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	2380      	movs	r3, #128	@ 0x80
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	4013      	ands	r3, r2
 8002578:	d005      	beq.n	8002586 <HAL_RCC_OscConfig+0x162>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e24b      	b.n	8002a1e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002586:	4b72      	ldr	r3, [pc, #456]	@ (8002750 <HAL_RCC_OscConfig+0x32c>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	4a74      	ldr	r2, [pc, #464]	@ (800275c <HAL_RCC_OscConfig+0x338>)
 800258c:	4013      	ands	r3, r2
 800258e:	0019      	movs	r1, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	021a      	lsls	r2, r3, #8
 8002596:	4b6e      	ldr	r3, [pc, #440]	@ (8002750 <HAL_RCC_OscConfig+0x32c>)
 8002598:	430a      	orrs	r2, r1
 800259a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d112      	bne.n	80025c8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80025a2:	4b6b      	ldr	r3, [pc, #428]	@ (8002750 <HAL_RCC_OscConfig+0x32c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a6e      	ldr	r2, [pc, #440]	@ (8002760 <HAL_RCC_OscConfig+0x33c>)
 80025a8:	4013      	ands	r3, r2
 80025aa:	0019      	movs	r1, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	691a      	ldr	r2, [r3, #16]
 80025b0:	4b67      	ldr	r3, [pc, #412]	@ (8002750 <HAL_RCC_OscConfig+0x32c>)
 80025b2:	430a      	orrs	r2, r1
 80025b4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80025b6:	4b66      	ldr	r3, [pc, #408]	@ (8002750 <HAL_RCC_OscConfig+0x32c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	0adb      	lsrs	r3, r3, #11
 80025bc:	2207      	movs	r2, #7
 80025be:	4013      	ands	r3, r2
 80025c0:	4a68      	ldr	r2, [pc, #416]	@ (8002764 <HAL_RCC_OscConfig+0x340>)
 80025c2:	40da      	lsrs	r2, r3
 80025c4:	4b68      	ldr	r3, [pc, #416]	@ (8002768 <HAL_RCC_OscConfig+0x344>)
 80025c6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80025c8:	4b68      	ldr	r3, [pc, #416]	@ (800276c <HAL_RCC_OscConfig+0x348>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	0018      	movs	r0, r3
 80025ce:	f7fe fc8b 	bl	8000ee8 <HAL_InitTick>
 80025d2:	1e03      	subs	r3, r0, #0
 80025d4:	d051      	beq.n	800267a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e221      	b.n	8002a1e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d030      	beq.n	8002644 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80025e2:	4b5b      	ldr	r3, [pc, #364]	@ (8002750 <HAL_RCC_OscConfig+0x32c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a5e      	ldr	r2, [pc, #376]	@ (8002760 <HAL_RCC_OscConfig+0x33c>)
 80025e8:	4013      	ands	r3, r2
 80025ea:	0019      	movs	r1, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	691a      	ldr	r2, [r3, #16]
 80025f0:	4b57      	ldr	r3, [pc, #348]	@ (8002750 <HAL_RCC_OscConfig+0x32c>)
 80025f2:	430a      	orrs	r2, r1
 80025f4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80025f6:	4b56      	ldr	r3, [pc, #344]	@ (8002750 <HAL_RCC_OscConfig+0x32c>)
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	4b55      	ldr	r3, [pc, #340]	@ (8002750 <HAL_RCC_OscConfig+0x32c>)
 80025fc:	2180      	movs	r1, #128	@ 0x80
 80025fe:	0049      	lsls	r1, r1, #1
 8002600:	430a      	orrs	r2, r1
 8002602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002604:	f7fe fccc 	bl	8000fa0 <HAL_GetTick>
 8002608:	0003      	movs	r3, r0
 800260a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800260c:	e008      	b.n	8002620 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800260e:	f7fe fcc7 	bl	8000fa0 <HAL_GetTick>
 8002612:	0002      	movs	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e1fe      	b.n	8002a1e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002620:	4b4b      	ldr	r3, [pc, #300]	@ (8002750 <HAL_RCC_OscConfig+0x32c>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	2380      	movs	r3, #128	@ 0x80
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	4013      	ands	r3, r2
 800262a:	d0f0      	beq.n	800260e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800262c:	4b48      	ldr	r3, [pc, #288]	@ (8002750 <HAL_RCC_OscConfig+0x32c>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	4a4a      	ldr	r2, [pc, #296]	@ (800275c <HAL_RCC_OscConfig+0x338>)
 8002632:	4013      	ands	r3, r2
 8002634:	0019      	movs	r1, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	021a      	lsls	r2, r3, #8
 800263c:	4b44      	ldr	r3, [pc, #272]	@ (8002750 <HAL_RCC_OscConfig+0x32c>)
 800263e:	430a      	orrs	r2, r1
 8002640:	605a      	str	r2, [r3, #4]
 8002642:	e01b      	b.n	800267c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002644:	4b42      	ldr	r3, [pc, #264]	@ (8002750 <HAL_RCC_OscConfig+0x32c>)
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	4b41      	ldr	r3, [pc, #260]	@ (8002750 <HAL_RCC_OscConfig+0x32c>)
 800264a:	4949      	ldr	r1, [pc, #292]	@ (8002770 <HAL_RCC_OscConfig+0x34c>)
 800264c:	400a      	ands	r2, r1
 800264e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002650:	f7fe fca6 	bl	8000fa0 <HAL_GetTick>
 8002654:	0003      	movs	r3, r0
 8002656:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002658:	e008      	b.n	800266c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800265a:	f7fe fca1 	bl	8000fa0 <HAL_GetTick>
 800265e:	0002      	movs	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e1d8      	b.n	8002a1e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800266c:	4b38      	ldr	r3, [pc, #224]	@ (8002750 <HAL_RCC_OscConfig+0x32c>)
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	2380      	movs	r3, #128	@ 0x80
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	4013      	ands	r3, r2
 8002676:	d1f0      	bne.n	800265a <HAL_RCC_OscConfig+0x236>
 8002678:	e000      	b.n	800267c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800267a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2208      	movs	r2, #8
 8002682:	4013      	ands	r3, r2
 8002684:	d047      	beq.n	8002716 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002686:	4b32      	ldr	r3, [pc, #200]	@ (8002750 <HAL_RCC_OscConfig+0x32c>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	2238      	movs	r2, #56	@ 0x38
 800268c:	4013      	ands	r3, r2
 800268e:	2b18      	cmp	r3, #24
 8002690:	d10a      	bne.n	80026a8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002692:	4b2f      	ldr	r3, [pc, #188]	@ (8002750 <HAL_RCC_OscConfig+0x32c>)
 8002694:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002696:	2202      	movs	r2, #2
 8002698:	4013      	ands	r3, r2
 800269a:	d03c      	beq.n	8002716 <HAL_RCC_OscConfig+0x2f2>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d138      	bne.n	8002716 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e1ba      	b.n	8002a1e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d019      	beq.n	80026e4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80026b0:	4b27      	ldr	r3, [pc, #156]	@ (8002750 <HAL_RCC_OscConfig+0x32c>)
 80026b2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80026b4:	4b26      	ldr	r3, [pc, #152]	@ (8002750 <HAL_RCC_OscConfig+0x32c>)
 80026b6:	2101      	movs	r1, #1
 80026b8:	430a      	orrs	r2, r1
 80026ba:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026bc:	f7fe fc70 	bl	8000fa0 <HAL_GetTick>
 80026c0:	0003      	movs	r3, r0
 80026c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026c4:	e008      	b.n	80026d8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026c6:	f7fe fc6b 	bl	8000fa0 <HAL_GetTick>
 80026ca:	0002      	movs	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e1a2      	b.n	8002a1e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002750 <HAL_RCC_OscConfig+0x32c>)
 80026da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026dc:	2202      	movs	r2, #2
 80026de:	4013      	ands	r3, r2
 80026e0:	d0f1      	beq.n	80026c6 <HAL_RCC_OscConfig+0x2a2>
 80026e2:	e018      	b.n	8002716 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80026e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002750 <HAL_RCC_OscConfig+0x32c>)
 80026e6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80026e8:	4b19      	ldr	r3, [pc, #100]	@ (8002750 <HAL_RCC_OscConfig+0x32c>)
 80026ea:	2101      	movs	r1, #1
 80026ec:	438a      	bics	r2, r1
 80026ee:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f0:	f7fe fc56 	bl	8000fa0 <HAL_GetTick>
 80026f4:	0003      	movs	r3, r0
 80026f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026f8:	e008      	b.n	800270c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026fa:	f7fe fc51 	bl	8000fa0 <HAL_GetTick>
 80026fe:	0002      	movs	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e188      	b.n	8002a1e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800270c:	4b10      	ldr	r3, [pc, #64]	@ (8002750 <HAL_RCC_OscConfig+0x32c>)
 800270e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002710:	2202      	movs	r2, #2
 8002712:	4013      	ands	r3, r2
 8002714:	d1f1      	bne.n	80026fa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2204      	movs	r2, #4
 800271c:	4013      	ands	r3, r2
 800271e:	d100      	bne.n	8002722 <HAL_RCC_OscConfig+0x2fe>
 8002720:	e0c6      	b.n	80028b0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002722:	231f      	movs	r3, #31
 8002724:	18fb      	adds	r3, r7, r3
 8002726:	2200      	movs	r2, #0
 8002728:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800272a:	4b09      	ldr	r3, [pc, #36]	@ (8002750 <HAL_RCC_OscConfig+0x32c>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	2238      	movs	r2, #56	@ 0x38
 8002730:	4013      	ands	r3, r2
 8002732:	2b20      	cmp	r3, #32
 8002734:	d11e      	bne.n	8002774 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002736:	4b06      	ldr	r3, [pc, #24]	@ (8002750 <HAL_RCC_OscConfig+0x32c>)
 8002738:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800273a:	2202      	movs	r2, #2
 800273c:	4013      	ands	r3, r2
 800273e:	d100      	bne.n	8002742 <HAL_RCC_OscConfig+0x31e>
 8002740:	e0b6      	b.n	80028b0 <HAL_RCC_OscConfig+0x48c>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d000      	beq.n	800274c <HAL_RCC_OscConfig+0x328>
 800274a:	e0b1      	b.n	80028b0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e166      	b.n	8002a1e <HAL_RCC_OscConfig+0x5fa>
 8002750:	40021000 	.word	0x40021000
 8002754:	fffeffff 	.word	0xfffeffff
 8002758:	fffbffff 	.word	0xfffbffff
 800275c:	ffff80ff 	.word	0xffff80ff
 8002760:	ffffc7ff 	.word	0xffffc7ff
 8002764:	00f42400 	.word	0x00f42400
 8002768:	2000001c 	.word	0x2000001c
 800276c:	20000020 	.word	0x20000020
 8002770:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002774:	4bac      	ldr	r3, [pc, #688]	@ (8002a28 <HAL_RCC_OscConfig+0x604>)
 8002776:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002778:	2380      	movs	r3, #128	@ 0x80
 800277a:	055b      	lsls	r3, r3, #21
 800277c:	4013      	ands	r3, r2
 800277e:	d101      	bne.n	8002784 <HAL_RCC_OscConfig+0x360>
 8002780:	2301      	movs	r3, #1
 8002782:	e000      	b.n	8002786 <HAL_RCC_OscConfig+0x362>
 8002784:	2300      	movs	r3, #0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d011      	beq.n	80027ae <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800278a:	4ba7      	ldr	r3, [pc, #668]	@ (8002a28 <HAL_RCC_OscConfig+0x604>)
 800278c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800278e:	4ba6      	ldr	r3, [pc, #664]	@ (8002a28 <HAL_RCC_OscConfig+0x604>)
 8002790:	2180      	movs	r1, #128	@ 0x80
 8002792:	0549      	lsls	r1, r1, #21
 8002794:	430a      	orrs	r2, r1
 8002796:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002798:	4ba3      	ldr	r3, [pc, #652]	@ (8002a28 <HAL_RCC_OscConfig+0x604>)
 800279a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800279c:	2380      	movs	r3, #128	@ 0x80
 800279e:	055b      	lsls	r3, r3, #21
 80027a0:	4013      	ands	r3, r2
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80027a6:	231f      	movs	r3, #31
 80027a8:	18fb      	adds	r3, r7, r3
 80027aa:	2201      	movs	r2, #1
 80027ac:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027ae:	4b9f      	ldr	r3, [pc, #636]	@ (8002a2c <HAL_RCC_OscConfig+0x608>)
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	2380      	movs	r3, #128	@ 0x80
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	4013      	ands	r3, r2
 80027b8:	d11a      	bne.n	80027f0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027ba:	4b9c      	ldr	r3, [pc, #624]	@ (8002a2c <HAL_RCC_OscConfig+0x608>)
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	4b9b      	ldr	r3, [pc, #620]	@ (8002a2c <HAL_RCC_OscConfig+0x608>)
 80027c0:	2180      	movs	r1, #128	@ 0x80
 80027c2:	0049      	lsls	r1, r1, #1
 80027c4:	430a      	orrs	r2, r1
 80027c6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80027c8:	f7fe fbea 	bl	8000fa0 <HAL_GetTick>
 80027cc:	0003      	movs	r3, r0
 80027ce:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027d0:	e008      	b.n	80027e4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027d2:	f7fe fbe5 	bl	8000fa0 <HAL_GetTick>
 80027d6:	0002      	movs	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e11c      	b.n	8002a1e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027e4:	4b91      	ldr	r3, [pc, #580]	@ (8002a2c <HAL_RCC_OscConfig+0x608>)
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	2380      	movs	r3, #128	@ 0x80
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	4013      	ands	r3, r2
 80027ee:	d0f0      	beq.n	80027d2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d106      	bne.n	8002806 <HAL_RCC_OscConfig+0x3e2>
 80027f8:	4b8b      	ldr	r3, [pc, #556]	@ (8002a28 <HAL_RCC_OscConfig+0x604>)
 80027fa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80027fc:	4b8a      	ldr	r3, [pc, #552]	@ (8002a28 <HAL_RCC_OscConfig+0x604>)
 80027fe:	2101      	movs	r1, #1
 8002800:	430a      	orrs	r2, r1
 8002802:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002804:	e01c      	b.n	8002840 <HAL_RCC_OscConfig+0x41c>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	2b05      	cmp	r3, #5
 800280c:	d10c      	bne.n	8002828 <HAL_RCC_OscConfig+0x404>
 800280e:	4b86      	ldr	r3, [pc, #536]	@ (8002a28 <HAL_RCC_OscConfig+0x604>)
 8002810:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002812:	4b85      	ldr	r3, [pc, #532]	@ (8002a28 <HAL_RCC_OscConfig+0x604>)
 8002814:	2104      	movs	r1, #4
 8002816:	430a      	orrs	r2, r1
 8002818:	65da      	str	r2, [r3, #92]	@ 0x5c
 800281a:	4b83      	ldr	r3, [pc, #524]	@ (8002a28 <HAL_RCC_OscConfig+0x604>)
 800281c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800281e:	4b82      	ldr	r3, [pc, #520]	@ (8002a28 <HAL_RCC_OscConfig+0x604>)
 8002820:	2101      	movs	r1, #1
 8002822:	430a      	orrs	r2, r1
 8002824:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002826:	e00b      	b.n	8002840 <HAL_RCC_OscConfig+0x41c>
 8002828:	4b7f      	ldr	r3, [pc, #508]	@ (8002a28 <HAL_RCC_OscConfig+0x604>)
 800282a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800282c:	4b7e      	ldr	r3, [pc, #504]	@ (8002a28 <HAL_RCC_OscConfig+0x604>)
 800282e:	2101      	movs	r1, #1
 8002830:	438a      	bics	r2, r1
 8002832:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002834:	4b7c      	ldr	r3, [pc, #496]	@ (8002a28 <HAL_RCC_OscConfig+0x604>)
 8002836:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002838:	4b7b      	ldr	r3, [pc, #492]	@ (8002a28 <HAL_RCC_OscConfig+0x604>)
 800283a:	2104      	movs	r1, #4
 800283c:	438a      	bics	r2, r1
 800283e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d014      	beq.n	8002872 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002848:	f7fe fbaa 	bl	8000fa0 <HAL_GetTick>
 800284c:	0003      	movs	r3, r0
 800284e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002850:	e009      	b.n	8002866 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002852:	f7fe fba5 	bl	8000fa0 <HAL_GetTick>
 8002856:	0002      	movs	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	4a74      	ldr	r2, [pc, #464]	@ (8002a30 <HAL_RCC_OscConfig+0x60c>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e0db      	b.n	8002a1e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002866:	4b70      	ldr	r3, [pc, #448]	@ (8002a28 <HAL_RCC_OscConfig+0x604>)
 8002868:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800286a:	2202      	movs	r2, #2
 800286c:	4013      	ands	r3, r2
 800286e:	d0f0      	beq.n	8002852 <HAL_RCC_OscConfig+0x42e>
 8002870:	e013      	b.n	800289a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002872:	f7fe fb95 	bl	8000fa0 <HAL_GetTick>
 8002876:	0003      	movs	r3, r0
 8002878:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800287a:	e009      	b.n	8002890 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800287c:	f7fe fb90 	bl	8000fa0 <HAL_GetTick>
 8002880:	0002      	movs	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	4a6a      	ldr	r2, [pc, #424]	@ (8002a30 <HAL_RCC_OscConfig+0x60c>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e0c6      	b.n	8002a1e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002890:	4b65      	ldr	r3, [pc, #404]	@ (8002a28 <HAL_RCC_OscConfig+0x604>)
 8002892:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002894:	2202      	movs	r2, #2
 8002896:	4013      	ands	r3, r2
 8002898:	d1f0      	bne.n	800287c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800289a:	231f      	movs	r3, #31
 800289c:	18fb      	adds	r3, r7, r3
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d105      	bne.n	80028b0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80028a4:	4b60      	ldr	r3, [pc, #384]	@ (8002a28 <HAL_RCC_OscConfig+0x604>)
 80028a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028a8:	4b5f      	ldr	r3, [pc, #380]	@ (8002a28 <HAL_RCC_OscConfig+0x604>)
 80028aa:	4962      	ldr	r1, [pc, #392]	@ (8002a34 <HAL_RCC_OscConfig+0x610>)
 80028ac:	400a      	ands	r2, r1
 80028ae:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	69db      	ldr	r3, [r3, #28]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d100      	bne.n	80028ba <HAL_RCC_OscConfig+0x496>
 80028b8:	e0b0      	b.n	8002a1c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028ba:	4b5b      	ldr	r3, [pc, #364]	@ (8002a28 <HAL_RCC_OscConfig+0x604>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	2238      	movs	r2, #56	@ 0x38
 80028c0:	4013      	ands	r3, r2
 80028c2:	2b10      	cmp	r3, #16
 80028c4:	d100      	bne.n	80028c8 <HAL_RCC_OscConfig+0x4a4>
 80028c6:	e078      	b.n	80029ba <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	69db      	ldr	r3, [r3, #28]
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d153      	bne.n	8002978 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d0:	4b55      	ldr	r3, [pc, #340]	@ (8002a28 <HAL_RCC_OscConfig+0x604>)
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	4b54      	ldr	r3, [pc, #336]	@ (8002a28 <HAL_RCC_OscConfig+0x604>)
 80028d6:	4958      	ldr	r1, [pc, #352]	@ (8002a38 <HAL_RCC_OscConfig+0x614>)
 80028d8:	400a      	ands	r2, r1
 80028da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028dc:	f7fe fb60 	bl	8000fa0 <HAL_GetTick>
 80028e0:	0003      	movs	r3, r0
 80028e2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e6:	f7fe fb5b 	bl	8000fa0 <HAL_GetTick>
 80028ea:	0002      	movs	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e092      	b.n	8002a1e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028f8:	4b4b      	ldr	r3, [pc, #300]	@ (8002a28 <HAL_RCC_OscConfig+0x604>)
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	2380      	movs	r3, #128	@ 0x80
 80028fe:	049b      	lsls	r3, r3, #18
 8002900:	4013      	ands	r3, r2
 8002902:	d1f0      	bne.n	80028e6 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002904:	4b48      	ldr	r3, [pc, #288]	@ (8002a28 <HAL_RCC_OscConfig+0x604>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	4a4c      	ldr	r2, [pc, #304]	@ (8002a3c <HAL_RCC_OscConfig+0x618>)
 800290a:	4013      	ands	r3, r2
 800290c:	0019      	movs	r1, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a1a      	ldr	r2, [r3, #32]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002916:	431a      	orrs	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800291c:	021b      	lsls	r3, r3, #8
 800291e:	431a      	orrs	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002924:	431a      	orrs	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292a:	431a      	orrs	r2, r3
 800292c:	4b3e      	ldr	r3, [pc, #248]	@ (8002a28 <HAL_RCC_OscConfig+0x604>)
 800292e:	430a      	orrs	r2, r1
 8002930:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002932:	4b3d      	ldr	r3, [pc, #244]	@ (8002a28 <HAL_RCC_OscConfig+0x604>)
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	4b3c      	ldr	r3, [pc, #240]	@ (8002a28 <HAL_RCC_OscConfig+0x604>)
 8002938:	2180      	movs	r1, #128	@ 0x80
 800293a:	0449      	lsls	r1, r1, #17
 800293c:	430a      	orrs	r2, r1
 800293e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002940:	4b39      	ldr	r3, [pc, #228]	@ (8002a28 <HAL_RCC_OscConfig+0x604>)
 8002942:	68da      	ldr	r2, [r3, #12]
 8002944:	4b38      	ldr	r3, [pc, #224]	@ (8002a28 <HAL_RCC_OscConfig+0x604>)
 8002946:	2180      	movs	r1, #128	@ 0x80
 8002948:	0549      	lsls	r1, r1, #21
 800294a:	430a      	orrs	r2, r1
 800294c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294e:	f7fe fb27 	bl	8000fa0 <HAL_GetTick>
 8002952:	0003      	movs	r3, r0
 8002954:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002958:	f7fe fb22 	bl	8000fa0 <HAL_GetTick>
 800295c:	0002      	movs	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e059      	b.n	8002a1e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800296a:	4b2f      	ldr	r3, [pc, #188]	@ (8002a28 <HAL_RCC_OscConfig+0x604>)
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	2380      	movs	r3, #128	@ 0x80
 8002970:	049b      	lsls	r3, r3, #18
 8002972:	4013      	ands	r3, r2
 8002974:	d0f0      	beq.n	8002958 <HAL_RCC_OscConfig+0x534>
 8002976:	e051      	b.n	8002a1c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002978:	4b2b      	ldr	r3, [pc, #172]	@ (8002a28 <HAL_RCC_OscConfig+0x604>)
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	4b2a      	ldr	r3, [pc, #168]	@ (8002a28 <HAL_RCC_OscConfig+0x604>)
 800297e:	492e      	ldr	r1, [pc, #184]	@ (8002a38 <HAL_RCC_OscConfig+0x614>)
 8002980:	400a      	ands	r2, r1
 8002982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002984:	f7fe fb0c 	bl	8000fa0 <HAL_GetTick>
 8002988:	0003      	movs	r3, r0
 800298a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800298c:	e008      	b.n	80029a0 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800298e:	f7fe fb07 	bl	8000fa0 <HAL_GetTick>
 8002992:	0002      	movs	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e03e      	b.n	8002a1e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029a0:	4b21      	ldr	r3, [pc, #132]	@ (8002a28 <HAL_RCC_OscConfig+0x604>)
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	2380      	movs	r3, #128	@ 0x80
 80029a6:	049b      	lsls	r3, r3, #18
 80029a8:	4013      	ands	r3, r2
 80029aa:	d1f0      	bne.n	800298e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80029ac:	4b1e      	ldr	r3, [pc, #120]	@ (8002a28 <HAL_RCC_OscConfig+0x604>)
 80029ae:	68da      	ldr	r2, [r3, #12]
 80029b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002a28 <HAL_RCC_OscConfig+0x604>)
 80029b2:	4923      	ldr	r1, [pc, #140]	@ (8002a40 <HAL_RCC_OscConfig+0x61c>)
 80029b4:	400a      	ands	r2, r1
 80029b6:	60da      	str	r2, [r3, #12]
 80029b8:	e030      	b.n	8002a1c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d101      	bne.n	80029c6 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e02b      	b.n	8002a1e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80029c6:	4b18      	ldr	r3, [pc, #96]	@ (8002a28 <HAL_RCC_OscConfig+0x604>)
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	2203      	movs	r2, #3
 80029d0:	401a      	ands	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d11e      	bne.n	8002a18 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	2270      	movs	r2, #112	@ 0x70
 80029de:	401a      	ands	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d117      	bne.n	8002a18 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	23fe      	movs	r3, #254	@ 0xfe
 80029ec:	01db      	lsls	r3, r3, #7
 80029ee:	401a      	ands	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d10e      	bne.n	8002a18 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	23f8      	movs	r3, #248	@ 0xf8
 80029fe:	039b      	lsls	r3, r3, #14
 8002a00:	401a      	ands	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d106      	bne.n	8002a18 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	0f5b      	lsrs	r3, r3, #29
 8002a0e:	075a      	lsls	r2, r3, #29
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d001      	beq.n	8002a1c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e000      	b.n	8002a1e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	0018      	movs	r0, r3
 8002a20:	46bd      	mov	sp, r7
 8002a22:	b008      	add	sp, #32
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	46c0      	nop			@ (mov r8, r8)
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	40007000 	.word	0x40007000
 8002a30:	00001388 	.word	0x00001388
 8002a34:	efffffff 	.word	0xefffffff
 8002a38:	feffffff 	.word	0xfeffffff
 8002a3c:	1fc1808c 	.word	0x1fc1808c
 8002a40:	effefffc 	.word	0xeffefffc

08002a44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d101      	bne.n	8002a58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e0e9      	b.n	8002c2c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a58:	4b76      	ldr	r3, [pc, #472]	@ (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2207      	movs	r2, #7
 8002a5e:	4013      	ands	r3, r2
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d91e      	bls.n	8002aa4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a66:	4b73      	ldr	r3, [pc, #460]	@ (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2207      	movs	r2, #7
 8002a6c:	4393      	bics	r3, r2
 8002a6e:	0019      	movs	r1, r3
 8002a70:	4b70      	ldr	r3, [pc, #448]	@ (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	430a      	orrs	r2, r1
 8002a76:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a78:	f7fe fa92 	bl	8000fa0 <HAL_GetTick>
 8002a7c:	0003      	movs	r3, r0
 8002a7e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a80:	e009      	b.n	8002a96 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a82:	f7fe fa8d 	bl	8000fa0 <HAL_GetTick>
 8002a86:	0002      	movs	r2, r0
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	4a6a      	ldr	r2, [pc, #424]	@ (8002c38 <HAL_RCC_ClockConfig+0x1f4>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e0ca      	b.n	8002c2c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a96:	4b67      	ldr	r3, [pc, #412]	@ (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2207      	movs	r2, #7
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d1ee      	bne.n	8002a82 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2202      	movs	r2, #2
 8002aaa:	4013      	ands	r3, r2
 8002aac:	d015      	beq.n	8002ada <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2204      	movs	r2, #4
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	d006      	beq.n	8002ac6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002ab8:	4b60      	ldr	r3, [pc, #384]	@ (8002c3c <HAL_RCC_ClockConfig+0x1f8>)
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	4b5f      	ldr	r3, [pc, #380]	@ (8002c3c <HAL_RCC_ClockConfig+0x1f8>)
 8002abe:	21e0      	movs	r1, #224	@ 0xe0
 8002ac0:	01c9      	lsls	r1, r1, #7
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ac6:	4b5d      	ldr	r3, [pc, #372]	@ (8002c3c <HAL_RCC_ClockConfig+0x1f8>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	4a5d      	ldr	r2, [pc, #372]	@ (8002c40 <HAL_RCC_ClockConfig+0x1fc>)
 8002acc:	4013      	ands	r3, r2
 8002ace:	0019      	movs	r1, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	4b59      	ldr	r3, [pc, #356]	@ (8002c3c <HAL_RCC_ClockConfig+0x1f8>)
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	d057      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d107      	bne.n	8002afc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002aec:	4b53      	ldr	r3, [pc, #332]	@ (8002c3c <HAL_RCC_ClockConfig+0x1f8>)
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	2380      	movs	r3, #128	@ 0x80
 8002af2:	029b      	lsls	r3, r3, #10
 8002af4:	4013      	ands	r3, r2
 8002af6:	d12b      	bne.n	8002b50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e097      	b.n	8002c2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d107      	bne.n	8002b14 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b04:	4b4d      	ldr	r3, [pc, #308]	@ (8002c3c <HAL_RCC_ClockConfig+0x1f8>)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	2380      	movs	r3, #128	@ 0x80
 8002b0a:	049b      	lsls	r3, r3, #18
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	d11f      	bne.n	8002b50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e08b      	b.n	8002c2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d107      	bne.n	8002b2c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b1c:	4b47      	ldr	r3, [pc, #284]	@ (8002c3c <HAL_RCC_ClockConfig+0x1f8>)
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	2380      	movs	r3, #128	@ 0x80
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	4013      	ands	r3, r2
 8002b26:	d113      	bne.n	8002b50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e07f      	b.n	8002c2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	2b03      	cmp	r3, #3
 8002b32:	d106      	bne.n	8002b42 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b34:	4b41      	ldr	r3, [pc, #260]	@ (8002c3c <HAL_RCC_ClockConfig+0x1f8>)
 8002b36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b38:	2202      	movs	r2, #2
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	d108      	bne.n	8002b50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e074      	b.n	8002c2c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b42:	4b3e      	ldr	r3, [pc, #248]	@ (8002c3c <HAL_RCC_ClockConfig+0x1f8>)
 8002b44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b46:	2202      	movs	r2, #2
 8002b48:	4013      	ands	r3, r2
 8002b4a:	d101      	bne.n	8002b50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e06d      	b.n	8002c2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b50:	4b3a      	ldr	r3, [pc, #232]	@ (8002c3c <HAL_RCC_ClockConfig+0x1f8>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	2207      	movs	r2, #7
 8002b56:	4393      	bics	r3, r2
 8002b58:	0019      	movs	r1, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	4b37      	ldr	r3, [pc, #220]	@ (8002c3c <HAL_RCC_ClockConfig+0x1f8>)
 8002b60:	430a      	orrs	r2, r1
 8002b62:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b64:	f7fe fa1c 	bl	8000fa0 <HAL_GetTick>
 8002b68:	0003      	movs	r3, r0
 8002b6a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b6c:	e009      	b.n	8002b82 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b6e:	f7fe fa17 	bl	8000fa0 <HAL_GetTick>
 8002b72:	0002      	movs	r2, r0
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	4a2f      	ldr	r2, [pc, #188]	@ (8002c38 <HAL_RCC_ClockConfig+0x1f4>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e054      	b.n	8002c2c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b82:	4b2e      	ldr	r3, [pc, #184]	@ (8002c3c <HAL_RCC_ClockConfig+0x1f8>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	2238      	movs	r2, #56	@ 0x38
 8002b88:	401a      	ands	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d1ec      	bne.n	8002b6e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b94:	4b27      	ldr	r3, [pc, #156]	@ (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2207      	movs	r2, #7
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d21e      	bcs.n	8002be0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ba2:	4b24      	ldr	r3, [pc, #144]	@ (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2207      	movs	r2, #7
 8002ba8:	4393      	bics	r3, r2
 8002baa:	0019      	movs	r1, r3
 8002bac:	4b21      	ldr	r3, [pc, #132]	@ (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002bb4:	f7fe f9f4 	bl	8000fa0 <HAL_GetTick>
 8002bb8:	0003      	movs	r3, r0
 8002bba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002bbc:	e009      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bbe:	f7fe f9ef 	bl	8000fa0 <HAL_GetTick>
 8002bc2:	0002      	movs	r2, r0
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	4a1b      	ldr	r2, [pc, #108]	@ (8002c38 <HAL_RCC_ClockConfig+0x1f4>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e02c      	b.n	8002c2c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002bd2:	4b18      	ldr	r3, [pc, #96]	@ (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2207      	movs	r2, #7
 8002bd8:	4013      	ands	r3, r2
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d1ee      	bne.n	8002bbe <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2204      	movs	r2, #4
 8002be6:	4013      	ands	r3, r2
 8002be8:	d009      	beq.n	8002bfe <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002bea:	4b14      	ldr	r3, [pc, #80]	@ (8002c3c <HAL_RCC_ClockConfig+0x1f8>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	4a15      	ldr	r2, [pc, #84]	@ (8002c44 <HAL_RCC_ClockConfig+0x200>)
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	0019      	movs	r1, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68da      	ldr	r2, [r3, #12]
 8002bf8:	4b10      	ldr	r3, [pc, #64]	@ (8002c3c <HAL_RCC_ClockConfig+0x1f8>)
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002bfe:	f000 f829 	bl	8002c54 <HAL_RCC_GetSysClockFreq>
 8002c02:	0001      	movs	r1, r0
 8002c04:	4b0d      	ldr	r3, [pc, #52]	@ (8002c3c <HAL_RCC_ClockConfig+0x1f8>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	0a1b      	lsrs	r3, r3, #8
 8002c0a:	220f      	movs	r2, #15
 8002c0c:	401a      	ands	r2, r3
 8002c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8002c48 <HAL_RCC_ClockConfig+0x204>)
 8002c10:	0092      	lsls	r2, r2, #2
 8002c12:	58d3      	ldr	r3, [r2, r3]
 8002c14:	221f      	movs	r2, #31
 8002c16:	4013      	ands	r3, r2
 8002c18:	000a      	movs	r2, r1
 8002c1a:	40da      	lsrs	r2, r3
 8002c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c4c <HAL_RCC_ClockConfig+0x208>)
 8002c1e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002c20:	4b0b      	ldr	r3, [pc, #44]	@ (8002c50 <HAL_RCC_ClockConfig+0x20c>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	0018      	movs	r0, r3
 8002c26:	f7fe f95f 	bl	8000ee8 <HAL_InitTick>
 8002c2a:	0003      	movs	r3, r0
}
 8002c2c:	0018      	movs	r0, r3
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	b004      	add	sp, #16
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40022000 	.word	0x40022000
 8002c38:	00001388 	.word	0x00001388
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	fffff0ff 	.word	0xfffff0ff
 8002c44:	ffff8fff 	.word	0xffff8fff
 8002c48:	08004dec 	.word	0x08004dec
 8002c4c:	2000001c 	.word	0x2000001c
 8002c50:	20000020 	.word	0x20000020

08002c54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c5a:	4b3c      	ldr	r3, [pc, #240]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	2238      	movs	r2, #56	@ 0x38
 8002c60:	4013      	ands	r3, r2
 8002c62:	d10f      	bne.n	8002c84 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002c64:	4b39      	ldr	r3, [pc, #228]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	0adb      	lsrs	r3, r3, #11
 8002c6a:	2207      	movs	r2, #7
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	2201      	movs	r2, #1
 8002c70:	409a      	lsls	r2, r3
 8002c72:	0013      	movs	r3, r2
 8002c74:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002c76:	6839      	ldr	r1, [r7, #0]
 8002c78:	4835      	ldr	r0, [pc, #212]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002c7a:	f7fd fa53 	bl	8000124 <__udivsi3>
 8002c7e:	0003      	movs	r3, r0
 8002c80:	613b      	str	r3, [r7, #16]
 8002c82:	e05d      	b.n	8002d40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c84:	4b31      	ldr	r3, [pc, #196]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	2238      	movs	r2, #56	@ 0x38
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	2b08      	cmp	r3, #8
 8002c8e:	d102      	bne.n	8002c96 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c90:	4b30      	ldr	r3, [pc, #192]	@ (8002d54 <HAL_RCC_GetSysClockFreq+0x100>)
 8002c92:	613b      	str	r3, [r7, #16]
 8002c94:	e054      	b.n	8002d40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c96:	4b2d      	ldr	r3, [pc, #180]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	2238      	movs	r2, #56	@ 0x38
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	2b10      	cmp	r3, #16
 8002ca0:	d138      	bne.n	8002d14 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002ca2:	4b2a      	ldr	r3, [pc, #168]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	2203      	movs	r2, #3
 8002ca8:	4013      	ands	r3, r2
 8002caa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cac:	4b27      	ldr	r3, [pc, #156]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	091b      	lsrs	r3, r3, #4
 8002cb2:	2207      	movs	r2, #7
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2b03      	cmp	r3, #3
 8002cbe:	d10d      	bne.n	8002cdc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002cc0:	68b9      	ldr	r1, [r7, #8]
 8002cc2:	4824      	ldr	r0, [pc, #144]	@ (8002d54 <HAL_RCC_GetSysClockFreq+0x100>)
 8002cc4:	f7fd fa2e 	bl	8000124 <__udivsi3>
 8002cc8:	0003      	movs	r3, r0
 8002cca:	0019      	movs	r1, r3
 8002ccc:	4b1f      	ldr	r3, [pc, #124]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	0a1b      	lsrs	r3, r3, #8
 8002cd2:	227f      	movs	r2, #127	@ 0x7f
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	434b      	muls	r3, r1
 8002cd8:	617b      	str	r3, [r7, #20]
        break;
 8002cda:	e00d      	b.n	8002cf8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002cdc:	68b9      	ldr	r1, [r7, #8]
 8002cde:	481c      	ldr	r0, [pc, #112]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002ce0:	f7fd fa20 	bl	8000124 <__udivsi3>
 8002ce4:	0003      	movs	r3, r0
 8002ce6:	0019      	movs	r1, r3
 8002ce8:	4b18      	ldr	r3, [pc, #96]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	0a1b      	lsrs	r3, r3, #8
 8002cee:	227f      	movs	r2, #127	@ 0x7f
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	434b      	muls	r3, r1
 8002cf4:	617b      	str	r3, [r7, #20]
        break;
 8002cf6:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002cf8:	4b14      	ldr	r3, [pc, #80]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	0f5b      	lsrs	r3, r3, #29
 8002cfe:	2207      	movs	r2, #7
 8002d00:	4013      	ands	r3, r2
 8002d02:	3301      	adds	r3, #1
 8002d04:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	6978      	ldr	r0, [r7, #20]
 8002d0a:	f7fd fa0b 	bl	8000124 <__udivsi3>
 8002d0e:	0003      	movs	r3, r0
 8002d10:	613b      	str	r3, [r7, #16]
 8002d12:	e015      	b.n	8002d40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002d14:	4b0d      	ldr	r3, [pc, #52]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	2238      	movs	r2, #56	@ 0x38
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	2b20      	cmp	r3, #32
 8002d1e:	d103      	bne.n	8002d28 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002d20:	2380      	movs	r3, #128	@ 0x80
 8002d22:	021b      	lsls	r3, r3, #8
 8002d24:	613b      	str	r3, [r7, #16]
 8002d26:	e00b      	b.n	8002d40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002d28:	4b08      	ldr	r3, [pc, #32]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	2238      	movs	r2, #56	@ 0x38
 8002d2e:	4013      	ands	r3, r2
 8002d30:	2b18      	cmp	r3, #24
 8002d32:	d103      	bne.n	8002d3c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002d34:	23fa      	movs	r3, #250	@ 0xfa
 8002d36:	01db      	lsls	r3, r3, #7
 8002d38:	613b      	str	r3, [r7, #16]
 8002d3a:	e001      	b.n	8002d40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002d40:	693b      	ldr	r3, [r7, #16]
}
 8002d42:	0018      	movs	r0, r3
 8002d44:	46bd      	mov	sp, r7
 8002d46:	b006      	add	sp, #24
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	46c0      	nop			@ (mov r8, r8)
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	00f42400 	.word	0x00f42400
 8002d54:	007a1200 	.word	0x007a1200

08002d58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d5c:	4b02      	ldr	r3, [pc, #8]	@ (8002d68 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
}
 8002d60:	0018      	movs	r0, r3
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	46c0      	nop			@ (mov r8, r8)
 8002d68:	2000001c 	.word	0x2000001c

08002d6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d6c:	b5b0      	push	{r4, r5, r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002d70:	f7ff fff2 	bl	8002d58 <HAL_RCC_GetHCLKFreq>
 8002d74:	0004      	movs	r4, r0
 8002d76:	f7ff fb49 	bl	800240c <LL_RCC_GetAPB1Prescaler>
 8002d7a:	0003      	movs	r3, r0
 8002d7c:	0b1a      	lsrs	r2, r3, #12
 8002d7e:	4b05      	ldr	r3, [pc, #20]	@ (8002d94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d80:	0092      	lsls	r2, r2, #2
 8002d82:	58d3      	ldr	r3, [r2, r3]
 8002d84:	221f      	movs	r2, #31
 8002d86:	4013      	ands	r3, r2
 8002d88:	40dc      	lsrs	r4, r3
 8002d8a:	0023      	movs	r3, r4
}
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bdb0      	pop	{r4, r5, r7, pc}
 8002d92:	46c0      	nop			@ (mov r8, r8)
 8002d94:	08004e2c 	.word	0x08004e2c

08002d98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002da0:	2313      	movs	r3, #19
 8002da2:	18fb      	adds	r3, r7, r3
 8002da4:	2200      	movs	r2, #0
 8002da6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002da8:	2312      	movs	r3, #18
 8002daa:	18fb      	adds	r3, r7, r3
 8002dac:	2200      	movs	r2, #0
 8002dae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	2380      	movs	r3, #128	@ 0x80
 8002db6:	029b      	lsls	r3, r3, #10
 8002db8:	4013      	ands	r3, r2
 8002dba:	d100      	bne.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002dbc:	e0a3      	b.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dbe:	2011      	movs	r0, #17
 8002dc0:	183b      	adds	r3, r7, r0
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dc6:	4b86      	ldr	r3, [pc, #536]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002dc8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002dca:	2380      	movs	r3, #128	@ 0x80
 8002dcc:	055b      	lsls	r3, r3, #21
 8002dce:	4013      	ands	r3, r2
 8002dd0:	d110      	bne.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dd2:	4b83      	ldr	r3, [pc, #524]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002dd4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002dd6:	4b82      	ldr	r3, [pc, #520]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002dd8:	2180      	movs	r1, #128	@ 0x80
 8002dda:	0549      	lsls	r1, r1, #21
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002de0:	4b7f      	ldr	r3, [pc, #508]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002de2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002de4:	2380      	movs	r3, #128	@ 0x80
 8002de6:	055b      	lsls	r3, r3, #21
 8002de8:	4013      	ands	r3, r2
 8002dea:	60bb      	str	r3, [r7, #8]
 8002dec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dee:	183b      	adds	r3, r7, r0
 8002df0:	2201      	movs	r2, #1
 8002df2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002df4:	4b7b      	ldr	r3, [pc, #492]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	4b7a      	ldr	r3, [pc, #488]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002dfa:	2180      	movs	r1, #128	@ 0x80
 8002dfc:	0049      	lsls	r1, r1, #1
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e02:	f7fe f8cd 	bl	8000fa0 <HAL_GetTick>
 8002e06:	0003      	movs	r3, r0
 8002e08:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e0a:	e00b      	b.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e0c:	f7fe f8c8 	bl	8000fa0 <HAL_GetTick>
 8002e10:	0002      	movs	r2, r0
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d904      	bls.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002e1a:	2313      	movs	r3, #19
 8002e1c:	18fb      	adds	r3, r7, r3
 8002e1e:	2203      	movs	r2, #3
 8002e20:	701a      	strb	r2, [r3, #0]
        break;
 8002e22:	e005      	b.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e24:	4b6f      	ldr	r3, [pc, #444]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	2380      	movs	r3, #128	@ 0x80
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	d0ed      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002e30:	2313      	movs	r3, #19
 8002e32:	18fb      	adds	r3, r7, r3
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d154      	bne.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e3a:	4b69      	ldr	r3, [pc, #420]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e3c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002e3e:	23c0      	movs	r3, #192	@ 0xc0
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	4013      	ands	r3, r2
 8002e44:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d019      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	697a      	ldr	r2, [r7, #20]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d014      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e56:	4b62      	ldr	r3, [pc, #392]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e5a:	4a63      	ldr	r2, [pc, #396]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e60:	4b5f      	ldr	r3, [pc, #380]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e62:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002e64:	4b5e      	ldr	r3, [pc, #376]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e66:	2180      	movs	r1, #128	@ 0x80
 8002e68:	0249      	lsls	r1, r1, #9
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e6e:	4b5c      	ldr	r3, [pc, #368]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e70:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002e72:	4b5b      	ldr	r3, [pc, #364]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e74:	495d      	ldr	r1, [pc, #372]	@ (8002fec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002e76:	400a      	ands	r2, r1
 8002e78:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e7a:	4b59      	ldr	r3, [pc, #356]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	2201      	movs	r2, #1
 8002e84:	4013      	ands	r3, r2
 8002e86:	d016      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e88:	f7fe f88a 	bl	8000fa0 <HAL_GetTick>
 8002e8c:	0003      	movs	r3, r0
 8002e8e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e90:	e00c      	b.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e92:	f7fe f885 	bl	8000fa0 <HAL_GetTick>
 8002e96:	0002      	movs	r2, r0
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	4a54      	ldr	r2, [pc, #336]	@ (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d904      	bls.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002ea2:	2313      	movs	r3, #19
 8002ea4:	18fb      	adds	r3, r7, r3
 8002ea6:	2203      	movs	r2, #3
 8002ea8:	701a      	strb	r2, [r3, #0]
            break;
 8002eaa:	e004      	b.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eac:	4b4c      	ldr	r3, [pc, #304]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002eae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb0:	2202      	movs	r2, #2
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	d0ed      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002eb6:	2313      	movs	r3, #19
 8002eb8:	18fb      	adds	r3, r7, r3
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10a      	bne.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ec0:	4b47      	ldr	r3, [pc, #284]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002ec2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ec4:	4a48      	ldr	r2, [pc, #288]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	0019      	movs	r1, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	699a      	ldr	r2, [r3, #24]
 8002ece:	4b44      	ldr	r3, [pc, #272]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ed4:	e00c      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ed6:	2312      	movs	r3, #18
 8002ed8:	18fb      	adds	r3, r7, r3
 8002eda:	2213      	movs	r2, #19
 8002edc:	18ba      	adds	r2, r7, r2
 8002ede:	7812      	ldrb	r2, [r2, #0]
 8002ee0:	701a      	strb	r2, [r3, #0]
 8002ee2:	e005      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ee4:	2312      	movs	r3, #18
 8002ee6:	18fb      	adds	r3, r7, r3
 8002ee8:	2213      	movs	r2, #19
 8002eea:	18ba      	adds	r2, r7, r2
 8002eec:	7812      	ldrb	r2, [r2, #0]
 8002eee:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ef0:	2311      	movs	r3, #17
 8002ef2:	18fb      	adds	r3, r7, r3
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d105      	bne.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002efa:	4b39      	ldr	r3, [pc, #228]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002efc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002efe:	4b38      	ldr	r3, [pc, #224]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002f00:	493c      	ldr	r1, [pc, #240]	@ (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002f02:	400a      	ands	r2, r1
 8002f04:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	d009      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f10:	4b33      	ldr	r3, [pc, #204]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002f12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f14:	2203      	movs	r2, #3
 8002f16:	4393      	bics	r3, r2
 8002f18:	0019      	movs	r1, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	4b30      	ldr	r3, [pc, #192]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002f20:	430a      	orrs	r2, r1
 8002f22:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2202      	movs	r2, #2
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	d009      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f2e:	4b2c      	ldr	r3, [pc, #176]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002f30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f32:	220c      	movs	r2, #12
 8002f34:	4393      	bics	r3, r2
 8002f36:	0019      	movs	r1, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689a      	ldr	r2, [r3, #8]
 8002f3c:	4b28      	ldr	r3, [pc, #160]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2220      	movs	r2, #32
 8002f48:	4013      	ands	r3, r2
 8002f4a:	d009      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f4c:	4b24      	ldr	r3, [pc, #144]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002f4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f50:	4a29      	ldr	r2, [pc, #164]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f52:	4013      	ands	r3, r2
 8002f54:	0019      	movs	r1, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68da      	ldr	r2, [r3, #12]
 8002f5a:	4b21      	ldr	r3, [pc, #132]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	2380      	movs	r3, #128	@ 0x80
 8002f66:	01db      	lsls	r3, r3, #7
 8002f68:	4013      	ands	r3, r2
 8002f6a:	d015      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f6c:	4b1c      	ldr	r3, [pc, #112]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002f6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	0899      	lsrs	r1, r3, #2
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	695a      	ldr	r2, [r3, #20]
 8002f78:	4b19      	ldr	r3, [pc, #100]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	695a      	ldr	r2, [r3, #20]
 8002f82:	2380      	movs	r3, #128	@ 0x80
 8002f84:	05db      	lsls	r3, r3, #23
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d106      	bne.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002f8a:	4b15      	ldr	r3, [pc, #84]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002f8c:	68da      	ldr	r2, [r3, #12]
 8002f8e:	4b14      	ldr	r3, [pc, #80]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002f90:	2180      	movs	r1, #128	@ 0x80
 8002f92:	0249      	lsls	r1, r1, #9
 8002f94:	430a      	orrs	r2, r1
 8002f96:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	2380      	movs	r3, #128	@ 0x80
 8002f9e:	011b      	lsls	r3, r3, #4
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	d016      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fa8:	4a14      	ldr	r2, [pc, #80]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002faa:	4013      	ands	r3, r2
 8002fac:	0019      	movs	r1, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691a      	ldr	r2, [r3, #16]
 8002fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	691a      	ldr	r2, [r3, #16]
 8002fbc:	2380      	movs	r3, #128	@ 0x80
 8002fbe:	01db      	lsls	r3, r3, #7
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d106      	bne.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002fc4:	4b06      	ldr	r3, [pc, #24]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002fc6:	68da      	ldr	r2, [r3, #12]
 8002fc8:	4b05      	ldr	r3, [pc, #20]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002fca:	2180      	movs	r1, #128	@ 0x80
 8002fcc:	0249      	lsls	r1, r1, #9
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002fd2:	2312      	movs	r3, #18
 8002fd4:	18fb      	adds	r3, r7, r3
 8002fd6:	781b      	ldrb	r3, [r3, #0]
}
 8002fd8:	0018      	movs	r0, r3
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	b006      	add	sp, #24
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	40007000 	.word	0x40007000
 8002fe8:	fffffcff 	.word	0xfffffcff
 8002fec:	fffeffff 	.word	0xfffeffff
 8002ff0:	00001388 	.word	0x00001388
 8002ff4:	efffffff 	.word	0xefffffff
 8002ff8:	ffffcfff 	.word	0xffffcfff
 8002ffc:	ffff3fff 	.word	0xffff3fff

08003000 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e046      	b.n	80030a0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2288      	movs	r2, #136	@ 0x88
 8003016:	589b      	ldr	r3, [r3, r2]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d107      	bne.n	800302c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2284      	movs	r2, #132	@ 0x84
 8003020:	2100      	movs	r1, #0
 8003022:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	0018      	movs	r0, r3
 8003028:	f7fd fe4a 	bl	8000cc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2288      	movs	r2, #136	@ 0x88
 8003030:	2124      	movs	r1, #36	@ 0x24
 8003032:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2101      	movs	r1, #1
 8003040:	438a      	bics	r2, r1
 8003042:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003048:	2b00      	cmp	r3, #0
 800304a:	d003      	beq.n	8003054 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	0018      	movs	r0, r3
 8003050:	f000 fdb6 	bl	8003bc0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	0018      	movs	r0, r3
 8003058:	f000 fc0e 	bl	8003878 <UART_SetConfig>
 800305c:	0003      	movs	r3, r0
 800305e:	2b01      	cmp	r3, #1
 8003060:	d101      	bne.n	8003066 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e01c      	b.n	80030a0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	490d      	ldr	r1, [pc, #52]	@ (80030a8 <HAL_UART_Init+0xa8>)
 8003072:	400a      	ands	r2, r1
 8003074:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	212a      	movs	r1, #42	@ 0x2a
 8003082:	438a      	bics	r2, r1
 8003084:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2101      	movs	r1, #1
 8003092:	430a      	orrs	r2, r1
 8003094:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	0018      	movs	r0, r3
 800309a:	f000 fe45 	bl	8003d28 <UART_CheckIdleState>
 800309e:	0003      	movs	r3, r0
}
 80030a0:	0018      	movs	r0, r3
 80030a2:	46bd      	mov	sp, r7
 80030a4:	b002      	add	sp, #8
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	ffffb7ff 	.word	0xffffb7ff

080030ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08a      	sub	sp, #40	@ 0x28
 80030b0:	af02      	add	r7, sp, #8
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	603b      	str	r3, [r7, #0]
 80030b8:	1dbb      	adds	r3, r7, #6
 80030ba:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2288      	movs	r2, #136	@ 0x88
 80030c0:	589b      	ldr	r3, [r3, r2]
 80030c2:	2b20      	cmp	r3, #32
 80030c4:	d000      	beq.n	80030c8 <HAL_UART_Transmit+0x1c>
 80030c6:	e090      	b.n	80031ea <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d003      	beq.n	80030d6 <HAL_UART_Transmit+0x2a>
 80030ce:	1dbb      	adds	r3, r7, #6
 80030d0:	881b      	ldrh	r3, [r3, #0]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e088      	b.n	80031ec <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	689a      	ldr	r2, [r3, #8]
 80030de:	2380      	movs	r3, #128	@ 0x80
 80030e0:	015b      	lsls	r3, r3, #5
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d109      	bne.n	80030fa <HAL_UART_Transmit+0x4e>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d105      	bne.n	80030fa <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2201      	movs	r2, #1
 80030f2:	4013      	ands	r3, r2
 80030f4:	d001      	beq.n	80030fa <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e078      	b.n	80031ec <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2290      	movs	r2, #144	@ 0x90
 80030fe:	2100      	movs	r1, #0
 8003100:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2288      	movs	r2, #136	@ 0x88
 8003106:	2121      	movs	r1, #33	@ 0x21
 8003108:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800310a:	f7fd ff49 	bl	8000fa0 <HAL_GetTick>
 800310e:	0003      	movs	r3, r0
 8003110:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	1dba      	adds	r2, r7, #6
 8003116:	2154      	movs	r1, #84	@ 0x54
 8003118:	8812      	ldrh	r2, [r2, #0]
 800311a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	1dba      	adds	r2, r7, #6
 8003120:	2156      	movs	r1, #86	@ 0x56
 8003122:	8812      	ldrh	r2, [r2, #0]
 8003124:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	689a      	ldr	r2, [r3, #8]
 800312a:	2380      	movs	r3, #128	@ 0x80
 800312c:	015b      	lsls	r3, r3, #5
 800312e:	429a      	cmp	r2, r3
 8003130:	d108      	bne.n	8003144 <HAL_UART_Transmit+0x98>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d104      	bne.n	8003144 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800313a:	2300      	movs	r3, #0
 800313c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	61bb      	str	r3, [r7, #24]
 8003142:	e003      	b.n	800314c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003148:	2300      	movs	r3, #0
 800314a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800314c:	e030      	b.n	80031b0 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	68f8      	ldr	r0, [r7, #12]
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	9300      	str	r3, [sp, #0]
 8003156:	0013      	movs	r3, r2
 8003158:	2200      	movs	r2, #0
 800315a:	2180      	movs	r1, #128	@ 0x80
 800315c:	f000 fe8e 	bl	8003e7c <UART_WaitOnFlagUntilTimeout>
 8003160:	1e03      	subs	r3, r0, #0
 8003162:	d005      	beq.n	8003170 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2288      	movs	r2, #136	@ 0x88
 8003168:	2120      	movs	r1, #32
 800316a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e03d      	b.n	80031ec <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10b      	bne.n	800318e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	881b      	ldrh	r3, [r3, #0]
 800317a:	001a      	movs	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	05d2      	lsls	r2, r2, #23
 8003182:	0dd2      	lsrs	r2, r2, #23
 8003184:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	3302      	adds	r3, #2
 800318a:	61bb      	str	r3, [r7, #24]
 800318c:	e007      	b.n	800319e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	781a      	ldrb	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	3301      	adds	r3, #1
 800319c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2256      	movs	r2, #86	@ 0x56
 80031a2:	5a9b      	ldrh	r3, [r3, r2]
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	3b01      	subs	r3, #1
 80031a8:	b299      	uxth	r1, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2256      	movs	r2, #86	@ 0x56
 80031ae:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2256      	movs	r2, #86	@ 0x56
 80031b4:	5a9b      	ldrh	r3, [r3, r2]
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d1c8      	bne.n	800314e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	9300      	str	r3, [sp, #0]
 80031c4:	0013      	movs	r3, r2
 80031c6:	2200      	movs	r2, #0
 80031c8:	2140      	movs	r1, #64	@ 0x40
 80031ca:	f000 fe57 	bl	8003e7c <UART_WaitOnFlagUntilTimeout>
 80031ce:	1e03      	subs	r3, r0, #0
 80031d0:	d005      	beq.n	80031de <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2288      	movs	r2, #136	@ 0x88
 80031d6:	2120      	movs	r1, #32
 80031d8:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e006      	b.n	80031ec <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2288      	movs	r2, #136	@ 0x88
 80031e2:	2120      	movs	r1, #32
 80031e4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80031e6:	2300      	movs	r3, #0
 80031e8:	e000      	b.n	80031ec <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80031ea:	2302      	movs	r3, #2
  }
}
 80031ec:	0018      	movs	r0, r3
 80031ee:	46bd      	mov	sp, r7
 80031f0:	b008      	add	sp, #32
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031f4:	b5b0      	push	{r4, r5, r7, lr}
 80031f6:	b0aa      	sub	sp, #168	@ 0xa8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	22a4      	movs	r2, #164	@ 0xa4
 8003204:	18b9      	adds	r1, r7, r2
 8003206:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	20a0      	movs	r0, #160	@ 0xa0
 8003210:	1839      	adds	r1, r7, r0
 8003212:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	249c      	movs	r4, #156	@ 0x9c
 800321c:	1939      	adds	r1, r7, r4
 800321e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003220:	0011      	movs	r1, r2
 8003222:	18bb      	adds	r3, r7, r2
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4aa2      	ldr	r2, [pc, #648]	@ (80034b0 <HAL_UART_IRQHandler+0x2bc>)
 8003228:	4013      	ands	r3, r2
 800322a:	2298      	movs	r2, #152	@ 0x98
 800322c:	18bd      	adds	r5, r7, r2
 800322e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8003230:	18bb      	adds	r3, r7, r2
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d11a      	bne.n	800326e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003238:	187b      	adds	r3, r7, r1
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2220      	movs	r2, #32
 800323e:	4013      	ands	r3, r2
 8003240:	d015      	beq.n	800326e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003242:	183b      	adds	r3, r7, r0
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2220      	movs	r2, #32
 8003248:	4013      	ands	r3, r2
 800324a:	d105      	bne.n	8003258 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800324c:	193b      	adds	r3, r7, r4
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	2380      	movs	r3, #128	@ 0x80
 8003252:	055b      	lsls	r3, r3, #21
 8003254:	4013      	ands	r3, r2
 8003256:	d00a      	beq.n	800326e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800325c:	2b00      	cmp	r3, #0
 800325e:	d100      	bne.n	8003262 <HAL_UART_IRQHandler+0x6e>
 8003260:	e2dc      	b.n	800381c <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	0010      	movs	r0, r2
 800326a:	4798      	blx	r3
      }
      return;
 800326c:	e2d6      	b.n	800381c <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800326e:	2398      	movs	r3, #152	@ 0x98
 8003270:	18fb      	adds	r3, r7, r3
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d100      	bne.n	800327a <HAL_UART_IRQHandler+0x86>
 8003278:	e122      	b.n	80034c0 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800327a:	239c      	movs	r3, #156	@ 0x9c
 800327c:	18fb      	adds	r3, r7, r3
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a8c      	ldr	r2, [pc, #560]	@ (80034b4 <HAL_UART_IRQHandler+0x2c0>)
 8003282:	4013      	ands	r3, r2
 8003284:	d106      	bne.n	8003294 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003286:	23a0      	movs	r3, #160	@ 0xa0
 8003288:	18fb      	adds	r3, r7, r3
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a8a      	ldr	r2, [pc, #552]	@ (80034b8 <HAL_UART_IRQHandler+0x2c4>)
 800328e:	4013      	ands	r3, r2
 8003290:	d100      	bne.n	8003294 <HAL_UART_IRQHandler+0xa0>
 8003292:	e115      	b.n	80034c0 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003294:	23a4      	movs	r3, #164	@ 0xa4
 8003296:	18fb      	adds	r3, r7, r3
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2201      	movs	r2, #1
 800329c:	4013      	ands	r3, r2
 800329e:	d012      	beq.n	80032c6 <HAL_UART_IRQHandler+0xd2>
 80032a0:	23a0      	movs	r3, #160	@ 0xa0
 80032a2:	18fb      	adds	r3, r7, r3
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	2380      	movs	r3, #128	@ 0x80
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	4013      	ands	r3, r2
 80032ac:	d00b      	beq.n	80032c6 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2201      	movs	r2, #1
 80032b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2290      	movs	r2, #144	@ 0x90
 80032ba:	589b      	ldr	r3, [r3, r2]
 80032bc:	2201      	movs	r2, #1
 80032be:	431a      	orrs	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2190      	movs	r1, #144	@ 0x90
 80032c4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032c6:	23a4      	movs	r3, #164	@ 0xa4
 80032c8:	18fb      	adds	r3, r7, r3
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2202      	movs	r2, #2
 80032ce:	4013      	ands	r3, r2
 80032d0:	d011      	beq.n	80032f6 <HAL_UART_IRQHandler+0x102>
 80032d2:	239c      	movs	r3, #156	@ 0x9c
 80032d4:	18fb      	adds	r3, r7, r3
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2201      	movs	r2, #1
 80032da:	4013      	ands	r3, r2
 80032dc:	d00b      	beq.n	80032f6 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2202      	movs	r2, #2
 80032e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2290      	movs	r2, #144	@ 0x90
 80032ea:	589b      	ldr	r3, [r3, r2]
 80032ec:	2204      	movs	r2, #4
 80032ee:	431a      	orrs	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2190      	movs	r1, #144	@ 0x90
 80032f4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032f6:	23a4      	movs	r3, #164	@ 0xa4
 80032f8:	18fb      	adds	r3, r7, r3
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2204      	movs	r2, #4
 80032fe:	4013      	ands	r3, r2
 8003300:	d011      	beq.n	8003326 <HAL_UART_IRQHandler+0x132>
 8003302:	239c      	movs	r3, #156	@ 0x9c
 8003304:	18fb      	adds	r3, r7, r3
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2201      	movs	r2, #1
 800330a:	4013      	ands	r3, r2
 800330c:	d00b      	beq.n	8003326 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2204      	movs	r2, #4
 8003314:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2290      	movs	r2, #144	@ 0x90
 800331a:	589b      	ldr	r3, [r3, r2]
 800331c:	2202      	movs	r2, #2
 800331e:	431a      	orrs	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2190      	movs	r1, #144	@ 0x90
 8003324:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003326:	23a4      	movs	r3, #164	@ 0xa4
 8003328:	18fb      	adds	r3, r7, r3
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2208      	movs	r2, #8
 800332e:	4013      	ands	r3, r2
 8003330:	d017      	beq.n	8003362 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003332:	23a0      	movs	r3, #160	@ 0xa0
 8003334:	18fb      	adds	r3, r7, r3
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2220      	movs	r2, #32
 800333a:	4013      	ands	r3, r2
 800333c:	d105      	bne.n	800334a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800333e:	239c      	movs	r3, #156	@ 0x9c
 8003340:	18fb      	adds	r3, r7, r3
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a5b      	ldr	r2, [pc, #364]	@ (80034b4 <HAL_UART_IRQHandler+0x2c0>)
 8003346:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003348:	d00b      	beq.n	8003362 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2208      	movs	r2, #8
 8003350:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2290      	movs	r2, #144	@ 0x90
 8003356:	589b      	ldr	r3, [r3, r2]
 8003358:	2208      	movs	r2, #8
 800335a:	431a      	orrs	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2190      	movs	r1, #144	@ 0x90
 8003360:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003362:	23a4      	movs	r3, #164	@ 0xa4
 8003364:	18fb      	adds	r3, r7, r3
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	2380      	movs	r3, #128	@ 0x80
 800336a:	011b      	lsls	r3, r3, #4
 800336c:	4013      	ands	r3, r2
 800336e:	d013      	beq.n	8003398 <HAL_UART_IRQHandler+0x1a4>
 8003370:	23a0      	movs	r3, #160	@ 0xa0
 8003372:	18fb      	adds	r3, r7, r3
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	2380      	movs	r3, #128	@ 0x80
 8003378:	04db      	lsls	r3, r3, #19
 800337a:	4013      	ands	r3, r2
 800337c:	d00c      	beq.n	8003398 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2280      	movs	r2, #128	@ 0x80
 8003384:	0112      	lsls	r2, r2, #4
 8003386:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2290      	movs	r2, #144	@ 0x90
 800338c:	589b      	ldr	r3, [r3, r2]
 800338e:	2220      	movs	r2, #32
 8003390:	431a      	orrs	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2190      	movs	r1, #144	@ 0x90
 8003396:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2290      	movs	r2, #144	@ 0x90
 800339c:	589b      	ldr	r3, [r3, r2]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d100      	bne.n	80033a4 <HAL_UART_IRQHandler+0x1b0>
 80033a2:	e23d      	b.n	8003820 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80033a4:	23a4      	movs	r3, #164	@ 0xa4
 80033a6:	18fb      	adds	r3, r7, r3
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2220      	movs	r2, #32
 80033ac:	4013      	ands	r3, r2
 80033ae:	d015      	beq.n	80033dc <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80033b0:	23a0      	movs	r3, #160	@ 0xa0
 80033b2:	18fb      	adds	r3, r7, r3
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2220      	movs	r2, #32
 80033b8:	4013      	ands	r3, r2
 80033ba:	d106      	bne.n	80033ca <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80033bc:	239c      	movs	r3, #156	@ 0x9c
 80033be:	18fb      	adds	r3, r7, r3
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	2380      	movs	r3, #128	@ 0x80
 80033c4:	055b      	lsls	r3, r3, #21
 80033c6:	4013      	ands	r3, r2
 80033c8:	d008      	beq.n	80033dc <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d004      	beq.n	80033dc <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	0010      	movs	r0, r2
 80033da:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2290      	movs	r2, #144	@ 0x90
 80033e0:	589b      	ldr	r3, [r3, r2]
 80033e2:	2194      	movs	r1, #148	@ 0x94
 80033e4:	187a      	adds	r2, r7, r1
 80033e6:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	2240      	movs	r2, #64	@ 0x40
 80033f0:	4013      	ands	r3, r2
 80033f2:	2b40      	cmp	r3, #64	@ 0x40
 80033f4:	d004      	beq.n	8003400 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80033f6:	187b      	adds	r3, r7, r1
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2228      	movs	r2, #40	@ 0x28
 80033fc:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033fe:	d04c      	beq.n	800349a <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	0018      	movs	r0, r3
 8003404:	f000 fdaa 	bl	8003f5c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	2240      	movs	r2, #64	@ 0x40
 8003410:	4013      	ands	r3, r2
 8003412:	2b40      	cmp	r3, #64	@ 0x40
 8003414:	d13c      	bne.n	8003490 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003416:	f3ef 8310 	mrs	r3, PRIMASK
 800341a:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800341c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800341e:	2090      	movs	r0, #144	@ 0x90
 8003420:	183a      	adds	r2, r7, r0
 8003422:	6013      	str	r3, [r2, #0]
 8003424:	2301      	movs	r3, #1
 8003426:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003428:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800342a:	f383 8810 	msr	PRIMASK, r3
}
 800342e:	46c0      	nop			@ (mov r8, r8)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689a      	ldr	r2, [r3, #8]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2140      	movs	r1, #64	@ 0x40
 800343c:	438a      	bics	r2, r1
 800343e:	609a      	str	r2, [r3, #8]
 8003440:	183b      	adds	r3, r7, r0
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003446:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003448:	f383 8810 	msr	PRIMASK, r3
}
 800344c:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2280      	movs	r2, #128	@ 0x80
 8003452:	589b      	ldr	r3, [r3, r2]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d016      	beq.n	8003486 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2280      	movs	r2, #128	@ 0x80
 800345c:	589b      	ldr	r3, [r3, r2]
 800345e:	4a17      	ldr	r2, [pc, #92]	@ (80034bc <HAL_UART_IRQHandler+0x2c8>)
 8003460:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2280      	movs	r2, #128	@ 0x80
 8003466:	589b      	ldr	r3, [r3, r2]
 8003468:	0018      	movs	r0, r3
 800346a:	f7fd ff07 	bl	800127c <HAL_DMA_Abort_IT>
 800346e:	1e03      	subs	r3, r0, #0
 8003470:	d01c      	beq.n	80034ac <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2280      	movs	r2, #128	@ 0x80
 8003476:	589b      	ldr	r3, [r3, r2]
 8003478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	2180      	movs	r1, #128	@ 0x80
 800347e:	5852      	ldr	r2, [r2, r1]
 8003480:	0010      	movs	r0, r2
 8003482:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003484:	e012      	b.n	80034ac <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	0018      	movs	r0, r3
 800348a:	f000 f9e1 	bl	8003850 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800348e:	e00d      	b.n	80034ac <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	0018      	movs	r0, r3
 8003494:	f000 f9dc 	bl	8003850 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003498:	e008      	b.n	80034ac <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	0018      	movs	r0, r3
 800349e:	f000 f9d7 	bl	8003850 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2290      	movs	r2, #144	@ 0x90
 80034a6:	2100      	movs	r1, #0
 80034a8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80034aa:	e1b9      	b.n	8003820 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034ac:	46c0      	nop			@ (mov r8, r8)
    return;
 80034ae:	e1b7      	b.n	8003820 <HAL_UART_IRQHandler+0x62c>
 80034b0:	0000080f 	.word	0x0000080f
 80034b4:	10000001 	.word	0x10000001
 80034b8:	04000120 	.word	0x04000120
 80034bc:	08004029 	.word	0x08004029

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d000      	beq.n	80034ca <HAL_UART_IRQHandler+0x2d6>
 80034c8:	e13e      	b.n	8003748 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80034ca:	23a4      	movs	r3, #164	@ 0xa4
 80034cc:	18fb      	adds	r3, r7, r3
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2210      	movs	r2, #16
 80034d2:	4013      	ands	r3, r2
 80034d4:	d100      	bne.n	80034d8 <HAL_UART_IRQHandler+0x2e4>
 80034d6:	e137      	b.n	8003748 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80034d8:	23a0      	movs	r3, #160	@ 0xa0
 80034da:	18fb      	adds	r3, r7, r3
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2210      	movs	r2, #16
 80034e0:	4013      	ands	r3, r2
 80034e2:	d100      	bne.n	80034e6 <HAL_UART_IRQHandler+0x2f2>
 80034e4:	e130      	b.n	8003748 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2210      	movs	r2, #16
 80034ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	2240      	movs	r2, #64	@ 0x40
 80034f6:	4013      	ands	r3, r2
 80034f8:	2b40      	cmp	r3, #64	@ 0x40
 80034fa:	d000      	beq.n	80034fe <HAL_UART_IRQHandler+0x30a>
 80034fc:	e0a4      	b.n	8003648 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2280      	movs	r2, #128	@ 0x80
 8003502:	589b      	ldr	r3, [r3, r2]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	685a      	ldr	r2, [r3, #4]
 8003508:	217e      	movs	r1, #126	@ 0x7e
 800350a:	187b      	adds	r3, r7, r1
 800350c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800350e:	187b      	adds	r3, r7, r1
 8003510:	881b      	ldrh	r3, [r3, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d100      	bne.n	8003518 <HAL_UART_IRQHandler+0x324>
 8003516:	e185      	b.n	8003824 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	225c      	movs	r2, #92	@ 0x5c
 800351c:	5a9b      	ldrh	r3, [r3, r2]
 800351e:	187a      	adds	r2, r7, r1
 8003520:	8812      	ldrh	r2, [r2, #0]
 8003522:	429a      	cmp	r2, r3
 8003524:	d300      	bcc.n	8003528 <HAL_UART_IRQHandler+0x334>
 8003526:	e17d      	b.n	8003824 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	187a      	adds	r2, r7, r1
 800352c:	215e      	movs	r1, #94	@ 0x5e
 800352e:	8812      	ldrh	r2, [r2, #0]
 8003530:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2280      	movs	r2, #128	@ 0x80
 8003536:	589b      	ldr	r3, [r3, r2]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2220      	movs	r2, #32
 800353e:	4013      	ands	r3, r2
 8003540:	d170      	bne.n	8003624 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003542:	f3ef 8310 	mrs	r3, PRIMASK
 8003546:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800354a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800354c:	2301      	movs	r3, #1
 800354e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003552:	f383 8810 	msr	PRIMASK, r3
}
 8003556:	46c0      	nop			@ (mov r8, r8)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	49b4      	ldr	r1, [pc, #720]	@ (8003834 <HAL_UART_IRQHandler+0x640>)
 8003564:	400a      	ands	r2, r1
 8003566:	601a      	str	r2, [r3, #0]
 8003568:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800356a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800356c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800356e:	f383 8810 	msr	PRIMASK, r3
}
 8003572:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003574:	f3ef 8310 	mrs	r3, PRIMASK
 8003578:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800357a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800357c:	677b      	str	r3, [r7, #116]	@ 0x74
 800357e:	2301      	movs	r3, #1
 8003580:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003582:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003584:	f383 8810 	msr	PRIMASK, r3
}
 8003588:	46c0      	nop			@ (mov r8, r8)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2101      	movs	r1, #1
 8003596:	438a      	bics	r2, r1
 8003598:	609a      	str	r2, [r3, #8]
 800359a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800359c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800359e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035a0:	f383 8810 	msr	PRIMASK, r3
}
 80035a4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035a6:	f3ef 8310 	mrs	r3, PRIMASK
 80035aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80035ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035ae:	673b      	str	r3, [r7, #112]	@ 0x70
 80035b0:	2301      	movs	r3, #1
 80035b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035b6:	f383 8810 	msr	PRIMASK, r3
}
 80035ba:	46c0      	nop			@ (mov r8, r8)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689a      	ldr	r2, [r3, #8]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2140      	movs	r1, #64	@ 0x40
 80035c8:	438a      	bics	r2, r1
 80035ca:	609a      	str	r2, [r3, #8]
 80035cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80035ce:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035d2:	f383 8810 	msr	PRIMASK, r3
}
 80035d6:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	228c      	movs	r2, #140	@ 0x8c
 80035dc:	2120      	movs	r1, #32
 80035de:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035e6:	f3ef 8310 	mrs	r3, PRIMASK
 80035ea:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80035ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80035f0:	2301      	movs	r3, #1
 80035f2:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80035f6:	f383 8810 	msr	PRIMASK, r3
}
 80035fa:	46c0      	nop			@ (mov r8, r8)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2110      	movs	r1, #16
 8003608:	438a      	bics	r2, r1
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800360e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003610:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003612:	f383 8810 	msr	PRIMASK, r3
}
 8003616:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2280      	movs	r2, #128	@ 0x80
 800361c:	589b      	ldr	r3, [r3, r2]
 800361e:	0018      	movs	r0, r3
 8003620:	f7fd fdca 	bl	80011b8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2202      	movs	r2, #2
 8003628:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	225c      	movs	r2, #92	@ 0x5c
 800362e:	5a9a      	ldrh	r2, [r3, r2]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	215e      	movs	r1, #94	@ 0x5e
 8003634:	5a5b      	ldrh	r3, [r3, r1]
 8003636:	b29b      	uxth	r3, r3
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	b29a      	uxth	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	0011      	movs	r1, r2
 8003640:	0018      	movs	r0, r3
 8003642:	f000 f90d 	bl	8003860 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003646:	e0ed      	b.n	8003824 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	225c      	movs	r2, #92	@ 0x5c
 800364c:	5a99      	ldrh	r1, [r3, r2]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	225e      	movs	r2, #94	@ 0x5e
 8003652:	5a9b      	ldrh	r3, [r3, r2]
 8003654:	b29a      	uxth	r2, r3
 8003656:	208e      	movs	r0, #142	@ 0x8e
 8003658:	183b      	adds	r3, r7, r0
 800365a:	1a8a      	subs	r2, r1, r2
 800365c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	225e      	movs	r2, #94	@ 0x5e
 8003662:	5a9b      	ldrh	r3, [r3, r2]
 8003664:	b29b      	uxth	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d100      	bne.n	800366c <HAL_UART_IRQHandler+0x478>
 800366a:	e0dd      	b.n	8003828 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 800366c:	183b      	adds	r3, r7, r0
 800366e:	881b      	ldrh	r3, [r3, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d100      	bne.n	8003676 <HAL_UART_IRQHandler+0x482>
 8003674:	e0d8      	b.n	8003828 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003676:	f3ef 8310 	mrs	r3, PRIMASK
 800367a:	60fb      	str	r3, [r7, #12]
  return(result);
 800367c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800367e:	2488      	movs	r4, #136	@ 0x88
 8003680:	193a      	adds	r2, r7, r4
 8003682:	6013      	str	r3, [r2, #0]
 8003684:	2301      	movs	r3, #1
 8003686:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	f383 8810 	msr	PRIMASK, r3
}
 800368e:	46c0      	nop			@ (mov r8, r8)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4967      	ldr	r1, [pc, #412]	@ (8003838 <HAL_UART_IRQHandler+0x644>)
 800369c:	400a      	ands	r2, r1
 800369e:	601a      	str	r2, [r3, #0]
 80036a0:	193b      	adds	r3, r7, r4
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f383 8810 	msr	PRIMASK, r3
}
 80036ac:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036ae:	f3ef 8310 	mrs	r3, PRIMASK
 80036b2:	61bb      	str	r3, [r7, #24]
  return(result);
 80036b4:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80036b6:	2484      	movs	r4, #132	@ 0x84
 80036b8:	193a      	adds	r2, r7, r4
 80036ba:	6013      	str	r3, [r2, #0]
 80036bc:	2301      	movs	r3, #1
 80036be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	f383 8810 	msr	PRIMASK, r3
}
 80036c6:	46c0      	nop			@ (mov r8, r8)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689a      	ldr	r2, [r3, #8]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	495a      	ldr	r1, [pc, #360]	@ (800383c <HAL_UART_IRQHandler+0x648>)
 80036d4:	400a      	ands	r2, r1
 80036d6:	609a      	str	r2, [r3, #8]
 80036d8:	193b      	adds	r3, r7, r4
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036de:	6a3b      	ldr	r3, [r7, #32]
 80036e0:	f383 8810 	msr	PRIMASK, r3
}
 80036e4:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	228c      	movs	r2, #140	@ 0x8c
 80036ea:	2120      	movs	r1, #32
 80036ec:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036fa:	f3ef 8310 	mrs	r3, PRIMASK
 80036fe:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003702:	2480      	movs	r4, #128	@ 0x80
 8003704:	193a      	adds	r2, r7, r4
 8003706:	6013      	str	r3, [r2, #0]
 8003708:	2301      	movs	r3, #1
 800370a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800370c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800370e:	f383 8810 	msr	PRIMASK, r3
}
 8003712:	46c0      	nop			@ (mov r8, r8)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2110      	movs	r1, #16
 8003720:	438a      	bics	r2, r1
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	193b      	adds	r3, r7, r4
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800372a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800372c:	f383 8810 	msr	PRIMASK, r3
}
 8003730:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2202      	movs	r2, #2
 8003736:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003738:	183b      	adds	r3, r7, r0
 800373a:	881a      	ldrh	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	0011      	movs	r1, r2
 8003740:	0018      	movs	r0, r3
 8003742:	f000 f88d 	bl	8003860 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003746:	e06f      	b.n	8003828 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003748:	23a4      	movs	r3, #164	@ 0xa4
 800374a:	18fb      	adds	r3, r7, r3
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	2380      	movs	r3, #128	@ 0x80
 8003750:	035b      	lsls	r3, r3, #13
 8003752:	4013      	ands	r3, r2
 8003754:	d010      	beq.n	8003778 <HAL_UART_IRQHandler+0x584>
 8003756:	239c      	movs	r3, #156	@ 0x9c
 8003758:	18fb      	adds	r3, r7, r3
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	2380      	movs	r3, #128	@ 0x80
 800375e:	03db      	lsls	r3, r3, #15
 8003760:	4013      	ands	r3, r2
 8003762:	d009      	beq.n	8003778 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2280      	movs	r2, #128	@ 0x80
 800376a:	0352      	lsls	r2, r2, #13
 800376c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	0018      	movs	r0, r3
 8003772:	f000 fc9c 	bl	80040ae <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003776:	e05a      	b.n	800382e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003778:	23a4      	movs	r3, #164	@ 0xa4
 800377a:	18fb      	adds	r3, r7, r3
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2280      	movs	r2, #128	@ 0x80
 8003780:	4013      	ands	r3, r2
 8003782:	d016      	beq.n	80037b2 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003784:	23a0      	movs	r3, #160	@ 0xa0
 8003786:	18fb      	adds	r3, r7, r3
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2280      	movs	r2, #128	@ 0x80
 800378c:	4013      	ands	r3, r2
 800378e:	d106      	bne.n	800379e <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003790:	239c      	movs	r3, #156	@ 0x9c
 8003792:	18fb      	adds	r3, r7, r3
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	2380      	movs	r3, #128	@ 0x80
 8003798:	041b      	lsls	r3, r3, #16
 800379a:	4013      	ands	r3, r2
 800379c:	d009      	beq.n	80037b2 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d042      	beq.n	800382c <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	0010      	movs	r0, r2
 80037ae:	4798      	blx	r3
    }
    return;
 80037b0:	e03c      	b.n	800382c <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80037b2:	23a4      	movs	r3, #164	@ 0xa4
 80037b4:	18fb      	adds	r3, r7, r3
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2240      	movs	r2, #64	@ 0x40
 80037ba:	4013      	ands	r3, r2
 80037bc:	d00a      	beq.n	80037d4 <HAL_UART_IRQHandler+0x5e0>
 80037be:	23a0      	movs	r3, #160	@ 0xa0
 80037c0:	18fb      	adds	r3, r7, r3
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2240      	movs	r2, #64	@ 0x40
 80037c6:	4013      	ands	r3, r2
 80037c8:	d004      	beq.n	80037d4 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	0018      	movs	r0, r3
 80037ce:	f000 fc42 	bl	8004056 <UART_EndTransmit_IT>
    return;
 80037d2:	e02c      	b.n	800382e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80037d4:	23a4      	movs	r3, #164	@ 0xa4
 80037d6:	18fb      	adds	r3, r7, r3
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	2380      	movs	r3, #128	@ 0x80
 80037dc:	041b      	lsls	r3, r3, #16
 80037de:	4013      	ands	r3, r2
 80037e0:	d00b      	beq.n	80037fa <HAL_UART_IRQHandler+0x606>
 80037e2:	23a0      	movs	r3, #160	@ 0xa0
 80037e4:	18fb      	adds	r3, r7, r3
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	2380      	movs	r3, #128	@ 0x80
 80037ea:	05db      	lsls	r3, r3, #23
 80037ec:	4013      	ands	r3, r2
 80037ee:	d004      	beq.n	80037fa <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	0018      	movs	r0, r3
 80037f4:	f000 fc6b 	bl	80040ce <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80037f8:	e019      	b.n	800382e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80037fa:	23a4      	movs	r3, #164	@ 0xa4
 80037fc:	18fb      	adds	r3, r7, r3
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	2380      	movs	r3, #128	@ 0x80
 8003802:	045b      	lsls	r3, r3, #17
 8003804:	4013      	ands	r3, r2
 8003806:	d012      	beq.n	800382e <HAL_UART_IRQHandler+0x63a>
 8003808:	23a0      	movs	r3, #160	@ 0xa0
 800380a:	18fb      	adds	r3, r7, r3
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	da0d      	bge.n	800382e <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	0018      	movs	r0, r3
 8003816:	f000 fc52 	bl	80040be <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800381a:	e008      	b.n	800382e <HAL_UART_IRQHandler+0x63a>
      return;
 800381c:	46c0      	nop			@ (mov r8, r8)
 800381e:	e006      	b.n	800382e <HAL_UART_IRQHandler+0x63a>
    return;
 8003820:	46c0      	nop			@ (mov r8, r8)
 8003822:	e004      	b.n	800382e <HAL_UART_IRQHandler+0x63a>
      return;
 8003824:	46c0      	nop			@ (mov r8, r8)
 8003826:	e002      	b.n	800382e <HAL_UART_IRQHandler+0x63a>
      return;
 8003828:	46c0      	nop			@ (mov r8, r8)
 800382a:	e000      	b.n	800382e <HAL_UART_IRQHandler+0x63a>
    return;
 800382c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800382e:	46bd      	mov	sp, r7
 8003830:	b02a      	add	sp, #168	@ 0xa8
 8003832:	bdb0      	pop	{r4, r5, r7, pc}
 8003834:	fffffeff 	.word	0xfffffeff
 8003838:	fffffedf 	.word	0xfffffedf
 800383c:	effffffe 	.word	0xeffffffe

08003840 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003848:	46c0      	nop			@ (mov r8, r8)
 800384a:	46bd      	mov	sp, r7
 800384c:	b002      	add	sp, #8
 800384e:	bd80      	pop	{r7, pc}

08003850 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003858:	46c0      	nop			@ (mov r8, r8)
 800385a:	46bd      	mov	sp, r7
 800385c:	b002      	add	sp, #8
 800385e:	bd80      	pop	{r7, pc}

08003860 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	000a      	movs	r2, r1
 800386a:	1cbb      	adds	r3, r7, #2
 800386c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800386e:	46c0      	nop			@ (mov r8, r8)
 8003870:	46bd      	mov	sp, r7
 8003872:	b002      	add	sp, #8
 8003874:	bd80      	pop	{r7, pc}
	...

08003878 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b088      	sub	sp, #32
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003880:	231a      	movs	r3, #26
 8003882:	18fb      	adds	r3, r7, r3
 8003884:	2200      	movs	r2, #0
 8003886:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	431a      	orrs	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	431a      	orrs	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	69db      	ldr	r3, [r3, #28]
 800389c:	4313      	orrs	r3, r2
 800389e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4abc      	ldr	r2, [pc, #752]	@ (8003b98 <UART_SetConfig+0x320>)
 80038a8:	4013      	ands	r3, r2
 80038aa:	0019      	movs	r1, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	69fa      	ldr	r2, [r7, #28]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	4ab7      	ldr	r2, [pc, #732]	@ (8003b9c <UART_SetConfig+0x324>)
 80038be:	4013      	ands	r3, r2
 80038c0:	0019      	movs	r1, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68da      	ldr	r2, [r3, #12]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	69fa      	ldr	r2, [r7, #28]
 80038da:	4313      	orrs	r3, r2
 80038dc:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	4aae      	ldr	r2, [pc, #696]	@ (8003ba0 <UART_SetConfig+0x328>)
 80038e6:	4013      	ands	r3, r2
 80038e8:	0019      	movs	r1, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	69fa      	ldr	r2, [r7, #28]
 80038f0:	430a      	orrs	r2, r1
 80038f2:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038fa:	220f      	movs	r2, #15
 80038fc:	4393      	bics	r3, r2
 80038fe:	0019      	movs	r1, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	430a      	orrs	r2, r1
 800390a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4aa4      	ldr	r2, [pc, #656]	@ (8003ba4 <UART_SetConfig+0x32c>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d127      	bne.n	8003966 <UART_SetConfig+0xee>
 8003916:	4ba4      	ldr	r3, [pc, #656]	@ (8003ba8 <UART_SetConfig+0x330>)
 8003918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800391a:	2203      	movs	r2, #3
 800391c:	4013      	ands	r3, r2
 800391e:	2b03      	cmp	r3, #3
 8003920:	d017      	beq.n	8003952 <UART_SetConfig+0xda>
 8003922:	d81b      	bhi.n	800395c <UART_SetConfig+0xe4>
 8003924:	2b02      	cmp	r3, #2
 8003926:	d00a      	beq.n	800393e <UART_SetConfig+0xc6>
 8003928:	d818      	bhi.n	800395c <UART_SetConfig+0xe4>
 800392a:	2b00      	cmp	r3, #0
 800392c:	d002      	beq.n	8003934 <UART_SetConfig+0xbc>
 800392e:	2b01      	cmp	r3, #1
 8003930:	d00a      	beq.n	8003948 <UART_SetConfig+0xd0>
 8003932:	e013      	b.n	800395c <UART_SetConfig+0xe4>
 8003934:	231b      	movs	r3, #27
 8003936:	18fb      	adds	r3, r7, r3
 8003938:	2200      	movs	r2, #0
 800393a:	701a      	strb	r2, [r3, #0]
 800393c:	e058      	b.n	80039f0 <UART_SetConfig+0x178>
 800393e:	231b      	movs	r3, #27
 8003940:	18fb      	adds	r3, r7, r3
 8003942:	2202      	movs	r2, #2
 8003944:	701a      	strb	r2, [r3, #0]
 8003946:	e053      	b.n	80039f0 <UART_SetConfig+0x178>
 8003948:	231b      	movs	r3, #27
 800394a:	18fb      	adds	r3, r7, r3
 800394c:	2204      	movs	r2, #4
 800394e:	701a      	strb	r2, [r3, #0]
 8003950:	e04e      	b.n	80039f0 <UART_SetConfig+0x178>
 8003952:	231b      	movs	r3, #27
 8003954:	18fb      	adds	r3, r7, r3
 8003956:	2208      	movs	r2, #8
 8003958:	701a      	strb	r2, [r3, #0]
 800395a:	e049      	b.n	80039f0 <UART_SetConfig+0x178>
 800395c:	231b      	movs	r3, #27
 800395e:	18fb      	adds	r3, r7, r3
 8003960:	2210      	movs	r2, #16
 8003962:	701a      	strb	r2, [r3, #0]
 8003964:	e044      	b.n	80039f0 <UART_SetConfig+0x178>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a90      	ldr	r2, [pc, #576]	@ (8003bac <UART_SetConfig+0x334>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d127      	bne.n	80039c0 <UART_SetConfig+0x148>
 8003970:	4b8d      	ldr	r3, [pc, #564]	@ (8003ba8 <UART_SetConfig+0x330>)
 8003972:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003974:	220c      	movs	r2, #12
 8003976:	4013      	ands	r3, r2
 8003978:	2b0c      	cmp	r3, #12
 800397a:	d017      	beq.n	80039ac <UART_SetConfig+0x134>
 800397c:	d81b      	bhi.n	80039b6 <UART_SetConfig+0x13e>
 800397e:	2b08      	cmp	r3, #8
 8003980:	d00a      	beq.n	8003998 <UART_SetConfig+0x120>
 8003982:	d818      	bhi.n	80039b6 <UART_SetConfig+0x13e>
 8003984:	2b00      	cmp	r3, #0
 8003986:	d002      	beq.n	800398e <UART_SetConfig+0x116>
 8003988:	2b04      	cmp	r3, #4
 800398a:	d00a      	beq.n	80039a2 <UART_SetConfig+0x12a>
 800398c:	e013      	b.n	80039b6 <UART_SetConfig+0x13e>
 800398e:	231b      	movs	r3, #27
 8003990:	18fb      	adds	r3, r7, r3
 8003992:	2200      	movs	r2, #0
 8003994:	701a      	strb	r2, [r3, #0]
 8003996:	e02b      	b.n	80039f0 <UART_SetConfig+0x178>
 8003998:	231b      	movs	r3, #27
 800399a:	18fb      	adds	r3, r7, r3
 800399c:	2202      	movs	r2, #2
 800399e:	701a      	strb	r2, [r3, #0]
 80039a0:	e026      	b.n	80039f0 <UART_SetConfig+0x178>
 80039a2:	231b      	movs	r3, #27
 80039a4:	18fb      	adds	r3, r7, r3
 80039a6:	2204      	movs	r2, #4
 80039a8:	701a      	strb	r2, [r3, #0]
 80039aa:	e021      	b.n	80039f0 <UART_SetConfig+0x178>
 80039ac:	231b      	movs	r3, #27
 80039ae:	18fb      	adds	r3, r7, r3
 80039b0:	2208      	movs	r2, #8
 80039b2:	701a      	strb	r2, [r3, #0]
 80039b4:	e01c      	b.n	80039f0 <UART_SetConfig+0x178>
 80039b6:	231b      	movs	r3, #27
 80039b8:	18fb      	adds	r3, r7, r3
 80039ba:	2210      	movs	r2, #16
 80039bc:	701a      	strb	r2, [r3, #0]
 80039be:	e017      	b.n	80039f0 <UART_SetConfig+0x178>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a7a      	ldr	r2, [pc, #488]	@ (8003bb0 <UART_SetConfig+0x338>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d104      	bne.n	80039d4 <UART_SetConfig+0x15c>
 80039ca:	231b      	movs	r3, #27
 80039cc:	18fb      	adds	r3, r7, r3
 80039ce:	2200      	movs	r2, #0
 80039d0:	701a      	strb	r2, [r3, #0]
 80039d2:	e00d      	b.n	80039f0 <UART_SetConfig+0x178>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a76      	ldr	r2, [pc, #472]	@ (8003bb4 <UART_SetConfig+0x33c>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d104      	bne.n	80039e8 <UART_SetConfig+0x170>
 80039de:	231b      	movs	r3, #27
 80039e0:	18fb      	adds	r3, r7, r3
 80039e2:	2200      	movs	r2, #0
 80039e4:	701a      	strb	r2, [r3, #0]
 80039e6:	e003      	b.n	80039f0 <UART_SetConfig+0x178>
 80039e8:	231b      	movs	r3, #27
 80039ea:	18fb      	adds	r3, r7, r3
 80039ec:	2210      	movs	r2, #16
 80039ee:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	69da      	ldr	r2, [r3, #28]
 80039f4:	2380      	movs	r3, #128	@ 0x80
 80039f6:	021b      	lsls	r3, r3, #8
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d000      	beq.n	80039fe <UART_SetConfig+0x186>
 80039fc:	e065      	b.n	8003aca <UART_SetConfig+0x252>
  {
    switch (clocksource)
 80039fe:	231b      	movs	r3, #27
 8003a00:	18fb      	adds	r3, r7, r3
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	2b08      	cmp	r3, #8
 8003a06:	d015      	beq.n	8003a34 <UART_SetConfig+0x1bc>
 8003a08:	dc18      	bgt.n	8003a3c <UART_SetConfig+0x1c4>
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	d00d      	beq.n	8003a2a <UART_SetConfig+0x1b2>
 8003a0e:	dc15      	bgt.n	8003a3c <UART_SetConfig+0x1c4>
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d002      	beq.n	8003a1a <UART_SetConfig+0x1a2>
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d005      	beq.n	8003a24 <UART_SetConfig+0x1ac>
 8003a18:	e010      	b.n	8003a3c <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a1a:	f7ff f9a7 	bl	8002d6c <HAL_RCC_GetPCLK1Freq>
 8003a1e:	0003      	movs	r3, r0
 8003a20:	617b      	str	r3, [r7, #20]
        break;
 8003a22:	e012      	b.n	8003a4a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a24:	4b64      	ldr	r3, [pc, #400]	@ (8003bb8 <UART_SetConfig+0x340>)
 8003a26:	617b      	str	r3, [r7, #20]
        break;
 8003a28:	e00f      	b.n	8003a4a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a2a:	f7ff f913 	bl	8002c54 <HAL_RCC_GetSysClockFreq>
 8003a2e:	0003      	movs	r3, r0
 8003a30:	617b      	str	r3, [r7, #20]
        break;
 8003a32:	e00a      	b.n	8003a4a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a34:	2380      	movs	r3, #128	@ 0x80
 8003a36:	021b      	lsls	r3, r3, #8
 8003a38:	617b      	str	r3, [r7, #20]
        break;
 8003a3a:	e006      	b.n	8003a4a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003a40:	231a      	movs	r3, #26
 8003a42:	18fb      	adds	r3, r7, r3
 8003a44:	2201      	movs	r2, #1
 8003a46:	701a      	strb	r2, [r3, #0]
        break;
 8003a48:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d100      	bne.n	8003a52 <UART_SetConfig+0x1da>
 8003a50:	e08d      	b.n	8003b6e <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a56:	4b59      	ldr	r3, [pc, #356]	@ (8003bbc <UART_SetConfig+0x344>)
 8003a58:	0052      	lsls	r2, r2, #1
 8003a5a:	5ad3      	ldrh	r3, [r2, r3]
 8003a5c:	0019      	movs	r1, r3
 8003a5e:	6978      	ldr	r0, [r7, #20]
 8003a60:	f7fc fb60 	bl	8000124 <__udivsi3>
 8003a64:	0003      	movs	r3, r0
 8003a66:	005a      	lsls	r2, r3, #1
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	085b      	lsrs	r3, r3, #1
 8003a6e:	18d2      	adds	r2, r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	0019      	movs	r1, r3
 8003a76:	0010      	movs	r0, r2
 8003a78:	f7fc fb54 	bl	8000124 <__udivsi3>
 8003a7c:	0003      	movs	r3, r0
 8003a7e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	2b0f      	cmp	r3, #15
 8003a84:	d91c      	bls.n	8003ac0 <UART_SetConfig+0x248>
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	2380      	movs	r3, #128	@ 0x80
 8003a8a:	025b      	lsls	r3, r3, #9
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d217      	bcs.n	8003ac0 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	200e      	movs	r0, #14
 8003a96:	183b      	adds	r3, r7, r0
 8003a98:	210f      	movs	r1, #15
 8003a9a:	438a      	bics	r2, r1
 8003a9c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	085b      	lsrs	r3, r3, #1
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	2207      	movs	r2, #7
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	b299      	uxth	r1, r3
 8003aaa:	183b      	adds	r3, r7, r0
 8003aac:	183a      	adds	r2, r7, r0
 8003aae:	8812      	ldrh	r2, [r2, #0]
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	183a      	adds	r2, r7, r0
 8003aba:	8812      	ldrh	r2, [r2, #0]
 8003abc:	60da      	str	r2, [r3, #12]
 8003abe:	e056      	b.n	8003b6e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8003ac0:	231a      	movs	r3, #26
 8003ac2:	18fb      	adds	r3, r7, r3
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	701a      	strb	r2, [r3, #0]
 8003ac8:	e051      	b.n	8003b6e <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003aca:	231b      	movs	r3, #27
 8003acc:	18fb      	adds	r3, r7, r3
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	2b08      	cmp	r3, #8
 8003ad2:	d015      	beq.n	8003b00 <UART_SetConfig+0x288>
 8003ad4:	dc18      	bgt.n	8003b08 <UART_SetConfig+0x290>
 8003ad6:	2b04      	cmp	r3, #4
 8003ad8:	d00d      	beq.n	8003af6 <UART_SetConfig+0x27e>
 8003ada:	dc15      	bgt.n	8003b08 <UART_SetConfig+0x290>
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d002      	beq.n	8003ae6 <UART_SetConfig+0x26e>
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d005      	beq.n	8003af0 <UART_SetConfig+0x278>
 8003ae4:	e010      	b.n	8003b08 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ae6:	f7ff f941 	bl	8002d6c <HAL_RCC_GetPCLK1Freq>
 8003aea:	0003      	movs	r3, r0
 8003aec:	617b      	str	r3, [r7, #20]
        break;
 8003aee:	e012      	b.n	8003b16 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003af0:	4b31      	ldr	r3, [pc, #196]	@ (8003bb8 <UART_SetConfig+0x340>)
 8003af2:	617b      	str	r3, [r7, #20]
        break;
 8003af4:	e00f      	b.n	8003b16 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003af6:	f7ff f8ad 	bl	8002c54 <HAL_RCC_GetSysClockFreq>
 8003afa:	0003      	movs	r3, r0
 8003afc:	617b      	str	r3, [r7, #20]
        break;
 8003afe:	e00a      	b.n	8003b16 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b00:	2380      	movs	r3, #128	@ 0x80
 8003b02:	021b      	lsls	r3, r3, #8
 8003b04:	617b      	str	r3, [r7, #20]
        break;
 8003b06:	e006      	b.n	8003b16 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003b0c:	231a      	movs	r3, #26
 8003b0e:	18fb      	adds	r3, r7, r3
 8003b10:	2201      	movs	r2, #1
 8003b12:	701a      	strb	r2, [r3, #0]
        break;
 8003b14:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d028      	beq.n	8003b6e <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b20:	4b26      	ldr	r3, [pc, #152]	@ (8003bbc <UART_SetConfig+0x344>)
 8003b22:	0052      	lsls	r2, r2, #1
 8003b24:	5ad3      	ldrh	r3, [r2, r3]
 8003b26:	0019      	movs	r1, r3
 8003b28:	6978      	ldr	r0, [r7, #20]
 8003b2a:	f7fc fafb 	bl	8000124 <__udivsi3>
 8003b2e:	0003      	movs	r3, r0
 8003b30:	001a      	movs	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	085b      	lsrs	r3, r3, #1
 8003b38:	18d2      	adds	r2, r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	0019      	movs	r1, r3
 8003b40:	0010      	movs	r0, r2
 8003b42:	f7fc faef 	bl	8000124 <__udivsi3>
 8003b46:	0003      	movs	r3, r0
 8003b48:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	2b0f      	cmp	r3, #15
 8003b4e:	d90a      	bls.n	8003b66 <UART_SetConfig+0x2ee>
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	2380      	movs	r3, #128	@ 0x80
 8003b54:	025b      	lsls	r3, r3, #9
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d205      	bcs.n	8003b66 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	60da      	str	r2, [r3, #12]
 8003b64:	e003      	b.n	8003b6e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8003b66:	231a      	movs	r3, #26
 8003b68:	18fb      	adds	r3, r7, r3
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	226a      	movs	r2, #106	@ 0x6a
 8003b72:	2101      	movs	r1, #1
 8003b74:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2268      	movs	r2, #104	@ 0x68
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003b8a:	231a      	movs	r3, #26
 8003b8c:	18fb      	adds	r3, r7, r3
 8003b8e:	781b      	ldrb	r3, [r3, #0]
}
 8003b90:	0018      	movs	r0, r3
 8003b92:	46bd      	mov	sp, r7
 8003b94:	b008      	add	sp, #32
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	cfff69f3 	.word	0xcfff69f3
 8003b9c:	ffffcfff 	.word	0xffffcfff
 8003ba0:	11fff4ff 	.word	0x11fff4ff
 8003ba4:	40013800 	.word	0x40013800
 8003ba8:	40021000 	.word	0x40021000
 8003bac:	40004400 	.word	0x40004400
 8003bb0:	40004800 	.word	0x40004800
 8003bb4:	40004c00 	.word	0x40004c00
 8003bb8:	00f42400 	.word	0x00f42400
 8003bbc:	08004e4c 	.word	0x08004e4c

08003bc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bcc:	2208      	movs	r2, #8
 8003bce:	4013      	ands	r3, r2
 8003bd0:	d00b      	beq.n	8003bea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	4a4a      	ldr	r2, [pc, #296]	@ (8003d04 <UART_AdvFeatureConfig+0x144>)
 8003bda:	4013      	ands	r3, r2
 8003bdc:	0019      	movs	r1, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bee:	2201      	movs	r2, #1
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	d00b      	beq.n	8003c0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	4a43      	ldr	r2, [pc, #268]	@ (8003d08 <UART_AdvFeatureConfig+0x148>)
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	0019      	movs	r1, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c10:	2202      	movs	r2, #2
 8003c12:	4013      	ands	r3, r2
 8003c14:	d00b      	beq.n	8003c2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	4a3b      	ldr	r2, [pc, #236]	@ (8003d0c <UART_AdvFeatureConfig+0x14c>)
 8003c1e:	4013      	ands	r3, r2
 8003c20:	0019      	movs	r1, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c32:	2204      	movs	r2, #4
 8003c34:	4013      	ands	r3, r2
 8003c36:	d00b      	beq.n	8003c50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	4a34      	ldr	r2, [pc, #208]	@ (8003d10 <UART_AdvFeatureConfig+0x150>)
 8003c40:	4013      	ands	r3, r2
 8003c42:	0019      	movs	r1, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c54:	2210      	movs	r2, #16
 8003c56:	4013      	ands	r3, r2
 8003c58:	d00b      	beq.n	8003c72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	4a2c      	ldr	r2, [pc, #176]	@ (8003d14 <UART_AdvFeatureConfig+0x154>)
 8003c62:	4013      	ands	r3, r2
 8003c64:	0019      	movs	r1, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c76:	2220      	movs	r2, #32
 8003c78:	4013      	ands	r3, r2
 8003c7a:	d00b      	beq.n	8003c94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	4a25      	ldr	r2, [pc, #148]	@ (8003d18 <UART_AdvFeatureConfig+0x158>)
 8003c84:	4013      	ands	r3, r2
 8003c86:	0019      	movs	r1, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	430a      	orrs	r2, r1
 8003c92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c98:	2240      	movs	r2, #64	@ 0x40
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	d01d      	beq.n	8003cda <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	4a1d      	ldr	r2, [pc, #116]	@ (8003d1c <UART_AdvFeatureConfig+0x15c>)
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	0019      	movs	r1, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003cba:	2380      	movs	r3, #128	@ 0x80
 8003cbc:	035b      	lsls	r3, r3, #13
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d10b      	bne.n	8003cda <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	4a15      	ldr	r2, [pc, #84]	@ (8003d20 <UART_AdvFeatureConfig+0x160>)
 8003cca:	4013      	ands	r3, r2
 8003ccc:	0019      	movs	r1, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cde:	2280      	movs	r2, #128	@ 0x80
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	d00b      	beq.n	8003cfc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	4a0e      	ldr	r2, [pc, #56]	@ (8003d24 <UART_AdvFeatureConfig+0x164>)
 8003cec:	4013      	ands	r3, r2
 8003cee:	0019      	movs	r1, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	605a      	str	r2, [r3, #4]
  }
}
 8003cfc:	46c0      	nop			@ (mov r8, r8)
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	b002      	add	sp, #8
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	ffff7fff 	.word	0xffff7fff
 8003d08:	fffdffff 	.word	0xfffdffff
 8003d0c:	fffeffff 	.word	0xfffeffff
 8003d10:	fffbffff 	.word	0xfffbffff
 8003d14:	ffffefff 	.word	0xffffefff
 8003d18:	ffffdfff 	.word	0xffffdfff
 8003d1c:	ffefffff 	.word	0xffefffff
 8003d20:	ff9fffff 	.word	0xff9fffff
 8003d24:	fff7ffff 	.word	0xfff7ffff

08003d28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b092      	sub	sp, #72	@ 0x48
 8003d2c:	af02      	add	r7, sp, #8
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2290      	movs	r2, #144	@ 0x90
 8003d34:	2100      	movs	r1, #0
 8003d36:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d38:	f7fd f932 	bl	8000fa0 <HAL_GetTick>
 8003d3c:	0003      	movs	r3, r0
 8003d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2208      	movs	r2, #8
 8003d48:	4013      	ands	r3, r2
 8003d4a:	2b08      	cmp	r3, #8
 8003d4c:	d12d      	bne.n	8003daa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d50:	2280      	movs	r2, #128	@ 0x80
 8003d52:	0391      	lsls	r1, r2, #14
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	4a47      	ldr	r2, [pc, #284]	@ (8003e74 <UART_CheckIdleState+0x14c>)
 8003d58:	9200      	str	r2, [sp, #0]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f000 f88e 	bl	8003e7c <UART_WaitOnFlagUntilTimeout>
 8003d60:	1e03      	subs	r3, r0, #0
 8003d62:	d022      	beq.n	8003daa <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d64:	f3ef 8310 	mrs	r3, PRIMASK
 8003d68:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003d6c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d6e:	2301      	movs	r3, #1
 8003d70:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d74:	f383 8810 	msr	PRIMASK, r3
}
 8003d78:	46c0      	nop			@ (mov r8, r8)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2180      	movs	r1, #128	@ 0x80
 8003d86:	438a      	bics	r2, r1
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d90:	f383 8810 	msr	PRIMASK, r3
}
 8003d94:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2288      	movs	r2, #136	@ 0x88
 8003d9a:	2120      	movs	r1, #32
 8003d9c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2284      	movs	r2, #132	@ 0x84
 8003da2:	2100      	movs	r1, #0
 8003da4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e060      	b.n	8003e6c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2204      	movs	r2, #4
 8003db2:	4013      	ands	r3, r2
 8003db4:	2b04      	cmp	r3, #4
 8003db6:	d146      	bne.n	8003e46 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003db8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dba:	2280      	movs	r2, #128	@ 0x80
 8003dbc:	03d1      	lsls	r1, r2, #15
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	4a2c      	ldr	r2, [pc, #176]	@ (8003e74 <UART_CheckIdleState+0x14c>)
 8003dc2:	9200      	str	r2, [sp, #0]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f000 f859 	bl	8003e7c <UART_WaitOnFlagUntilTimeout>
 8003dca:	1e03      	subs	r3, r0, #0
 8003dcc:	d03b      	beq.n	8003e46 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dce:	f3ef 8310 	mrs	r3, PRIMASK
 8003dd2:	60fb      	str	r3, [r7, #12]
  return(result);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003dd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003dd8:	2301      	movs	r3, #1
 8003dda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	f383 8810 	msr	PRIMASK, r3
}
 8003de2:	46c0      	nop			@ (mov r8, r8)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4922      	ldr	r1, [pc, #136]	@ (8003e78 <UART_CheckIdleState+0x150>)
 8003df0:	400a      	ands	r2, r1
 8003df2:	601a      	str	r2, [r3, #0]
 8003df4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003df6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	f383 8810 	msr	PRIMASK, r3
}
 8003dfe:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e00:	f3ef 8310 	mrs	r3, PRIMASK
 8003e04:	61bb      	str	r3, [r7, #24]
  return(result);
 8003e06:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e08:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	f383 8810 	msr	PRIMASK, r3
}
 8003e14:	46c0      	nop			@ (mov r8, r8)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689a      	ldr	r2, [r3, #8]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2101      	movs	r1, #1
 8003e22:	438a      	bics	r2, r1
 8003e24:	609a      	str	r2, [r3, #8]
 8003e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e28:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e2a:	6a3b      	ldr	r3, [r7, #32]
 8003e2c:	f383 8810 	msr	PRIMASK, r3
}
 8003e30:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	228c      	movs	r2, #140	@ 0x8c
 8003e36:	2120      	movs	r1, #32
 8003e38:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2284      	movs	r2, #132	@ 0x84
 8003e3e:	2100      	movs	r1, #0
 8003e40:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e012      	b.n	8003e6c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2288      	movs	r2, #136	@ 0x88
 8003e4a:	2120      	movs	r1, #32
 8003e4c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	228c      	movs	r2, #140	@ 0x8c
 8003e52:	2120      	movs	r1, #32
 8003e54:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2284      	movs	r2, #132	@ 0x84
 8003e66:	2100      	movs	r1, #0
 8003e68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	0018      	movs	r0, r3
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	b010      	add	sp, #64	@ 0x40
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	01ffffff 	.word	0x01ffffff
 8003e78:	fffffedf 	.word	0xfffffedf

08003e7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	603b      	str	r3, [r7, #0]
 8003e88:	1dfb      	adds	r3, r7, #7
 8003e8a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e8c:	e051      	b.n	8003f32 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	3301      	adds	r3, #1
 8003e92:	d04e      	beq.n	8003f32 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e94:	f7fd f884 	bl	8000fa0 <HAL_GetTick>
 8003e98:	0002      	movs	r2, r0
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	69ba      	ldr	r2, [r7, #24]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d302      	bcc.n	8003eaa <UART_WaitOnFlagUntilTimeout+0x2e>
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e051      	b.n	8003f52 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2204      	movs	r2, #4
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	d03b      	beq.n	8003f32 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	2b80      	cmp	r3, #128	@ 0x80
 8003ebe:	d038      	beq.n	8003f32 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	2b40      	cmp	r3, #64	@ 0x40
 8003ec4:	d035      	beq.n	8003f32 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	69db      	ldr	r3, [r3, #28]
 8003ecc:	2208      	movs	r2, #8
 8003ece:	4013      	ands	r3, r2
 8003ed0:	2b08      	cmp	r3, #8
 8003ed2:	d111      	bne.n	8003ef8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2208      	movs	r2, #8
 8003eda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	0018      	movs	r0, r3
 8003ee0:	f000 f83c 	bl	8003f5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2290      	movs	r2, #144	@ 0x90
 8003ee8:	2108      	movs	r1, #8
 8003eea:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2284      	movs	r2, #132	@ 0x84
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e02c      	b.n	8003f52 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	69da      	ldr	r2, [r3, #28]
 8003efe:	2380      	movs	r3, #128	@ 0x80
 8003f00:	011b      	lsls	r3, r3, #4
 8003f02:	401a      	ands	r2, r3
 8003f04:	2380      	movs	r3, #128	@ 0x80
 8003f06:	011b      	lsls	r3, r3, #4
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d112      	bne.n	8003f32 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2280      	movs	r2, #128	@ 0x80
 8003f12:	0112      	lsls	r2, r2, #4
 8003f14:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	0018      	movs	r0, r3
 8003f1a:	f000 f81f 	bl	8003f5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2290      	movs	r2, #144	@ 0x90
 8003f22:	2120      	movs	r1, #32
 8003f24:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2284      	movs	r2, #132	@ 0x84
 8003f2a:	2100      	movs	r1, #0
 8003f2c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e00f      	b.n	8003f52 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	69db      	ldr	r3, [r3, #28]
 8003f38:	68ba      	ldr	r2, [r7, #8]
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	68ba      	ldr	r2, [r7, #8]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	425a      	negs	r2, r3
 8003f42:	4153      	adcs	r3, r2
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	001a      	movs	r2, r3
 8003f48:	1dfb      	adds	r3, r7, #7
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d09e      	beq.n	8003e8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	0018      	movs	r0, r3
 8003f54:	46bd      	mov	sp, r7
 8003f56:	b004      	add	sp, #16
 8003f58:	bd80      	pop	{r7, pc}
	...

08003f5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b08e      	sub	sp, #56	@ 0x38
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f64:	f3ef 8310 	mrs	r3, PRIMASK
 8003f68:	617b      	str	r3, [r7, #20]
  return(result);
 8003f6a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f6e:	2301      	movs	r3, #1
 8003f70:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	f383 8810 	msr	PRIMASK, r3
}
 8003f78:	46c0      	nop			@ (mov r8, r8)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4926      	ldr	r1, [pc, #152]	@ (8004020 <UART_EndRxTransfer+0xc4>)
 8003f86:	400a      	ands	r2, r1
 8003f88:	601a      	str	r2, [r3, #0]
 8003f8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	f383 8810 	msr	PRIMASK, r3
}
 8003f94:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f96:	f3ef 8310 	mrs	r3, PRIMASK
 8003f9a:	623b      	str	r3, [r7, #32]
  return(result);
 8003f9c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003f9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa6:	f383 8810 	msr	PRIMASK, r3
}
 8003faa:	46c0      	nop			@ (mov r8, r8)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	689a      	ldr	r2, [r3, #8]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	491b      	ldr	r1, [pc, #108]	@ (8004024 <UART_EndRxTransfer+0xc8>)
 8003fb8:	400a      	ands	r2, r1
 8003fba:	609a      	str	r2, [r3, #8]
 8003fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fc2:	f383 8810 	msr	PRIMASK, r3
}
 8003fc6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d118      	bne.n	8004002 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fd0:	f3ef 8310 	mrs	r3, PRIMASK
 8003fd4:	60bb      	str	r3, [r7, #8]
  return(result);
 8003fd6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fda:	2301      	movs	r3, #1
 8003fdc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f383 8810 	msr	PRIMASK, r3
}
 8003fe4:	46c0      	nop			@ (mov r8, r8)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2110      	movs	r1, #16
 8003ff2:	438a      	bics	r2, r1
 8003ff4:	601a      	str	r2, [r3, #0]
 8003ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ff8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	f383 8810 	msr	PRIMASK, r3
}
 8004000:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	228c      	movs	r2, #140	@ 0x8c
 8004006:	2120      	movs	r1, #32
 8004008:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004016:	46c0      	nop			@ (mov r8, r8)
 8004018:	46bd      	mov	sp, r7
 800401a:	b00e      	add	sp, #56	@ 0x38
 800401c:	bd80      	pop	{r7, pc}
 800401e:	46c0      	nop			@ (mov r8, r8)
 8004020:	fffffedf 	.word	0xfffffedf
 8004024:	effffffe 	.word	0xeffffffe

08004028 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004034:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	225e      	movs	r2, #94	@ 0x5e
 800403a:	2100      	movs	r1, #0
 800403c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2256      	movs	r2, #86	@ 0x56
 8004042:	2100      	movs	r1, #0
 8004044:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	0018      	movs	r0, r3
 800404a:	f7ff fc01 	bl	8003850 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800404e:	46c0      	nop			@ (mov r8, r8)
 8004050:	46bd      	mov	sp, r7
 8004052:	b004      	add	sp, #16
 8004054:	bd80      	pop	{r7, pc}

08004056 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b086      	sub	sp, #24
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800405e:	f3ef 8310 	mrs	r3, PRIMASK
 8004062:	60bb      	str	r3, [r7, #8]
  return(result);
 8004064:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004066:	617b      	str	r3, [r7, #20]
 8004068:	2301      	movs	r3, #1
 800406a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f383 8810 	msr	PRIMASK, r3
}
 8004072:	46c0      	nop			@ (mov r8, r8)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2140      	movs	r1, #64	@ 0x40
 8004080:	438a      	bics	r2, r1
 8004082:	601a      	str	r2, [r3, #0]
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	f383 8810 	msr	PRIMASK, r3
}
 800408e:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2288      	movs	r2, #136	@ 0x88
 8004094:	2120      	movs	r1, #32
 8004096:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	0018      	movs	r0, r3
 80040a2:	f7ff fbcd 	bl	8003840 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040a6:	46c0      	nop			@ (mov r8, r8)
 80040a8:	46bd      	mov	sp, r7
 80040aa:	b006      	add	sp, #24
 80040ac:	bd80      	pop	{r7, pc}

080040ae <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80040ae:	b580      	push	{r7, lr}
 80040b0:	b082      	sub	sp, #8
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80040b6:	46c0      	nop			@ (mov r8, r8)
 80040b8:	46bd      	mov	sp, r7
 80040ba:	b002      	add	sp, #8
 80040bc:	bd80      	pop	{r7, pc}

080040be <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b082      	sub	sp, #8
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80040c6:	46c0      	nop			@ (mov r8, r8)
 80040c8:	46bd      	mov	sp, r7
 80040ca:	b002      	add	sp, #8
 80040cc:	bd80      	pop	{r7, pc}

080040ce <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b082      	sub	sp, #8
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80040d6:	46c0      	nop			@ (mov r8, r8)
 80040d8:	46bd      	mov	sp, r7
 80040da:	b002      	add	sp, #8
 80040dc:	bd80      	pop	{r7, pc}
	...

080040e0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2284      	movs	r2, #132	@ 0x84
 80040ec:	5c9b      	ldrb	r3, [r3, r2]
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d101      	bne.n	80040f6 <HAL_UARTEx_DisableFifoMode+0x16>
 80040f2:	2302      	movs	r3, #2
 80040f4:	e027      	b.n	8004146 <HAL_UARTEx_DisableFifoMode+0x66>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2284      	movs	r2, #132	@ 0x84
 80040fa:	2101      	movs	r1, #1
 80040fc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2288      	movs	r2, #136	@ 0x88
 8004102:	2124      	movs	r1, #36	@ 0x24
 8004104:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2101      	movs	r1, #1
 800411a:	438a      	bics	r2, r1
 800411c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	4a0b      	ldr	r2, [pc, #44]	@ (8004150 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004122:	4013      	ands	r3, r2
 8004124:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2288      	movs	r2, #136	@ 0x88
 8004138:	2120      	movs	r1, #32
 800413a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2284      	movs	r2, #132	@ 0x84
 8004140:	2100      	movs	r1, #0
 8004142:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	0018      	movs	r0, r3
 8004148:	46bd      	mov	sp, r7
 800414a:	b004      	add	sp, #16
 800414c:	bd80      	pop	{r7, pc}
 800414e:	46c0      	nop			@ (mov r8, r8)
 8004150:	dfffffff 	.word	0xdfffffff

08004154 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2284      	movs	r2, #132	@ 0x84
 8004162:	5c9b      	ldrb	r3, [r3, r2]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d101      	bne.n	800416c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004168:	2302      	movs	r3, #2
 800416a:	e02e      	b.n	80041ca <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2284      	movs	r2, #132	@ 0x84
 8004170:	2101      	movs	r1, #1
 8004172:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2288      	movs	r2, #136	@ 0x88
 8004178:	2124      	movs	r1, #36	@ 0x24
 800417a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2101      	movs	r1, #1
 8004190:	438a      	bics	r2, r1
 8004192:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	00db      	lsls	r3, r3, #3
 800419c:	08d9      	lsrs	r1, r3, #3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	430a      	orrs	r2, r1
 80041a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	0018      	movs	r0, r3
 80041ac:	f000 f854 	bl	8004258 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2288      	movs	r2, #136	@ 0x88
 80041bc:	2120      	movs	r1, #32
 80041be:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2284      	movs	r2, #132	@ 0x84
 80041c4:	2100      	movs	r1, #0
 80041c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	0018      	movs	r0, r3
 80041cc:	46bd      	mov	sp, r7
 80041ce:	b004      	add	sp, #16
 80041d0:	bd80      	pop	{r7, pc}
	...

080041d4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2284      	movs	r2, #132	@ 0x84
 80041e2:	5c9b      	ldrb	r3, [r3, r2]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d101      	bne.n	80041ec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80041e8:	2302      	movs	r3, #2
 80041ea:	e02f      	b.n	800424c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2284      	movs	r2, #132	@ 0x84
 80041f0:	2101      	movs	r1, #1
 80041f2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2288      	movs	r2, #136	@ 0x88
 80041f8:	2124      	movs	r1, #36	@ 0x24
 80041fa:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2101      	movs	r1, #1
 8004210:	438a      	bics	r2, r1
 8004212:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	4a0e      	ldr	r2, [pc, #56]	@ (8004254 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800421c:	4013      	ands	r3, r2
 800421e:	0019      	movs	r1, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	683a      	ldr	r2, [r7, #0]
 8004226:	430a      	orrs	r2, r1
 8004228:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	0018      	movs	r0, r3
 800422e:	f000 f813 	bl	8004258 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2288      	movs	r2, #136	@ 0x88
 800423e:	2120      	movs	r1, #32
 8004240:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2284      	movs	r2, #132	@ 0x84
 8004246:	2100      	movs	r1, #0
 8004248:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800424a:	2300      	movs	r3, #0
}
 800424c:	0018      	movs	r0, r3
 800424e:	46bd      	mov	sp, r7
 8004250:	b004      	add	sp, #16
 8004252:	bd80      	pop	{r7, pc}
 8004254:	f1ffffff 	.word	0xf1ffffff

08004258 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004264:	2b00      	cmp	r3, #0
 8004266:	d108      	bne.n	800427a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	226a      	movs	r2, #106	@ 0x6a
 800426c:	2101      	movs	r1, #1
 800426e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2268      	movs	r2, #104	@ 0x68
 8004274:	2101      	movs	r1, #1
 8004276:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004278:	e043      	b.n	8004302 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800427a:	260f      	movs	r6, #15
 800427c:	19bb      	adds	r3, r7, r6
 800427e:	2208      	movs	r2, #8
 8004280:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004282:	200e      	movs	r0, #14
 8004284:	183b      	adds	r3, r7, r0
 8004286:	2208      	movs	r2, #8
 8004288:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	0e5b      	lsrs	r3, r3, #25
 8004292:	b2da      	uxtb	r2, r3
 8004294:	240d      	movs	r4, #13
 8004296:	193b      	adds	r3, r7, r4
 8004298:	2107      	movs	r1, #7
 800429a:	400a      	ands	r2, r1
 800429c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	0f5b      	lsrs	r3, r3, #29
 80042a6:	b2da      	uxtb	r2, r3
 80042a8:	250c      	movs	r5, #12
 80042aa:	197b      	adds	r3, r7, r5
 80042ac:	2107      	movs	r1, #7
 80042ae:	400a      	ands	r2, r1
 80042b0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80042b2:	183b      	adds	r3, r7, r0
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	197a      	adds	r2, r7, r5
 80042b8:	7812      	ldrb	r2, [r2, #0]
 80042ba:	4914      	ldr	r1, [pc, #80]	@ (800430c <UARTEx_SetNbDataToProcess+0xb4>)
 80042bc:	5c8a      	ldrb	r2, [r1, r2]
 80042be:	435a      	muls	r2, r3
 80042c0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80042c2:	197b      	adds	r3, r7, r5
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	4a12      	ldr	r2, [pc, #72]	@ (8004310 <UARTEx_SetNbDataToProcess+0xb8>)
 80042c8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80042ca:	0019      	movs	r1, r3
 80042cc:	f7fb ffb4 	bl	8000238 <__divsi3>
 80042d0:	0003      	movs	r3, r0
 80042d2:	b299      	uxth	r1, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	226a      	movs	r2, #106	@ 0x6a
 80042d8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80042da:	19bb      	adds	r3, r7, r6
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	193a      	adds	r2, r7, r4
 80042e0:	7812      	ldrb	r2, [r2, #0]
 80042e2:	490a      	ldr	r1, [pc, #40]	@ (800430c <UARTEx_SetNbDataToProcess+0xb4>)
 80042e4:	5c8a      	ldrb	r2, [r1, r2]
 80042e6:	435a      	muls	r2, r3
 80042e8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80042ea:	193b      	adds	r3, r7, r4
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	4a08      	ldr	r2, [pc, #32]	@ (8004310 <UARTEx_SetNbDataToProcess+0xb8>)
 80042f0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80042f2:	0019      	movs	r1, r3
 80042f4:	f7fb ffa0 	bl	8000238 <__divsi3>
 80042f8:	0003      	movs	r3, r0
 80042fa:	b299      	uxth	r1, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2268      	movs	r2, #104	@ 0x68
 8004300:	5299      	strh	r1, [r3, r2]
}
 8004302:	46c0      	nop			@ (mov r8, r8)
 8004304:	46bd      	mov	sp, r7
 8004306:	b005      	add	sp, #20
 8004308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800430a:	46c0      	nop			@ (mov r8, r8)
 800430c:	08004e64 	.word	0x08004e64
 8004310:	08004e6c 	.word	0x08004e6c

08004314 <sniprintf>:
 8004314:	b40c      	push	{r2, r3}
 8004316:	b530      	push	{r4, r5, lr}
 8004318:	4b17      	ldr	r3, [pc, #92]	@ (8004378 <sniprintf+0x64>)
 800431a:	000c      	movs	r4, r1
 800431c:	681d      	ldr	r5, [r3, #0]
 800431e:	b09d      	sub	sp, #116	@ 0x74
 8004320:	2900      	cmp	r1, #0
 8004322:	da08      	bge.n	8004336 <sniprintf+0x22>
 8004324:	238b      	movs	r3, #139	@ 0x8b
 8004326:	2001      	movs	r0, #1
 8004328:	602b      	str	r3, [r5, #0]
 800432a:	4240      	negs	r0, r0
 800432c:	b01d      	add	sp, #116	@ 0x74
 800432e:	bc30      	pop	{r4, r5}
 8004330:	bc08      	pop	{r3}
 8004332:	b002      	add	sp, #8
 8004334:	4718      	bx	r3
 8004336:	2382      	movs	r3, #130	@ 0x82
 8004338:	466a      	mov	r2, sp
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	8293      	strh	r3, [r2, #20]
 800433e:	2300      	movs	r3, #0
 8004340:	9002      	str	r0, [sp, #8]
 8004342:	9006      	str	r0, [sp, #24]
 8004344:	4299      	cmp	r1, r3
 8004346:	d000      	beq.n	800434a <sniprintf+0x36>
 8004348:	1e4b      	subs	r3, r1, #1
 800434a:	9304      	str	r3, [sp, #16]
 800434c:	9307      	str	r3, [sp, #28]
 800434e:	2301      	movs	r3, #1
 8004350:	466a      	mov	r2, sp
 8004352:	425b      	negs	r3, r3
 8004354:	82d3      	strh	r3, [r2, #22]
 8004356:	0028      	movs	r0, r5
 8004358:	ab21      	add	r3, sp, #132	@ 0x84
 800435a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800435c:	a902      	add	r1, sp, #8
 800435e:	9301      	str	r3, [sp, #4]
 8004360:	f000 f8c0 	bl	80044e4 <_svfiprintf_r>
 8004364:	1c43      	adds	r3, r0, #1
 8004366:	da01      	bge.n	800436c <sniprintf+0x58>
 8004368:	238b      	movs	r3, #139	@ 0x8b
 800436a:	602b      	str	r3, [r5, #0]
 800436c:	2c00      	cmp	r4, #0
 800436e:	d0dd      	beq.n	800432c <sniprintf+0x18>
 8004370:	2200      	movs	r2, #0
 8004372:	9b02      	ldr	r3, [sp, #8]
 8004374:	701a      	strb	r2, [r3, #0]
 8004376:	e7d9      	b.n	800432c <sniprintf+0x18>
 8004378:	20000028 	.word	0x20000028

0800437c <siprintf>:
 800437c:	b40e      	push	{r1, r2, r3}
 800437e:	b500      	push	{lr}
 8004380:	490b      	ldr	r1, [pc, #44]	@ (80043b0 <siprintf+0x34>)
 8004382:	b09c      	sub	sp, #112	@ 0x70
 8004384:	ab1d      	add	r3, sp, #116	@ 0x74
 8004386:	9002      	str	r0, [sp, #8]
 8004388:	9006      	str	r0, [sp, #24]
 800438a:	9107      	str	r1, [sp, #28]
 800438c:	9104      	str	r1, [sp, #16]
 800438e:	4809      	ldr	r0, [pc, #36]	@ (80043b4 <siprintf+0x38>)
 8004390:	4909      	ldr	r1, [pc, #36]	@ (80043b8 <siprintf+0x3c>)
 8004392:	cb04      	ldmia	r3!, {r2}
 8004394:	9105      	str	r1, [sp, #20]
 8004396:	6800      	ldr	r0, [r0, #0]
 8004398:	a902      	add	r1, sp, #8
 800439a:	9301      	str	r3, [sp, #4]
 800439c:	f000 f8a2 	bl	80044e4 <_svfiprintf_r>
 80043a0:	2200      	movs	r2, #0
 80043a2:	9b02      	ldr	r3, [sp, #8]
 80043a4:	701a      	strb	r2, [r3, #0]
 80043a6:	b01c      	add	sp, #112	@ 0x70
 80043a8:	bc08      	pop	{r3}
 80043aa:	b003      	add	sp, #12
 80043ac:	4718      	bx	r3
 80043ae:	46c0      	nop			@ (mov r8, r8)
 80043b0:	7fffffff 	.word	0x7fffffff
 80043b4:	20000028 	.word	0x20000028
 80043b8:	ffff0208 	.word	0xffff0208

080043bc <memset>:
 80043bc:	0003      	movs	r3, r0
 80043be:	1882      	adds	r2, r0, r2
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d100      	bne.n	80043c6 <memset+0xa>
 80043c4:	4770      	bx	lr
 80043c6:	7019      	strb	r1, [r3, #0]
 80043c8:	3301      	adds	r3, #1
 80043ca:	e7f9      	b.n	80043c0 <memset+0x4>

080043cc <__errno>:
 80043cc:	4b01      	ldr	r3, [pc, #4]	@ (80043d4 <__errno+0x8>)
 80043ce:	6818      	ldr	r0, [r3, #0]
 80043d0:	4770      	bx	lr
 80043d2:	46c0      	nop			@ (mov r8, r8)
 80043d4:	20000028 	.word	0x20000028

080043d8 <__libc_init_array>:
 80043d8:	b570      	push	{r4, r5, r6, lr}
 80043da:	2600      	movs	r6, #0
 80043dc:	4c0c      	ldr	r4, [pc, #48]	@ (8004410 <__libc_init_array+0x38>)
 80043de:	4d0d      	ldr	r5, [pc, #52]	@ (8004414 <__libc_init_array+0x3c>)
 80043e0:	1b64      	subs	r4, r4, r5
 80043e2:	10a4      	asrs	r4, r4, #2
 80043e4:	42a6      	cmp	r6, r4
 80043e6:	d109      	bne.n	80043fc <__libc_init_array+0x24>
 80043e8:	2600      	movs	r6, #0
 80043ea:	f000 fc63 	bl	8004cb4 <_init>
 80043ee:	4c0a      	ldr	r4, [pc, #40]	@ (8004418 <__libc_init_array+0x40>)
 80043f0:	4d0a      	ldr	r5, [pc, #40]	@ (800441c <__libc_init_array+0x44>)
 80043f2:	1b64      	subs	r4, r4, r5
 80043f4:	10a4      	asrs	r4, r4, #2
 80043f6:	42a6      	cmp	r6, r4
 80043f8:	d105      	bne.n	8004406 <__libc_init_array+0x2e>
 80043fa:	bd70      	pop	{r4, r5, r6, pc}
 80043fc:	00b3      	lsls	r3, r6, #2
 80043fe:	58eb      	ldr	r3, [r5, r3]
 8004400:	4798      	blx	r3
 8004402:	3601      	adds	r6, #1
 8004404:	e7ee      	b.n	80043e4 <__libc_init_array+0xc>
 8004406:	00b3      	lsls	r3, r6, #2
 8004408:	58eb      	ldr	r3, [r5, r3]
 800440a:	4798      	blx	r3
 800440c:	3601      	adds	r6, #1
 800440e:	e7f2      	b.n	80043f6 <__libc_init_array+0x1e>
 8004410:	08004ea8 	.word	0x08004ea8
 8004414:	08004ea8 	.word	0x08004ea8
 8004418:	08004eac 	.word	0x08004eac
 800441c:	08004ea8 	.word	0x08004ea8

08004420 <__retarget_lock_acquire_recursive>:
 8004420:	4770      	bx	lr

08004422 <__retarget_lock_release_recursive>:
 8004422:	4770      	bx	lr

08004424 <__ssputs_r>:
 8004424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004426:	688e      	ldr	r6, [r1, #8]
 8004428:	b085      	sub	sp, #20
 800442a:	001f      	movs	r7, r3
 800442c:	000c      	movs	r4, r1
 800442e:	680b      	ldr	r3, [r1, #0]
 8004430:	9002      	str	r0, [sp, #8]
 8004432:	9203      	str	r2, [sp, #12]
 8004434:	42be      	cmp	r6, r7
 8004436:	d830      	bhi.n	800449a <__ssputs_r+0x76>
 8004438:	210c      	movs	r1, #12
 800443a:	5e62      	ldrsh	r2, [r4, r1]
 800443c:	2190      	movs	r1, #144	@ 0x90
 800443e:	00c9      	lsls	r1, r1, #3
 8004440:	420a      	tst	r2, r1
 8004442:	d028      	beq.n	8004496 <__ssputs_r+0x72>
 8004444:	2003      	movs	r0, #3
 8004446:	6921      	ldr	r1, [r4, #16]
 8004448:	1a5b      	subs	r3, r3, r1
 800444a:	9301      	str	r3, [sp, #4]
 800444c:	6963      	ldr	r3, [r4, #20]
 800444e:	4343      	muls	r3, r0
 8004450:	9801      	ldr	r0, [sp, #4]
 8004452:	0fdd      	lsrs	r5, r3, #31
 8004454:	18ed      	adds	r5, r5, r3
 8004456:	1c7b      	adds	r3, r7, #1
 8004458:	181b      	adds	r3, r3, r0
 800445a:	106d      	asrs	r5, r5, #1
 800445c:	42ab      	cmp	r3, r5
 800445e:	d900      	bls.n	8004462 <__ssputs_r+0x3e>
 8004460:	001d      	movs	r5, r3
 8004462:	0552      	lsls	r2, r2, #21
 8004464:	d528      	bpl.n	80044b8 <__ssputs_r+0x94>
 8004466:	0029      	movs	r1, r5
 8004468:	9802      	ldr	r0, [sp, #8]
 800446a:	f000 f95b 	bl	8004724 <_malloc_r>
 800446e:	1e06      	subs	r6, r0, #0
 8004470:	d02c      	beq.n	80044cc <__ssputs_r+0xa8>
 8004472:	9a01      	ldr	r2, [sp, #4]
 8004474:	6921      	ldr	r1, [r4, #16]
 8004476:	f000 fbc2 	bl	8004bfe <memcpy>
 800447a:	89a2      	ldrh	r2, [r4, #12]
 800447c:	4b18      	ldr	r3, [pc, #96]	@ (80044e0 <__ssputs_r+0xbc>)
 800447e:	401a      	ands	r2, r3
 8004480:	2380      	movs	r3, #128	@ 0x80
 8004482:	4313      	orrs	r3, r2
 8004484:	81a3      	strh	r3, [r4, #12]
 8004486:	9b01      	ldr	r3, [sp, #4]
 8004488:	6126      	str	r6, [r4, #16]
 800448a:	18f6      	adds	r6, r6, r3
 800448c:	6026      	str	r6, [r4, #0]
 800448e:	003e      	movs	r6, r7
 8004490:	6165      	str	r5, [r4, #20]
 8004492:	1aed      	subs	r5, r5, r3
 8004494:	60a5      	str	r5, [r4, #8]
 8004496:	42be      	cmp	r6, r7
 8004498:	d900      	bls.n	800449c <__ssputs_r+0x78>
 800449a:	003e      	movs	r6, r7
 800449c:	0032      	movs	r2, r6
 800449e:	9903      	ldr	r1, [sp, #12]
 80044a0:	6820      	ldr	r0, [r4, #0]
 80044a2:	f000 fb7c 	bl	8004b9e <memmove>
 80044a6:	2000      	movs	r0, #0
 80044a8:	68a3      	ldr	r3, [r4, #8]
 80044aa:	1b9b      	subs	r3, r3, r6
 80044ac:	60a3      	str	r3, [r4, #8]
 80044ae:	6823      	ldr	r3, [r4, #0]
 80044b0:	199b      	adds	r3, r3, r6
 80044b2:	6023      	str	r3, [r4, #0]
 80044b4:	b005      	add	sp, #20
 80044b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044b8:	002a      	movs	r2, r5
 80044ba:	9802      	ldr	r0, [sp, #8]
 80044bc:	f000 fb40 	bl	8004b40 <_realloc_r>
 80044c0:	1e06      	subs	r6, r0, #0
 80044c2:	d1e0      	bne.n	8004486 <__ssputs_r+0x62>
 80044c4:	6921      	ldr	r1, [r4, #16]
 80044c6:	9802      	ldr	r0, [sp, #8]
 80044c8:	f000 fba2 	bl	8004c10 <_free_r>
 80044cc:	230c      	movs	r3, #12
 80044ce:	2001      	movs	r0, #1
 80044d0:	9a02      	ldr	r2, [sp, #8]
 80044d2:	4240      	negs	r0, r0
 80044d4:	6013      	str	r3, [r2, #0]
 80044d6:	89a2      	ldrh	r2, [r4, #12]
 80044d8:	3334      	adds	r3, #52	@ 0x34
 80044da:	4313      	orrs	r3, r2
 80044dc:	81a3      	strh	r3, [r4, #12]
 80044de:	e7e9      	b.n	80044b4 <__ssputs_r+0x90>
 80044e0:	fffffb7f 	.word	0xfffffb7f

080044e4 <_svfiprintf_r>:
 80044e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044e6:	b0a1      	sub	sp, #132	@ 0x84
 80044e8:	9003      	str	r0, [sp, #12]
 80044ea:	001d      	movs	r5, r3
 80044ec:	898b      	ldrh	r3, [r1, #12]
 80044ee:	000f      	movs	r7, r1
 80044f0:	0016      	movs	r6, r2
 80044f2:	061b      	lsls	r3, r3, #24
 80044f4:	d511      	bpl.n	800451a <_svfiprintf_r+0x36>
 80044f6:	690b      	ldr	r3, [r1, #16]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d10e      	bne.n	800451a <_svfiprintf_r+0x36>
 80044fc:	2140      	movs	r1, #64	@ 0x40
 80044fe:	f000 f911 	bl	8004724 <_malloc_r>
 8004502:	6038      	str	r0, [r7, #0]
 8004504:	6138      	str	r0, [r7, #16]
 8004506:	2800      	cmp	r0, #0
 8004508:	d105      	bne.n	8004516 <_svfiprintf_r+0x32>
 800450a:	230c      	movs	r3, #12
 800450c:	9a03      	ldr	r2, [sp, #12]
 800450e:	6013      	str	r3, [r2, #0]
 8004510:	2001      	movs	r0, #1
 8004512:	4240      	negs	r0, r0
 8004514:	e0cf      	b.n	80046b6 <_svfiprintf_r+0x1d2>
 8004516:	2340      	movs	r3, #64	@ 0x40
 8004518:	617b      	str	r3, [r7, #20]
 800451a:	2300      	movs	r3, #0
 800451c:	ac08      	add	r4, sp, #32
 800451e:	6163      	str	r3, [r4, #20]
 8004520:	3320      	adds	r3, #32
 8004522:	7663      	strb	r3, [r4, #25]
 8004524:	3310      	adds	r3, #16
 8004526:	76a3      	strb	r3, [r4, #26]
 8004528:	9507      	str	r5, [sp, #28]
 800452a:	0035      	movs	r5, r6
 800452c:	782b      	ldrb	r3, [r5, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d001      	beq.n	8004536 <_svfiprintf_r+0x52>
 8004532:	2b25      	cmp	r3, #37	@ 0x25
 8004534:	d148      	bne.n	80045c8 <_svfiprintf_r+0xe4>
 8004536:	1bab      	subs	r3, r5, r6
 8004538:	9305      	str	r3, [sp, #20]
 800453a:	42b5      	cmp	r5, r6
 800453c:	d00b      	beq.n	8004556 <_svfiprintf_r+0x72>
 800453e:	0032      	movs	r2, r6
 8004540:	0039      	movs	r1, r7
 8004542:	9803      	ldr	r0, [sp, #12]
 8004544:	f7ff ff6e 	bl	8004424 <__ssputs_r>
 8004548:	3001      	adds	r0, #1
 800454a:	d100      	bne.n	800454e <_svfiprintf_r+0x6a>
 800454c:	e0ae      	b.n	80046ac <_svfiprintf_r+0x1c8>
 800454e:	6963      	ldr	r3, [r4, #20]
 8004550:	9a05      	ldr	r2, [sp, #20]
 8004552:	189b      	adds	r3, r3, r2
 8004554:	6163      	str	r3, [r4, #20]
 8004556:	782b      	ldrb	r3, [r5, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d100      	bne.n	800455e <_svfiprintf_r+0x7a>
 800455c:	e0a6      	b.n	80046ac <_svfiprintf_r+0x1c8>
 800455e:	2201      	movs	r2, #1
 8004560:	2300      	movs	r3, #0
 8004562:	4252      	negs	r2, r2
 8004564:	6062      	str	r2, [r4, #4]
 8004566:	a904      	add	r1, sp, #16
 8004568:	3254      	adds	r2, #84	@ 0x54
 800456a:	1852      	adds	r2, r2, r1
 800456c:	1c6e      	adds	r6, r5, #1
 800456e:	6023      	str	r3, [r4, #0]
 8004570:	60e3      	str	r3, [r4, #12]
 8004572:	60a3      	str	r3, [r4, #8]
 8004574:	7013      	strb	r3, [r2, #0]
 8004576:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004578:	4b54      	ldr	r3, [pc, #336]	@ (80046cc <_svfiprintf_r+0x1e8>)
 800457a:	2205      	movs	r2, #5
 800457c:	0018      	movs	r0, r3
 800457e:	7831      	ldrb	r1, [r6, #0]
 8004580:	9305      	str	r3, [sp, #20]
 8004582:	f000 fb31 	bl	8004be8 <memchr>
 8004586:	1c75      	adds	r5, r6, #1
 8004588:	2800      	cmp	r0, #0
 800458a:	d11f      	bne.n	80045cc <_svfiprintf_r+0xe8>
 800458c:	6822      	ldr	r2, [r4, #0]
 800458e:	06d3      	lsls	r3, r2, #27
 8004590:	d504      	bpl.n	800459c <_svfiprintf_r+0xb8>
 8004592:	2353      	movs	r3, #83	@ 0x53
 8004594:	a904      	add	r1, sp, #16
 8004596:	185b      	adds	r3, r3, r1
 8004598:	2120      	movs	r1, #32
 800459a:	7019      	strb	r1, [r3, #0]
 800459c:	0713      	lsls	r3, r2, #28
 800459e:	d504      	bpl.n	80045aa <_svfiprintf_r+0xc6>
 80045a0:	2353      	movs	r3, #83	@ 0x53
 80045a2:	a904      	add	r1, sp, #16
 80045a4:	185b      	adds	r3, r3, r1
 80045a6:	212b      	movs	r1, #43	@ 0x2b
 80045a8:	7019      	strb	r1, [r3, #0]
 80045aa:	7833      	ldrb	r3, [r6, #0]
 80045ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80045ae:	d016      	beq.n	80045de <_svfiprintf_r+0xfa>
 80045b0:	0035      	movs	r5, r6
 80045b2:	2100      	movs	r1, #0
 80045b4:	200a      	movs	r0, #10
 80045b6:	68e3      	ldr	r3, [r4, #12]
 80045b8:	782a      	ldrb	r2, [r5, #0]
 80045ba:	1c6e      	adds	r6, r5, #1
 80045bc:	3a30      	subs	r2, #48	@ 0x30
 80045be:	2a09      	cmp	r2, #9
 80045c0:	d950      	bls.n	8004664 <_svfiprintf_r+0x180>
 80045c2:	2900      	cmp	r1, #0
 80045c4:	d111      	bne.n	80045ea <_svfiprintf_r+0x106>
 80045c6:	e017      	b.n	80045f8 <_svfiprintf_r+0x114>
 80045c8:	3501      	adds	r5, #1
 80045ca:	e7af      	b.n	800452c <_svfiprintf_r+0x48>
 80045cc:	9b05      	ldr	r3, [sp, #20]
 80045ce:	6822      	ldr	r2, [r4, #0]
 80045d0:	1ac0      	subs	r0, r0, r3
 80045d2:	2301      	movs	r3, #1
 80045d4:	4083      	lsls	r3, r0
 80045d6:	4313      	orrs	r3, r2
 80045d8:	002e      	movs	r6, r5
 80045da:	6023      	str	r3, [r4, #0]
 80045dc:	e7cc      	b.n	8004578 <_svfiprintf_r+0x94>
 80045de:	9b07      	ldr	r3, [sp, #28]
 80045e0:	1d19      	adds	r1, r3, #4
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	9107      	str	r1, [sp, #28]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	db01      	blt.n	80045ee <_svfiprintf_r+0x10a>
 80045ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80045ec:	e004      	b.n	80045f8 <_svfiprintf_r+0x114>
 80045ee:	425b      	negs	r3, r3
 80045f0:	60e3      	str	r3, [r4, #12]
 80045f2:	2302      	movs	r3, #2
 80045f4:	4313      	orrs	r3, r2
 80045f6:	6023      	str	r3, [r4, #0]
 80045f8:	782b      	ldrb	r3, [r5, #0]
 80045fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80045fc:	d10c      	bne.n	8004618 <_svfiprintf_r+0x134>
 80045fe:	786b      	ldrb	r3, [r5, #1]
 8004600:	2b2a      	cmp	r3, #42	@ 0x2a
 8004602:	d134      	bne.n	800466e <_svfiprintf_r+0x18a>
 8004604:	9b07      	ldr	r3, [sp, #28]
 8004606:	3502      	adds	r5, #2
 8004608:	1d1a      	adds	r2, r3, #4
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	9207      	str	r2, [sp, #28]
 800460e:	2b00      	cmp	r3, #0
 8004610:	da01      	bge.n	8004616 <_svfiprintf_r+0x132>
 8004612:	2301      	movs	r3, #1
 8004614:	425b      	negs	r3, r3
 8004616:	9309      	str	r3, [sp, #36]	@ 0x24
 8004618:	4e2d      	ldr	r6, [pc, #180]	@ (80046d0 <_svfiprintf_r+0x1ec>)
 800461a:	2203      	movs	r2, #3
 800461c:	0030      	movs	r0, r6
 800461e:	7829      	ldrb	r1, [r5, #0]
 8004620:	f000 fae2 	bl	8004be8 <memchr>
 8004624:	2800      	cmp	r0, #0
 8004626:	d006      	beq.n	8004636 <_svfiprintf_r+0x152>
 8004628:	2340      	movs	r3, #64	@ 0x40
 800462a:	1b80      	subs	r0, r0, r6
 800462c:	4083      	lsls	r3, r0
 800462e:	6822      	ldr	r2, [r4, #0]
 8004630:	3501      	adds	r5, #1
 8004632:	4313      	orrs	r3, r2
 8004634:	6023      	str	r3, [r4, #0]
 8004636:	7829      	ldrb	r1, [r5, #0]
 8004638:	2206      	movs	r2, #6
 800463a:	4826      	ldr	r0, [pc, #152]	@ (80046d4 <_svfiprintf_r+0x1f0>)
 800463c:	1c6e      	adds	r6, r5, #1
 800463e:	7621      	strb	r1, [r4, #24]
 8004640:	f000 fad2 	bl	8004be8 <memchr>
 8004644:	2800      	cmp	r0, #0
 8004646:	d038      	beq.n	80046ba <_svfiprintf_r+0x1d6>
 8004648:	4b23      	ldr	r3, [pc, #140]	@ (80046d8 <_svfiprintf_r+0x1f4>)
 800464a:	2b00      	cmp	r3, #0
 800464c:	d122      	bne.n	8004694 <_svfiprintf_r+0x1b0>
 800464e:	2207      	movs	r2, #7
 8004650:	9b07      	ldr	r3, [sp, #28]
 8004652:	3307      	adds	r3, #7
 8004654:	4393      	bics	r3, r2
 8004656:	3308      	adds	r3, #8
 8004658:	9307      	str	r3, [sp, #28]
 800465a:	6963      	ldr	r3, [r4, #20]
 800465c:	9a04      	ldr	r2, [sp, #16]
 800465e:	189b      	adds	r3, r3, r2
 8004660:	6163      	str	r3, [r4, #20]
 8004662:	e762      	b.n	800452a <_svfiprintf_r+0x46>
 8004664:	4343      	muls	r3, r0
 8004666:	0035      	movs	r5, r6
 8004668:	2101      	movs	r1, #1
 800466a:	189b      	adds	r3, r3, r2
 800466c:	e7a4      	b.n	80045b8 <_svfiprintf_r+0xd4>
 800466e:	2300      	movs	r3, #0
 8004670:	200a      	movs	r0, #10
 8004672:	0019      	movs	r1, r3
 8004674:	3501      	adds	r5, #1
 8004676:	6063      	str	r3, [r4, #4]
 8004678:	782a      	ldrb	r2, [r5, #0]
 800467a:	1c6e      	adds	r6, r5, #1
 800467c:	3a30      	subs	r2, #48	@ 0x30
 800467e:	2a09      	cmp	r2, #9
 8004680:	d903      	bls.n	800468a <_svfiprintf_r+0x1a6>
 8004682:	2b00      	cmp	r3, #0
 8004684:	d0c8      	beq.n	8004618 <_svfiprintf_r+0x134>
 8004686:	9109      	str	r1, [sp, #36]	@ 0x24
 8004688:	e7c6      	b.n	8004618 <_svfiprintf_r+0x134>
 800468a:	4341      	muls	r1, r0
 800468c:	0035      	movs	r5, r6
 800468e:	2301      	movs	r3, #1
 8004690:	1889      	adds	r1, r1, r2
 8004692:	e7f1      	b.n	8004678 <_svfiprintf_r+0x194>
 8004694:	aa07      	add	r2, sp, #28
 8004696:	9200      	str	r2, [sp, #0]
 8004698:	0021      	movs	r1, r4
 800469a:	003a      	movs	r2, r7
 800469c:	4b0f      	ldr	r3, [pc, #60]	@ (80046dc <_svfiprintf_r+0x1f8>)
 800469e:	9803      	ldr	r0, [sp, #12]
 80046a0:	e000      	b.n	80046a4 <_svfiprintf_r+0x1c0>
 80046a2:	bf00      	nop
 80046a4:	9004      	str	r0, [sp, #16]
 80046a6:	9b04      	ldr	r3, [sp, #16]
 80046a8:	3301      	adds	r3, #1
 80046aa:	d1d6      	bne.n	800465a <_svfiprintf_r+0x176>
 80046ac:	89bb      	ldrh	r3, [r7, #12]
 80046ae:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80046b0:	065b      	lsls	r3, r3, #25
 80046b2:	d500      	bpl.n	80046b6 <_svfiprintf_r+0x1d2>
 80046b4:	e72c      	b.n	8004510 <_svfiprintf_r+0x2c>
 80046b6:	b021      	add	sp, #132	@ 0x84
 80046b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046ba:	aa07      	add	r2, sp, #28
 80046bc:	9200      	str	r2, [sp, #0]
 80046be:	0021      	movs	r1, r4
 80046c0:	003a      	movs	r2, r7
 80046c2:	4b06      	ldr	r3, [pc, #24]	@ (80046dc <_svfiprintf_r+0x1f8>)
 80046c4:	9803      	ldr	r0, [sp, #12]
 80046c6:	f000 f91d 	bl	8004904 <_printf_i>
 80046ca:	e7eb      	b.n	80046a4 <_svfiprintf_r+0x1c0>
 80046cc:	08004e74 	.word	0x08004e74
 80046d0:	08004e7a 	.word	0x08004e7a
 80046d4:	08004e7e 	.word	0x08004e7e
 80046d8:	00000000 	.word	0x00000000
 80046dc:	08004425 	.word	0x08004425

080046e0 <sbrk_aligned>:
 80046e0:	b570      	push	{r4, r5, r6, lr}
 80046e2:	4e0f      	ldr	r6, [pc, #60]	@ (8004720 <sbrk_aligned+0x40>)
 80046e4:	000d      	movs	r5, r1
 80046e6:	6831      	ldr	r1, [r6, #0]
 80046e8:	0004      	movs	r4, r0
 80046ea:	2900      	cmp	r1, #0
 80046ec:	d102      	bne.n	80046f4 <sbrk_aligned+0x14>
 80046ee:	f000 fa69 	bl	8004bc4 <_sbrk_r>
 80046f2:	6030      	str	r0, [r6, #0]
 80046f4:	0029      	movs	r1, r5
 80046f6:	0020      	movs	r0, r4
 80046f8:	f000 fa64 	bl	8004bc4 <_sbrk_r>
 80046fc:	1c43      	adds	r3, r0, #1
 80046fe:	d103      	bne.n	8004708 <sbrk_aligned+0x28>
 8004700:	2501      	movs	r5, #1
 8004702:	426d      	negs	r5, r5
 8004704:	0028      	movs	r0, r5
 8004706:	bd70      	pop	{r4, r5, r6, pc}
 8004708:	2303      	movs	r3, #3
 800470a:	1cc5      	adds	r5, r0, #3
 800470c:	439d      	bics	r5, r3
 800470e:	42a8      	cmp	r0, r5
 8004710:	d0f8      	beq.n	8004704 <sbrk_aligned+0x24>
 8004712:	1a29      	subs	r1, r5, r0
 8004714:	0020      	movs	r0, r4
 8004716:	f000 fa55 	bl	8004bc4 <_sbrk_r>
 800471a:	3001      	adds	r0, #1
 800471c:	d1f2      	bne.n	8004704 <sbrk_aligned+0x24>
 800471e:	e7ef      	b.n	8004700 <sbrk_aligned+0x20>
 8004720:	200002c8 	.word	0x200002c8

08004724 <_malloc_r>:
 8004724:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004726:	2203      	movs	r2, #3
 8004728:	1ccb      	adds	r3, r1, #3
 800472a:	4393      	bics	r3, r2
 800472c:	3308      	adds	r3, #8
 800472e:	0005      	movs	r5, r0
 8004730:	001f      	movs	r7, r3
 8004732:	2b0c      	cmp	r3, #12
 8004734:	d234      	bcs.n	80047a0 <_malloc_r+0x7c>
 8004736:	270c      	movs	r7, #12
 8004738:	42b9      	cmp	r1, r7
 800473a:	d833      	bhi.n	80047a4 <_malloc_r+0x80>
 800473c:	0028      	movs	r0, r5
 800473e:	f000 f9ef 	bl	8004b20 <__malloc_lock>
 8004742:	4e37      	ldr	r6, [pc, #220]	@ (8004820 <_malloc_r+0xfc>)
 8004744:	6833      	ldr	r3, [r6, #0]
 8004746:	001c      	movs	r4, r3
 8004748:	2c00      	cmp	r4, #0
 800474a:	d12f      	bne.n	80047ac <_malloc_r+0x88>
 800474c:	0039      	movs	r1, r7
 800474e:	0028      	movs	r0, r5
 8004750:	f7ff ffc6 	bl	80046e0 <sbrk_aligned>
 8004754:	0004      	movs	r4, r0
 8004756:	1c43      	adds	r3, r0, #1
 8004758:	d15f      	bne.n	800481a <_malloc_r+0xf6>
 800475a:	6834      	ldr	r4, [r6, #0]
 800475c:	9400      	str	r4, [sp, #0]
 800475e:	9b00      	ldr	r3, [sp, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d14a      	bne.n	80047fa <_malloc_r+0xd6>
 8004764:	2c00      	cmp	r4, #0
 8004766:	d052      	beq.n	800480e <_malloc_r+0xea>
 8004768:	6823      	ldr	r3, [r4, #0]
 800476a:	0028      	movs	r0, r5
 800476c:	18e3      	adds	r3, r4, r3
 800476e:	9900      	ldr	r1, [sp, #0]
 8004770:	9301      	str	r3, [sp, #4]
 8004772:	f000 fa27 	bl	8004bc4 <_sbrk_r>
 8004776:	9b01      	ldr	r3, [sp, #4]
 8004778:	4283      	cmp	r3, r0
 800477a:	d148      	bne.n	800480e <_malloc_r+0xea>
 800477c:	6823      	ldr	r3, [r4, #0]
 800477e:	0028      	movs	r0, r5
 8004780:	1aff      	subs	r7, r7, r3
 8004782:	0039      	movs	r1, r7
 8004784:	f7ff ffac 	bl	80046e0 <sbrk_aligned>
 8004788:	3001      	adds	r0, #1
 800478a:	d040      	beq.n	800480e <_malloc_r+0xea>
 800478c:	6823      	ldr	r3, [r4, #0]
 800478e:	19db      	adds	r3, r3, r7
 8004790:	6023      	str	r3, [r4, #0]
 8004792:	6833      	ldr	r3, [r6, #0]
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	2a00      	cmp	r2, #0
 8004798:	d133      	bne.n	8004802 <_malloc_r+0xde>
 800479a:	9b00      	ldr	r3, [sp, #0]
 800479c:	6033      	str	r3, [r6, #0]
 800479e:	e019      	b.n	80047d4 <_malloc_r+0xb0>
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	dac9      	bge.n	8004738 <_malloc_r+0x14>
 80047a4:	230c      	movs	r3, #12
 80047a6:	602b      	str	r3, [r5, #0]
 80047a8:	2000      	movs	r0, #0
 80047aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80047ac:	6821      	ldr	r1, [r4, #0]
 80047ae:	1bc9      	subs	r1, r1, r7
 80047b0:	d420      	bmi.n	80047f4 <_malloc_r+0xd0>
 80047b2:	290b      	cmp	r1, #11
 80047b4:	d90a      	bls.n	80047cc <_malloc_r+0xa8>
 80047b6:	19e2      	adds	r2, r4, r7
 80047b8:	6027      	str	r7, [r4, #0]
 80047ba:	42a3      	cmp	r3, r4
 80047bc:	d104      	bne.n	80047c8 <_malloc_r+0xa4>
 80047be:	6032      	str	r2, [r6, #0]
 80047c0:	6863      	ldr	r3, [r4, #4]
 80047c2:	6011      	str	r1, [r2, #0]
 80047c4:	6053      	str	r3, [r2, #4]
 80047c6:	e005      	b.n	80047d4 <_malloc_r+0xb0>
 80047c8:	605a      	str	r2, [r3, #4]
 80047ca:	e7f9      	b.n	80047c0 <_malloc_r+0x9c>
 80047cc:	6862      	ldr	r2, [r4, #4]
 80047ce:	42a3      	cmp	r3, r4
 80047d0:	d10e      	bne.n	80047f0 <_malloc_r+0xcc>
 80047d2:	6032      	str	r2, [r6, #0]
 80047d4:	0028      	movs	r0, r5
 80047d6:	f000 f9ab 	bl	8004b30 <__malloc_unlock>
 80047da:	0020      	movs	r0, r4
 80047dc:	2207      	movs	r2, #7
 80047de:	300b      	adds	r0, #11
 80047e0:	1d23      	adds	r3, r4, #4
 80047e2:	4390      	bics	r0, r2
 80047e4:	1ac2      	subs	r2, r0, r3
 80047e6:	4298      	cmp	r0, r3
 80047e8:	d0df      	beq.n	80047aa <_malloc_r+0x86>
 80047ea:	1a1b      	subs	r3, r3, r0
 80047ec:	50a3      	str	r3, [r4, r2]
 80047ee:	e7dc      	b.n	80047aa <_malloc_r+0x86>
 80047f0:	605a      	str	r2, [r3, #4]
 80047f2:	e7ef      	b.n	80047d4 <_malloc_r+0xb0>
 80047f4:	0023      	movs	r3, r4
 80047f6:	6864      	ldr	r4, [r4, #4]
 80047f8:	e7a6      	b.n	8004748 <_malloc_r+0x24>
 80047fa:	9c00      	ldr	r4, [sp, #0]
 80047fc:	6863      	ldr	r3, [r4, #4]
 80047fe:	9300      	str	r3, [sp, #0]
 8004800:	e7ad      	b.n	800475e <_malloc_r+0x3a>
 8004802:	001a      	movs	r2, r3
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	42a3      	cmp	r3, r4
 8004808:	d1fb      	bne.n	8004802 <_malloc_r+0xde>
 800480a:	2300      	movs	r3, #0
 800480c:	e7da      	b.n	80047c4 <_malloc_r+0xa0>
 800480e:	230c      	movs	r3, #12
 8004810:	0028      	movs	r0, r5
 8004812:	602b      	str	r3, [r5, #0]
 8004814:	f000 f98c 	bl	8004b30 <__malloc_unlock>
 8004818:	e7c6      	b.n	80047a8 <_malloc_r+0x84>
 800481a:	6007      	str	r7, [r0, #0]
 800481c:	e7da      	b.n	80047d4 <_malloc_r+0xb0>
 800481e:	46c0      	nop			@ (mov r8, r8)
 8004820:	200002cc 	.word	0x200002cc

08004824 <_printf_common>:
 8004824:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004826:	0016      	movs	r6, r2
 8004828:	9301      	str	r3, [sp, #4]
 800482a:	688a      	ldr	r2, [r1, #8]
 800482c:	690b      	ldr	r3, [r1, #16]
 800482e:	000c      	movs	r4, r1
 8004830:	9000      	str	r0, [sp, #0]
 8004832:	4293      	cmp	r3, r2
 8004834:	da00      	bge.n	8004838 <_printf_common+0x14>
 8004836:	0013      	movs	r3, r2
 8004838:	0022      	movs	r2, r4
 800483a:	6033      	str	r3, [r6, #0]
 800483c:	3243      	adds	r2, #67	@ 0x43
 800483e:	7812      	ldrb	r2, [r2, #0]
 8004840:	2a00      	cmp	r2, #0
 8004842:	d001      	beq.n	8004848 <_printf_common+0x24>
 8004844:	3301      	adds	r3, #1
 8004846:	6033      	str	r3, [r6, #0]
 8004848:	6823      	ldr	r3, [r4, #0]
 800484a:	069b      	lsls	r3, r3, #26
 800484c:	d502      	bpl.n	8004854 <_printf_common+0x30>
 800484e:	6833      	ldr	r3, [r6, #0]
 8004850:	3302      	adds	r3, #2
 8004852:	6033      	str	r3, [r6, #0]
 8004854:	6822      	ldr	r2, [r4, #0]
 8004856:	2306      	movs	r3, #6
 8004858:	0015      	movs	r5, r2
 800485a:	401d      	ands	r5, r3
 800485c:	421a      	tst	r2, r3
 800485e:	d027      	beq.n	80048b0 <_printf_common+0x8c>
 8004860:	0023      	movs	r3, r4
 8004862:	3343      	adds	r3, #67	@ 0x43
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	1e5a      	subs	r2, r3, #1
 8004868:	4193      	sbcs	r3, r2
 800486a:	6822      	ldr	r2, [r4, #0]
 800486c:	0692      	lsls	r2, r2, #26
 800486e:	d430      	bmi.n	80048d2 <_printf_common+0xae>
 8004870:	0022      	movs	r2, r4
 8004872:	9901      	ldr	r1, [sp, #4]
 8004874:	9800      	ldr	r0, [sp, #0]
 8004876:	9d08      	ldr	r5, [sp, #32]
 8004878:	3243      	adds	r2, #67	@ 0x43
 800487a:	47a8      	blx	r5
 800487c:	3001      	adds	r0, #1
 800487e:	d025      	beq.n	80048cc <_printf_common+0xa8>
 8004880:	2206      	movs	r2, #6
 8004882:	6823      	ldr	r3, [r4, #0]
 8004884:	2500      	movs	r5, #0
 8004886:	4013      	ands	r3, r2
 8004888:	2b04      	cmp	r3, #4
 800488a:	d105      	bne.n	8004898 <_printf_common+0x74>
 800488c:	6833      	ldr	r3, [r6, #0]
 800488e:	68e5      	ldr	r5, [r4, #12]
 8004890:	1aed      	subs	r5, r5, r3
 8004892:	43eb      	mvns	r3, r5
 8004894:	17db      	asrs	r3, r3, #31
 8004896:	401d      	ands	r5, r3
 8004898:	68a3      	ldr	r3, [r4, #8]
 800489a:	6922      	ldr	r2, [r4, #16]
 800489c:	4293      	cmp	r3, r2
 800489e:	dd01      	ble.n	80048a4 <_printf_common+0x80>
 80048a0:	1a9b      	subs	r3, r3, r2
 80048a2:	18ed      	adds	r5, r5, r3
 80048a4:	2600      	movs	r6, #0
 80048a6:	42b5      	cmp	r5, r6
 80048a8:	d120      	bne.n	80048ec <_printf_common+0xc8>
 80048aa:	2000      	movs	r0, #0
 80048ac:	e010      	b.n	80048d0 <_printf_common+0xac>
 80048ae:	3501      	adds	r5, #1
 80048b0:	68e3      	ldr	r3, [r4, #12]
 80048b2:	6832      	ldr	r2, [r6, #0]
 80048b4:	1a9b      	subs	r3, r3, r2
 80048b6:	42ab      	cmp	r3, r5
 80048b8:	ddd2      	ble.n	8004860 <_printf_common+0x3c>
 80048ba:	0022      	movs	r2, r4
 80048bc:	2301      	movs	r3, #1
 80048be:	9901      	ldr	r1, [sp, #4]
 80048c0:	9800      	ldr	r0, [sp, #0]
 80048c2:	9f08      	ldr	r7, [sp, #32]
 80048c4:	3219      	adds	r2, #25
 80048c6:	47b8      	blx	r7
 80048c8:	3001      	adds	r0, #1
 80048ca:	d1f0      	bne.n	80048ae <_printf_common+0x8a>
 80048cc:	2001      	movs	r0, #1
 80048ce:	4240      	negs	r0, r0
 80048d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80048d2:	2030      	movs	r0, #48	@ 0x30
 80048d4:	18e1      	adds	r1, r4, r3
 80048d6:	3143      	adds	r1, #67	@ 0x43
 80048d8:	7008      	strb	r0, [r1, #0]
 80048da:	0021      	movs	r1, r4
 80048dc:	1c5a      	adds	r2, r3, #1
 80048de:	3145      	adds	r1, #69	@ 0x45
 80048e0:	7809      	ldrb	r1, [r1, #0]
 80048e2:	18a2      	adds	r2, r4, r2
 80048e4:	3243      	adds	r2, #67	@ 0x43
 80048e6:	3302      	adds	r3, #2
 80048e8:	7011      	strb	r1, [r2, #0]
 80048ea:	e7c1      	b.n	8004870 <_printf_common+0x4c>
 80048ec:	0022      	movs	r2, r4
 80048ee:	2301      	movs	r3, #1
 80048f0:	9901      	ldr	r1, [sp, #4]
 80048f2:	9800      	ldr	r0, [sp, #0]
 80048f4:	9f08      	ldr	r7, [sp, #32]
 80048f6:	321a      	adds	r2, #26
 80048f8:	47b8      	blx	r7
 80048fa:	3001      	adds	r0, #1
 80048fc:	d0e6      	beq.n	80048cc <_printf_common+0xa8>
 80048fe:	3601      	adds	r6, #1
 8004900:	e7d1      	b.n	80048a6 <_printf_common+0x82>
	...

08004904 <_printf_i>:
 8004904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004906:	b08b      	sub	sp, #44	@ 0x2c
 8004908:	9206      	str	r2, [sp, #24]
 800490a:	000a      	movs	r2, r1
 800490c:	3243      	adds	r2, #67	@ 0x43
 800490e:	9307      	str	r3, [sp, #28]
 8004910:	9005      	str	r0, [sp, #20]
 8004912:	9203      	str	r2, [sp, #12]
 8004914:	7e0a      	ldrb	r2, [r1, #24]
 8004916:	000c      	movs	r4, r1
 8004918:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800491a:	2a78      	cmp	r2, #120	@ 0x78
 800491c:	d809      	bhi.n	8004932 <_printf_i+0x2e>
 800491e:	2a62      	cmp	r2, #98	@ 0x62
 8004920:	d80b      	bhi.n	800493a <_printf_i+0x36>
 8004922:	2a00      	cmp	r2, #0
 8004924:	d100      	bne.n	8004928 <_printf_i+0x24>
 8004926:	e0bc      	b.n	8004aa2 <_printf_i+0x19e>
 8004928:	497b      	ldr	r1, [pc, #492]	@ (8004b18 <_printf_i+0x214>)
 800492a:	9104      	str	r1, [sp, #16]
 800492c:	2a58      	cmp	r2, #88	@ 0x58
 800492e:	d100      	bne.n	8004932 <_printf_i+0x2e>
 8004930:	e090      	b.n	8004a54 <_printf_i+0x150>
 8004932:	0025      	movs	r5, r4
 8004934:	3542      	adds	r5, #66	@ 0x42
 8004936:	702a      	strb	r2, [r5, #0]
 8004938:	e022      	b.n	8004980 <_printf_i+0x7c>
 800493a:	0010      	movs	r0, r2
 800493c:	3863      	subs	r0, #99	@ 0x63
 800493e:	2815      	cmp	r0, #21
 8004940:	d8f7      	bhi.n	8004932 <_printf_i+0x2e>
 8004942:	f7fb fbe5 	bl	8000110 <__gnu_thumb1_case_shi>
 8004946:	0016      	.short	0x0016
 8004948:	fff6001f 	.word	0xfff6001f
 800494c:	fff6fff6 	.word	0xfff6fff6
 8004950:	001ffff6 	.word	0x001ffff6
 8004954:	fff6fff6 	.word	0xfff6fff6
 8004958:	fff6fff6 	.word	0xfff6fff6
 800495c:	003600a1 	.word	0x003600a1
 8004960:	fff60080 	.word	0xfff60080
 8004964:	00b2fff6 	.word	0x00b2fff6
 8004968:	0036fff6 	.word	0x0036fff6
 800496c:	fff6fff6 	.word	0xfff6fff6
 8004970:	0084      	.short	0x0084
 8004972:	0025      	movs	r5, r4
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	3542      	adds	r5, #66	@ 0x42
 8004978:	1d11      	adds	r1, r2, #4
 800497a:	6019      	str	r1, [r3, #0]
 800497c:	6813      	ldr	r3, [r2, #0]
 800497e:	702b      	strb	r3, [r5, #0]
 8004980:	2301      	movs	r3, #1
 8004982:	e0a0      	b.n	8004ac6 <_printf_i+0x1c2>
 8004984:	6818      	ldr	r0, [r3, #0]
 8004986:	6809      	ldr	r1, [r1, #0]
 8004988:	1d02      	adds	r2, r0, #4
 800498a:	060d      	lsls	r5, r1, #24
 800498c:	d50b      	bpl.n	80049a6 <_printf_i+0xa2>
 800498e:	6806      	ldr	r6, [r0, #0]
 8004990:	601a      	str	r2, [r3, #0]
 8004992:	2e00      	cmp	r6, #0
 8004994:	da03      	bge.n	800499e <_printf_i+0x9a>
 8004996:	232d      	movs	r3, #45	@ 0x2d
 8004998:	9a03      	ldr	r2, [sp, #12]
 800499a:	4276      	negs	r6, r6
 800499c:	7013      	strb	r3, [r2, #0]
 800499e:	4b5e      	ldr	r3, [pc, #376]	@ (8004b18 <_printf_i+0x214>)
 80049a0:	270a      	movs	r7, #10
 80049a2:	9304      	str	r3, [sp, #16]
 80049a4:	e018      	b.n	80049d8 <_printf_i+0xd4>
 80049a6:	6806      	ldr	r6, [r0, #0]
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	0649      	lsls	r1, r1, #25
 80049ac:	d5f1      	bpl.n	8004992 <_printf_i+0x8e>
 80049ae:	b236      	sxth	r6, r6
 80049b0:	e7ef      	b.n	8004992 <_printf_i+0x8e>
 80049b2:	6808      	ldr	r0, [r1, #0]
 80049b4:	6819      	ldr	r1, [r3, #0]
 80049b6:	c940      	ldmia	r1!, {r6}
 80049b8:	0605      	lsls	r5, r0, #24
 80049ba:	d402      	bmi.n	80049c2 <_printf_i+0xbe>
 80049bc:	0640      	lsls	r0, r0, #25
 80049be:	d500      	bpl.n	80049c2 <_printf_i+0xbe>
 80049c0:	b2b6      	uxth	r6, r6
 80049c2:	6019      	str	r1, [r3, #0]
 80049c4:	4b54      	ldr	r3, [pc, #336]	@ (8004b18 <_printf_i+0x214>)
 80049c6:	270a      	movs	r7, #10
 80049c8:	9304      	str	r3, [sp, #16]
 80049ca:	2a6f      	cmp	r2, #111	@ 0x6f
 80049cc:	d100      	bne.n	80049d0 <_printf_i+0xcc>
 80049ce:	3f02      	subs	r7, #2
 80049d0:	0023      	movs	r3, r4
 80049d2:	2200      	movs	r2, #0
 80049d4:	3343      	adds	r3, #67	@ 0x43
 80049d6:	701a      	strb	r2, [r3, #0]
 80049d8:	6863      	ldr	r3, [r4, #4]
 80049da:	60a3      	str	r3, [r4, #8]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	db03      	blt.n	80049e8 <_printf_i+0xe4>
 80049e0:	2104      	movs	r1, #4
 80049e2:	6822      	ldr	r2, [r4, #0]
 80049e4:	438a      	bics	r2, r1
 80049e6:	6022      	str	r2, [r4, #0]
 80049e8:	2e00      	cmp	r6, #0
 80049ea:	d102      	bne.n	80049f2 <_printf_i+0xee>
 80049ec:	9d03      	ldr	r5, [sp, #12]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00c      	beq.n	8004a0c <_printf_i+0x108>
 80049f2:	9d03      	ldr	r5, [sp, #12]
 80049f4:	0030      	movs	r0, r6
 80049f6:	0039      	movs	r1, r7
 80049f8:	f7fb fc1a 	bl	8000230 <__aeabi_uidivmod>
 80049fc:	9b04      	ldr	r3, [sp, #16]
 80049fe:	3d01      	subs	r5, #1
 8004a00:	5c5b      	ldrb	r3, [r3, r1]
 8004a02:	702b      	strb	r3, [r5, #0]
 8004a04:	0033      	movs	r3, r6
 8004a06:	0006      	movs	r6, r0
 8004a08:	429f      	cmp	r7, r3
 8004a0a:	d9f3      	bls.n	80049f4 <_printf_i+0xf0>
 8004a0c:	2f08      	cmp	r7, #8
 8004a0e:	d109      	bne.n	8004a24 <_printf_i+0x120>
 8004a10:	6823      	ldr	r3, [r4, #0]
 8004a12:	07db      	lsls	r3, r3, #31
 8004a14:	d506      	bpl.n	8004a24 <_printf_i+0x120>
 8004a16:	6862      	ldr	r2, [r4, #4]
 8004a18:	6923      	ldr	r3, [r4, #16]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	dc02      	bgt.n	8004a24 <_printf_i+0x120>
 8004a1e:	2330      	movs	r3, #48	@ 0x30
 8004a20:	3d01      	subs	r5, #1
 8004a22:	702b      	strb	r3, [r5, #0]
 8004a24:	9b03      	ldr	r3, [sp, #12]
 8004a26:	1b5b      	subs	r3, r3, r5
 8004a28:	6123      	str	r3, [r4, #16]
 8004a2a:	9b07      	ldr	r3, [sp, #28]
 8004a2c:	0021      	movs	r1, r4
 8004a2e:	9300      	str	r3, [sp, #0]
 8004a30:	9805      	ldr	r0, [sp, #20]
 8004a32:	9b06      	ldr	r3, [sp, #24]
 8004a34:	aa09      	add	r2, sp, #36	@ 0x24
 8004a36:	f7ff fef5 	bl	8004824 <_printf_common>
 8004a3a:	3001      	adds	r0, #1
 8004a3c:	d148      	bne.n	8004ad0 <_printf_i+0x1cc>
 8004a3e:	2001      	movs	r0, #1
 8004a40:	4240      	negs	r0, r0
 8004a42:	b00b      	add	sp, #44	@ 0x2c
 8004a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a46:	2220      	movs	r2, #32
 8004a48:	6809      	ldr	r1, [r1, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	6022      	str	r2, [r4, #0]
 8004a4e:	2278      	movs	r2, #120	@ 0x78
 8004a50:	4932      	ldr	r1, [pc, #200]	@ (8004b1c <_printf_i+0x218>)
 8004a52:	9104      	str	r1, [sp, #16]
 8004a54:	0021      	movs	r1, r4
 8004a56:	3145      	adds	r1, #69	@ 0x45
 8004a58:	700a      	strb	r2, [r1, #0]
 8004a5a:	6819      	ldr	r1, [r3, #0]
 8004a5c:	6822      	ldr	r2, [r4, #0]
 8004a5e:	c940      	ldmia	r1!, {r6}
 8004a60:	0610      	lsls	r0, r2, #24
 8004a62:	d402      	bmi.n	8004a6a <_printf_i+0x166>
 8004a64:	0650      	lsls	r0, r2, #25
 8004a66:	d500      	bpl.n	8004a6a <_printf_i+0x166>
 8004a68:	b2b6      	uxth	r6, r6
 8004a6a:	6019      	str	r1, [r3, #0]
 8004a6c:	07d3      	lsls	r3, r2, #31
 8004a6e:	d502      	bpl.n	8004a76 <_printf_i+0x172>
 8004a70:	2320      	movs	r3, #32
 8004a72:	4313      	orrs	r3, r2
 8004a74:	6023      	str	r3, [r4, #0]
 8004a76:	2e00      	cmp	r6, #0
 8004a78:	d001      	beq.n	8004a7e <_printf_i+0x17a>
 8004a7a:	2710      	movs	r7, #16
 8004a7c:	e7a8      	b.n	80049d0 <_printf_i+0xcc>
 8004a7e:	2220      	movs	r2, #32
 8004a80:	6823      	ldr	r3, [r4, #0]
 8004a82:	4393      	bics	r3, r2
 8004a84:	6023      	str	r3, [r4, #0]
 8004a86:	e7f8      	b.n	8004a7a <_printf_i+0x176>
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	680d      	ldr	r5, [r1, #0]
 8004a8c:	1d10      	adds	r0, r2, #4
 8004a8e:	6949      	ldr	r1, [r1, #20]
 8004a90:	6018      	str	r0, [r3, #0]
 8004a92:	6813      	ldr	r3, [r2, #0]
 8004a94:	062e      	lsls	r6, r5, #24
 8004a96:	d501      	bpl.n	8004a9c <_printf_i+0x198>
 8004a98:	6019      	str	r1, [r3, #0]
 8004a9a:	e002      	b.n	8004aa2 <_printf_i+0x19e>
 8004a9c:	066d      	lsls	r5, r5, #25
 8004a9e:	d5fb      	bpl.n	8004a98 <_printf_i+0x194>
 8004aa0:	8019      	strh	r1, [r3, #0]
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	9d03      	ldr	r5, [sp, #12]
 8004aa6:	6123      	str	r3, [r4, #16]
 8004aa8:	e7bf      	b.n	8004a2a <_printf_i+0x126>
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	1d11      	adds	r1, r2, #4
 8004aae:	6019      	str	r1, [r3, #0]
 8004ab0:	6815      	ldr	r5, [r2, #0]
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	0028      	movs	r0, r5
 8004ab6:	6862      	ldr	r2, [r4, #4]
 8004ab8:	f000 f896 	bl	8004be8 <memchr>
 8004abc:	2800      	cmp	r0, #0
 8004abe:	d001      	beq.n	8004ac4 <_printf_i+0x1c0>
 8004ac0:	1b40      	subs	r0, r0, r5
 8004ac2:	6060      	str	r0, [r4, #4]
 8004ac4:	6863      	ldr	r3, [r4, #4]
 8004ac6:	6123      	str	r3, [r4, #16]
 8004ac8:	2300      	movs	r3, #0
 8004aca:	9a03      	ldr	r2, [sp, #12]
 8004acc:	7013      	strb	r3, [r2, #0]
 8004ace:	e7ac      	b.n	8004a2a <_printf_i+0x126>
 8004ad0:	002a      	movs	r2, r5
 8004ad2:	6923      	ldr	r3, [r4, #16]
 8004ad4:	9906      	ldr	r1, [sp, #24]
 8004ad6:	9805      	ldr	r0, [sp, #20]
 8004ad8:	9d07      	ldr	r5, [sp, #28]
 8004ada:	47a8      	blx	r5
 8004adc:	3001      	adds	r0, #1
 8004ade:	d0ae      	beq.n	8004a3e <_printf_i+0x13a>
 8004ae0:	6823      	ldr	r3, [r4, #0]
 8004ae2:	079b      	lsls	r3, r3, #30
 8004ae4:	d415      	bmi.n	8004b12 <_printf_i+0x20e>
 8004ae6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ae8:	68e0      	ldr	r0, [r4, #12]
 8004aea:	4298      	cmp	r0, r3
 8004aec:	daa9      	bge.n	8004a42 <_printf_i+0x13e>
 8004aee:	0018      	movs	r0, r3
 8004af0:	e7a7      	b.n	8004a42 <_printf_i+0x13e>
 8004af2:	0022      	movs	r2, r4
 8004af4:	2301      	movs	r3, #1
 8004af6:	9906      	ldr	r1, [sp, #24]
 8004af8:	9805      	ldr	r0, [sp, #20]
 8004afa:	9e07      	ldr	r6, [sp, #28]
 8004afc:	3219      	adds	r2, #25
 8004afe:	47b0      	blx	r6
 8004b00:	3001      	adds	r0, #1
 8004b02:	d09c      	beq.n	8004a3e <_printf_i+0x13a>
 8004b04:	3501      	adds	r5, #1
 8004b06:	68e3      	ldr	r3, [r4, #12]
 8004b08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004b0a:	1a9b      	subs	r3, r3, r2
 8004b0c:	42ab      	cmp	r3, r5
 8004b0e:	dcf0      	bgt.n	8004af2 <_printf_i+0x1ee>
 8004b10:	e7e9      	b.n	8004ae6 <_printf_i+0x1e2>
 8004b12:	2500      	movs	r5, #0
 8004b14:	e7f7      	b.n	8004b06 <_printf_i+0x202>
 8004b16:	46c0      	nop			@ (mov r8, r8)
 8004b18:	08004e85 	.word	0x08004e85
 8004b1c:	08004e96 	.word	0x08004e96

08004b20 <__malloc_lock>:
 8004b20:	b510      	push	{r4, lr}
 8004b22:	4802      	ldr	r0, [pc, #8]	@ (8004b2c <__malloc_lock+0xc>)
 8004b24:	f7ff fc7c 	bl	8004420 <__retarget_lock_acquire_recursive>
 8004b28:	bd10      	pop	{r4, pc}
 8004b2a:	46c0      	nop			@ (mov r8, r8)
 8004b2c:	200002c4 	.word	0x200002c4

08004b30 <__malloc_unlock>:
 8004b30:	b510      	push	{r4, lr}
 8004b32:	4802      	ldr	r0, [pc, #8]	@ (8004b3c <__malloc_unlock+0xc>)
 8004b34:	f7ff fc75 	bl	8004422 <__retarget_lock_release_recursive>
 8004b38:	bd10      	pop	{r4, pc}
 8004b3a:	46c0      	nop			@ (mov r8, r8)
 8004b3c:	200002c4 	.word	0x200002c4

08004b40 <_realloc_r>:
 8004b40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b42:	0006      	movs	r6, r0
 8004b44:	000c      	movs	r4, r1
 8004b46:	0015      	movs	r5, r2
 8004b48:	2900      	cmp	r1, #0
 8004b4a:	d105      	bne.n	8004b58 <_realloc_r+0x18>
 8004b4c:	0011      	movs	r1, r2
 8004b4e:	f7ff fde9 	bl	8004724 <_malloc_r>
 8004b52:	0004      	movs	r4, r0
 8004b54:	0020      	movs	r0, r4
 8004b56:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004b58:	2a00      	cmp	r2, #0
 8004b5a:	d103      	bne.n	8004b64 <_realloc_r+0x24>
 8004b5c:	f000 f858 	bl	8004c10 <_free_r>
 8004b60:	2400      	movs	r4, #0
 8004b62:	e7f7      	b.n	8004b54 <_realloc_r+0x14>
 8004b64:	f000 f89e 	bl	8004ca4 <_malloc_usable_size_r>
 8004b68:	0007      	movs	r7, r0
 8004b6a:	4285      	cmp	r5, r0
 8004b6c:	d802      	bhi.n	8004b74 <_realloc_r+0x34>
 8004b6e:	0843      	lsrs	r3, r0, #1
 8004b70:	42ab      	cmp	r3, r5
 8004b72:	d3ef      	bcc.n	8004b54 <_realloc_r+0x14>
 8004b74:	0029      	movs	r1, r5
 8004b76:	0030      	movs	r0, r6
 8004b78:	f7ff fdd4 	bl	8004724 <_malloc_r>
 8004b7c:	9001      	str	r0, [sp, #4]
 8004b7e:	2800      	cmp	r0, #0
 8004b80:	d0ee      	beq.n	8004b60 <_realloc_r+0x20>
 8004b82:	002a      	movs	r2, r5
 8004b84:	42bd      	cmp	r5, r7
 8004b86:	d900      	bls.n	8004b8a <_realloc_r+0x4a>
 8004b88:	003a      	movs	r2, r7
 8004b8a:	0021      	movs	r1, r4
 8004b8c:	9801      	ldr	r0, [sp, #4]
 8004b8e:	f000 f836 	bl	8004bfe <memcpy>
 8004b92:	0021      	movs	r1, r4
 8004b94:	0030      	movs	r0, r6
 8004b96:	f000 f83b 	bl	8004c10 <_free_r>
 8004b9a:	9c01      	ldr	r4, [sp, #4]
 8004b9c:	e7da      	b.n	8004b54 <_realloc_r+0x14>

08004b9e <memmove>:
 8004b9e:	b510      	push	{r4, lr}
 8004ba0:	4288      	cmp	r0, r1
 8004ba2:	d806      	bhi.n	8004bb2 <memmove+0x14>
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d008      	beq.n	8004bbc <memmove+0x1e>
 8004baa:	5ccc      	ldrb	r4, [r1, r3]
 8004bac:	54c4      	strb	r4, [r0, r3]
 8004bae:	3301      	adds	r3, #1
 8004bb0:	e7f9      	b.n	8004ba6 <memmove+0x8>
 8004bb2:	188b      	adds	r3, r1, r2
 8004bb4:	4298      	cmp	r0, r3
 8004bb6:	d2f5      	bcs.n	8004ba4 <memmove+0x6>
 8004bb8:	3a01      	subs	r2, #1
 8004bba:	d200      	bcs.n	8004bbe <memmove+0x20>
 8004bbc:	bd10      	pop	{r4, pc}
 8004bbe:	5c8b      	ldrb	r3, [r1, r2]
 8004bc0:	5483      	strb	r3, [r0, r2]
 8004bc2:	e7f9      	b.n	8004bb8 <memmove+0x1a>

08004bc4 <_sbrk_r>:
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	b570      	push	{r4, r5, r6, lr}
 8004bc8:	4d06      	ldr	r5, [pc, #24]	@ (8004be4 <_sbrk_r+0x20>)
 8004bca:	0004      	movs	r4, r0
 8004bcc:	0008      	movs	r0, r1
 8004bce:	602b      	str	r3, [r5, #0]
 8004bd0:	f7fc f904 	bl	8000ddc <_sbrk>
 8004bd4:	1c43      	adds	r3, r0, #1
 8004bd6:	d103      	bne.n	8004be0 <_sbrk_r+0x1c>
 8004bd8:	682b      	ldr	r3, [r5, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d000      	beq.n	8004be0 <_sbrk_r+0x1c>
 8004bde:	6023      	str	r3, [r4, #0]
 8004be0:	bd70      	pop	{r4, r5, r6, pc}
 8004be2:	46c0      	nop			@ (mov r8, r8)
 8004be4:	200002d0 	.word	0x200002d0

08004be8 <memchr>:
 8004be8:	b2c9      	uxtb	r1, r1
 8004bea:	1882      	adds	r2, r0, r2
 8004bec:	4290      	cmp	r0, r2
 8004bee:	d101      	bne.n	8004bf4 <memchr+0xc>
 8004bf0:	2000      	movs	r0, #0
 8004bf2:	4770      	bx	lr
 8004bf4:	7803      	ldrb	r3, [r0, #0]
 8004bf6:	428b      	cmp	r3, r1
 8004bf8:	d0fb      	beq.n	8004bf2 <memchr+0xa>
 8004bfa:	3001      	adds	r0, #1
 8004bfc:	e7f6      	b.n	8004bec <memchr+0x4>

08004bfe <memcpy>:
 8004bfe:	2300      	movs	r3, #0
 8004c00:	b510      	push	{r4, lr}
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d100      	bne.n	8004c08 <memcpy+0xa>
 8004c06:	bd10      	pop	{r4, pc}
 8004c08:	5ccc      	ldrb	r4, [r1, r3]
 8004c0a:	54c4      	strb	r4, [r0, r3]
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	e7f8      	b.n	8004c02 <memcpy+0x4>

08004c10 <_free_r>:
 8004c10:	b570      	push	{r4, r5, r6, lr}
 8004c12:	0005      	movs	r5, r0
 8004c14:	1e0c      	subs	r4, r1, #0
 8004c16:	d010      	beq.n	8004c3a <_free_r+0x2a>
 8004c18:	3c04      	subs	r4, #4
 8004c1a:	6823      	ldr	r3, [r4, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	da00      	bge.n	8004c22 <_free_r+0x12>
 8004c20:	18e4      	adds	r4, r4, r3
 8004c22:	0028      	movs	r0, r5
 8004c24:	f7ff ff7c 	bl	8004b20 <__malloc_lock>
 8004c28:	4a1d      	ldr	r2, [pc, #116]	@ (8004ca0 <_free_r+0x90>)
 8004c2a:	6813      	ldr	r3, [r2, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d105      	bne.n	8004c3c <_free_r+0x2c>
 8004c30:	6063      	str	r3, [r4, #4]
 8004c32:	6014      	str	r4, [r2, #0]
 8004c34:	0028      	movs	r0, r5
 8004c36:	f7ff ff7b 	bl	8004b30 <__malloc_unlock>
 8004c3a:	bd70      	pop	{r4, r5, r6, pc}
 8004c3c:	42a3      	cmp	r3, r4
 8004c3e:	d908      	bls.n	8004c52 <_free_r+0x42>
 8004c40:	6820      	ldr	r0, [r4, #0]
 8004c42:	1821      	adds	r1, r4, r0
 8004c44:	428b      	cmp	r3, r1
 8004c46:	d1f3      	bne.n	8004c30 <_free_r+0x20>
 8004c48:	6819      	ldr	r1, [r3, #0]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	1809      	adds	r1, r1, r0
 8004c4e:	6021      	str	r1, [r4, #0]
 8004c50:	e7ee      	b.n	8004c30 <_free_r+0x20>
 8004c52:	001a      	movs	r2, r3
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d001      	beq.n	8004c5e <_free_r+0x4e>
 8004c5a:	42a3      	cmp	r3, r4
 8004c5c:	d9f9      	bls.n	8004c52 <_free_r+0x42>
 8004c5e:	6811      	ldr	r1, [r2, #0]
 8004c60:	1850      	adds	r0, r2, r1
 8004c62:	42a0      	cmp	r0, r4
 8004c64:	d10b      	bne.n	8004c7e <_free_r+0x6e>
 8004c66:	6820      	ldr	r0, [r4, #0]
 8004c68:	1809      	adds	r1, r1, r0
 8004c6a:	1850      	adds	r0, r2, r1
 8004c6c:	6011      	str	r1, [r2, #0]
 8004c6e:	4283      	cmp	r3, r0
 8004c70:	d1e0      	bne.n	8004c34 <_free_r+0x24>
 8004c72:	6818      	ldr	r0, [r3, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	1841      	adds	r1, r0, r1
 8004c78:	6011      	str	r1, [r2, #0]
 8004c7a:	6053      	str	r3, [r2, #4]
 8004c7c:	e7da      	b.n	8004c34 <_free_r+0x24>
 8004c7e:	42a0      	cmp	r0, r4
 8004c80:	d902      	bls.n	8004c88 <_free_r+0x78>
 8004c82:	230c      	movs	r3, #12
 8004c84:	602b      	str	r3, [r5, #0]
 8004c86:	e7d5      	b.n	8004c34 <_free_r+0x24>
 8004c88:	6820      	ldr	r0, [r4, #0]
 8004c8a:	1821      	adds	r1, r4, r0
 8004c8c:	428b      	cmp	r3, r1
 8004c8e:	d103      	bne.n	8004c98 <_free_r+0x88>
 8004c90:	6819      	ldr	r1, [r3, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	1809      	adds	r1, r1, r0
 8004c96:	6021      	str	r1, [r4, #0]
 8004c98:	6063      	str	r3, [r4, #4]
 8004c9a:	6054      	str	r4, [r2, #4]
 8004c9c:	e7ca      	b.n	8004c34 <_free_r+0x24>
 8004c9e:	46c0      	nop			@ (mov r8, r8)
 8004ca0:	200002cc 	.word	0x200002cc

08004ca4 <_malloc_usable_size_r>:
 8004ca4:	1f0b      	subs	r3, r1, #4
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	1f18      	subs	r0, r3, #4
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	da01      	bge.n	8004cb2 <_malloc_usable_size_r+0xe>
 8004cae:	580b      	ldr	r3, [r1, r0]
 8004cb0:	18c0      	adds	r0, r0, r3
 8004cb2:	4770      	bx	lr

08004cb4 <_init>:
 8004cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cb6:	46c0      	nop			@ (mov r8, r8)
 8004cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cba:	bc08      	pop	{r3}
 8004cbc:	469e      	mov	lr, r3
 8004cbe:	4770      	bx	lr

08004cc0 <_fini>:
 8004cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cc2:	46c0      	nop			@ (mov r8, r8)
 8004cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cc6:	bc08      	pop	{r3}
 8004cc8:	469e      	mov	lr, r3
 8004cca:	4770      	bx	lr
